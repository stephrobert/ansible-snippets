{
    "Check or wait for migrations between nodes": {
        "prefix": [
            "community.general.aerospike_migrations",
            "aerospike_migrations Check or wait for migrations between nodes"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.aerospike_migrations:",
            "    connect_timeout: ${2:1000}",
            "    consecutive_good_checks: ${3:3}",
            "    fail_on_cluster_change: ${4|true,false|}",
            "    host: ${5:localhost}",
            "    local_only: ${6|false,true|}",
            "    migrate_rx_key: ${7:migrate_rx_partitions_remaining}",
            "    migrate_tx_key: ${8:migrate_tx_partitions_remaining}",
            "    min_cluster_size: ${9:1}",
            "    port: ${10:3000}",
            "    sleep_between_checks: ${11:60}",
            "    target_cluster_size: ${12:int}",
            "    tries_limit: ${13:300}",
            "$0"
        ],
        "description": "Check or wait for migrations between nodes",
        "scope": "ansible"
    },
    "Notify airbrake about app deployments": {
        "prefix": [
            "community.general.airbrake_deployment",
            "airbrake_deployment Notify airbrake about app deployments"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.airbrake_deployment:",
            "    environment: ${2:string}",
            "    project_id: ${3:string}",
            "    project_key: ${4:string}",
            "    repo: ${5:string}",
            "    revision: ${6:string}",
            "    url: ${7:https://api.airbrake.io/api/v4/projects/}",
            "    user: ${8:string}",
            "    validate_certs: ${9|true,false|}",
            "    version: ${10:string}",
            "$0"
        ],
        "description": "Notify airbrake about app deployments",
        "scope": "ansible"
    },
    "Manages AIX devices": {
        "prefix": [
            "community.general.aix_devices",
            "aix_devices Manages AIX devices"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.aix_devices:",
            "    device: ${3:string}",
            "    force: ${4|false,true|}",
            "    recursive: ${5|false,true|}",
            "    state: ${6|available,defined,removed|}",
            "$0"
        ],
        "description": "Manages AIX devices",
        "scope": "ansible"
    },
    "Configure LVM and NFS file systems for AIX": {
        "prefix": [
            "community.general.aix_filesystem",
            "aix_filesystem Configure LVM and NFS file systems for AIX"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.aix_filesystem:",
            "    account_subsystem: ${2|false,true|}",
            "    attributes:",
            "      - ${3:element}",
            "    auto_mount: ${4|true,false|}",
            "    device: ${5:string}",
            "    filesystem: ${6:string}",
            "    fs_type: ${7:jfs2}",
            "    mount_group: ${8:string}",
            "    nfs_server: ${9:string}",
            "    permissions: ${10|rw,ro|}",
            "    rm_mount_point: ${11|false,true|}",
            "    size: ${12:string}",
            "    state: ${13|present,absent,mounted,unmounted|}",
            "    vg: ${14:string}",
            "$0"
        ],
        "description": "Configure LVM and NFS file systems for AIX",
        "scope": "ansible"
    },
    "Manages the inittab on AIX": {
        "prefix": [
            "community.general.aix_inittab",
            "aix_inittab Manages the inittab on AIX"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.aix_inittab:",
            "    action: ${2|boot,bootwait,hold,initdefault,off,once,ondemand,powerfail,powerwait,respawn,sysinit,wait|}",
            "    command: ${3:string}",
            "    insertafter: ${4:string}",
            "    name: ${5:string}",
            "    runlevel: ${6:string}",
            "    state: ${7|present,absent|}",
            "$0"
        ],
        "description": "Manages the inittab on AIX",
        "scope": "ansible"
    },
    "Manage LVM volume groups on AIX": {
        "prefix": [
            "community.general.aix_lvg",
            "aix_lvg Manage LVM volume groups on AIX"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.aix_lvg:",
            "    force: ${2|false,true|}",
            "    pp_size: ${3:int}",
            "    pvs:",
            "      - ${4:element}",
            "    state: ${5|present,absent,varyoff,varyon|}",
            "    vg: ${6:string}",
            "    vg_type: ${7|normal,big,scalable|}",
            "$0"
        ],
        "description": "Manage LVM volume groups on AIX",
        "scope": "ansible"
    },
    "Configure AIX LVM logical volumes": {
        "prefix": [
            "community.general.aix_lvol",
            "aix_lvol Configure AIX LVM logical volumes"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.aix_lvol:",
            "    copies: ${2:1}",
            "    lv: ${3:string}",
            "    lv_type: ${4:jfs2}",
            "    opts: ${5:}",
            "    policy: ${6|maximum,minimum|}",
            "    pvs:",
            "      - ${7:element}",
            "    size: ${8:string}",
            "    state: ${9|present,absent|}",
            "    vg: ${10:string}",
            "$0"
        ],
        "description": "Configure AIX LVM logical volumes",
        "scope": "ansible"
    },
    "Manage customers in Alerta": {
        "prefix": [
            "community.general.alerta_customer",
            "alerta_customer Manage customers in Alerta"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.alerta_customer:",
            "    alerta_url: ${2:string}",
            "    api_key: ${3:string}",
            "    api_password: ${4:string}",
            "    api_username: ${5:string}",
            "    customer: ${6:string}",
            "    match: ${7:string}",
            "    state: ${8|present,absent|}",
            "$0"
        ],
        "description": "Manage customers in Alerta",
        "scope": "ansible"
    },
    "Create, Start, Stop, Restart or Terminate an Instance in ECS; Add or Remove Instance to/from a Security Group": {
        "prefix": [
            "community.general.ali_instance",
            "ali_instance Create, Start, Stop, Restart or Terminate an Instance in ECS; Add or Remove Instance to/from a Security Group"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ali_instance:",
            "    alicloud_access_key: ${2:string}",
            "    alicloud_assume_role_arn: ${4:string}",
            "    alicloud_assume_role_session_expiration: ${5:int}",
            "    alicloud_assume_role_session_name: ${6:string}",
            "    alicloud_region: ${7:string}",
            "    alicloud_secret_key: ${8:string}",
            "    alicloud_security_token: ${9:string}",
            "    allocate_public_ip: ${10|false,true|}",
            "    auto_renew: ${11|false,true|}",
            "    auto_renew_period: ${12|1,2,3,6,12|}",
            "    availability_zone: ${13:string}",
            "    count: ${14:1}",
            "    count_tag: ${15:string}",
            "    description: ${16:string}",
            "    dry_run: ${17|false,true|}",
            "    ecs_role_name: ${18:string}",
            "    force: ${19|false,true|}",
            "    host_name: ${20:string}",
            "    image_id: ${21:string}",
            "    include_data_disks: ${22|true,false|}",
            "    instance_charge_type: ${23|PostPaid,PrePaid|}",
            "    instance_ids:",
            "      - ${24:element}",
            "    instance_name: ${25:string}",
            "    instance_type: ${26:string}",
            "    internet_charge_type: ${27|PayByBandwidth,PayByTraffic|}",
            "    key_name: ${28:string}",
            "    max_bandwidth_in: ${29:200}",
            "    max_bandwidth_out: ${30:0}",
            "    password: ${31:string}",
            "    period: ${32:1}",
            "    period_unit: ${33|Month,Week|}",
            "    profile: ${34:string}",
            "    purge_tags: ${35|false,true|}",
            "    ram_role_name: ${36:string}",
            "    security_groups:",
            "      - ${37:element}",
            "    shared_credentials_file: ${38:string}",
            "    spot_strategy: ${40|NoSpot,SpotWithPriceLimit,SpotAsPriceGo|}",
            "    state: ${41|present,running,stopped,restarted,absent|}",
            "    system_disk_category: ${42|cloud_efficiency,cloud_ssd|}",
            "    system_disk_description: ${43:string}",
            "    system_disk_name: ${44:string}",
            "    system_disk_size: ${45:40}",
            "    unique_suffix: ${47|false,true|}",
            "    user_data: ${48:string}",
            "    vswitch_id: ${49:string}",
            "$0"
        ],
        "description": "Create, Start, Stop, Restart or Terminate an Instance in ECS; Add or Remove Instance to/from a Security Group",
        "scope": "ansible"
    },
    "Gather information on instances of Alibaba Cloud ECS": {
        "prefix": [
            "community.general.ali_instance_info",
            "ali_instance_info Gather information on instances of Alibaba Cloud ECS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ali_instance_info:",
            "    alicloud_access_key: ${2:string}",
            "    alicloud_assume_role_arn: ${4:string}",
            "    alicloud_assume_role_session_expiration: ${5:int}",
            "    alicloud_assume_role_session_name: ${6:string}",
            "    alicloud_region: ${7:string}",
            "    alicloud_secret_key: ${8:string}",
            "    alicloud_security_token: ${9:string}",
            "    ecs_role_name: ${10:string}",
            "    name_prefix: ${12:string}",
            "    profile: ${13:string}",
            "    shared_credentials_file: ${14:string}",
            "$0"
        ],
        "description": "Gather information on instances of Alibaba Cloud ECS",
        "scope": "ansible"
    },
    "Manages alternative programs for common commands": {
        "prefix": [
            "community.general.alternatives",
            "alternatives Manages alternative programs for common commands"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.alternatives:",
            "    link: ${2:/tmp/test}",
            "    name: ${3:string}",
            "    path: ${4:/tmp/test}",
            "    priority: ${5:int}",
            "    state: ${6|selected,present,auto,absent|}",
            "    subcommands:",
            "      - ${7:element}",
            "$0"
        ],
        "description": "Manages alternative programs for common commands",
        "scope": "ansible"
    },
    "Install Ansible roles or collections using ansible-galaxy": {
        "prefix": [
            "community.general.ansible_galaxy_install",
            "ansible_galaxy_install Install Ansible roles or collections using ansible-galaxy"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ansible_galaxy_install:",
            "    ack_ansible29: ${2|false,true|}",
            "    ack_min_ansiblecore211: ${3|false,true|}",
            "    dest: ${4:/tmp/test}",
            "    force: ${5|false,true|}",
            "    name: ${6:string}",
            "    no_deps: ${7|false,true|}",
            "    requirements_file: ${8:/tmp/test}",
            "    type: ${9|collection,role,both|}",
            "$0"
        ],
        "description": "Install Ansible roles or collections using ansible-galaxy",
        "scope": "ansible"
    },
    "Set and/or get members' attributes of an Apache httpd 2.4 mod_proxy balancer pool": {
        "prefix": [
            "community.general.apache2_mod_proxy",
            "apache2_mod_proxy Set and/or get members' attributes of an Apache httpd 2.4 mod_proxy balancer pool"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.apache2_mod_proxy:",
            "    balancer_url_suffix: ${2:/balancer-manager/}",
            "    balancer_vhost: ${3:string}",
            "    member_host: ${4:string}",
            "    state: ${5:string}",
            "    tls: ${6|false,true|}",
            "    validate_certs: ${7|true,false|}",
            "$0"
        ],
        "description": "Set and/or get members' attributes of an Apache httpd 2.4 mod_proxy balancer pool",
        "scope": "ansible"
    },
    "Enables/disables a module of the Apache2 webserver": {
        "prefix": [
            "community.general.apache2_module",
            "apache2_module Enables/disables a module of the Apache2 webserver"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.apache2_module:",
            "    force: ${2|false,true|}",
            "    identifier: ${3:string}",
            "    ignore_configcheck: ${4|false,true|}",
            "    name: ${5:string}",
            "    state: ${6|present,absent|}",
            "    warn_mpm_absent: ${7|true,false|}",
            "$0"
        ],
        "description": "Enables/disables a module of the Apache2 webserver",
        "scope": "ansible"
    },
    "Manages apk packages": {
        "prefix": [
            "community.general.apk",
            "apk Manages apk packages"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.apk:",
            "    available: ${2|false,true|}",
            "    name:",
            "      - ${3:element}",
            "    no_cache: ${4|false,true|}",
            "    repository:",
            "      - ${5:element}",
            "    state: ${6|present,absent,latest,installed,removed|}",
            "    update_cache: ${7|false,true|}",
            "    upgrade: ${8|false,true|}",
            "    world: ${9:/etc/apk/world}",
            "$0"
        ],
        "description": "Manages apk packages",
        "scope": "ansible"
    },
    "Manage APT repositories via apt-repo": {
        "prefix": [
            "community.general.apt_repo",
            "apt_repo Manage APT repositories via apt-repo"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.apt_repo:",
            "    remove_others: ${2|false,true|}",
            "    repo: ${3:string}",
            "    state: ${4|present,absent|}",
            "    update: ${5|false,true|}",
            "$0"
        ],
        "description": "Manage APT repositories via apt-repo",
        "scope": "ansible"
    },
    "APT-RPM package manager": {
        "prefix": [
            "community.general.apt_rpm",
            "apt_rpm APT-RPM package manager"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.apt_rpm:",
            "    clean: ${2|false,true|}",
            "    dist_upgrade: ${3|false,true|}",
            "    package:",
            "      - ${4:element}",
            "    state: ${5|present,absent,installed,removed|}",
            "    update_cache: ${6|false,true|}",
            "    update_kernel: ${7|false,true|}",
            "$0"
        ],
        "description": "APT-RPM package manager",
        "scope": "ansible"
    },
    "Creates a compressed archive of one or more files or trees": {
        "prefix": [
            "community.general.archive",
            "archive Creates a compressed archive of one or more files or trees"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.archive:",
            "    attributes: ${2:string}",
            "    dest: ${3:/tmp/test}",
            "    exclude_path:",
            "      - ${4:element}",
            "    exclusion_patterns:",
            "      - ${5:element}",
            "    force_archive: ${6|false,true|}",
            "    format: ${7|gz,bz2,tar,xz,zip|}",
            "    group: ${8:string}",
            "    mode: ${9|\"0755\",\"0750\",\"0700\",\"0644\",\"0640\",\"0600\"|}",
            "    owner: ${10:string}",
            "    path:",
            "      - ${11:element}",
            "    remove: ${12|false,true|}",
            "    selevel: ${13:string}",
            "    serole: ${14:string}",
            "    setype: ${15:string}",
            "    seuser: ${16:string}",
            "    unsafe_writes: ${17|false,true|}",
            "$0"
        ],
        "description": "Creates a compressed archive of one or more files or trees",
        "scope": "ansible"
    },
    "Manage the containers on the atomic host platform": {
        "prefix": [
            "community.general.atomic_container",
            "atomic_container Manage the containers on the atomic host platform"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.atomic_container:",
            "    backend: ${2|docker,ostree|}",
            "    image: ${3:string}",
            "    mode: ${4|user,system|}",
            "    name: ${5:string}",
            "    rootfs: ${6:string}",
            "    state: ${7|latest,absent,present,rollback|}",
            "    values:",
            "      - ${8:element}",
            "$0"
        ],
        "description": "Manage the containers on the atomic host platform",
        "scope": "ansible"
    },
    "Manage the atomic host platform": {
        "prefix": [
            "community.general.atomic_host",
            "atomic_host Manage the atomic host platform"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.atomic_host:",
            "    revision: ${2:latest}",
            "$0"
        ],
        "description": "Manage the atomic host platform",
        "scope": "ansible"
    },
    "Manage the container images on the atomic host platform": {
        "prefix": [
            "community.general.atomic_image",
            "atomic_image Manage the container images on the atomic host platform"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.atomic_image:",
            "    backend: ${2|docker,ostree|}",
            "    name: ${3:string}",
            "    started: ${4|true,false|}",
            "    state: ${5|latest,absent,present|}",
            "$0"
        ],
        "description": "Manage the container images on the atomic host platform",
        "scope": "ansible"
    },
    "Manage awall policies": {
        "prefix": [
            "community.general.awall",
            "awall Manage awall policies"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.awall:",
            "    activate: ${2|false,true|}",
            "    name:",
            "      - ${3:element}",
            "    state: ${4|enabled,disabled|}",
            "$0"
        ],
        "description": "Manage awall policies",
        "scope": "ansible"
    },
    "Manage ZFS boot environments on FreeBSD/Solaris/illumos systems": {
        "prefix": [
            "community.general.beadm",
            "beadm Manage ZFS boot environments on FreeBSD/Solaris/illumos systems"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.beadm:",
            "    description: ${2:string}",
            "    force: ${3|false,true|}",
            "    mountpoint: ${4:/tmp/test}",
            "    name: ${5:string}",
            "    options: ${6:string}",
            "    snapshot: ${7:string}",
            "    state: ${8|present,absent,activated,mounted,unmounted|}",
            "$0"
        ],
        "description": "Manage ZFS boot environments on FreeBSD/Solaris/illumos systems",
        "scope": "ansible"
    },
    "Send BearyChat notifications": {
        "prefix": [
            "community.general.bearychat",
            "bearychat Send BearyChat notifications"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.bearychat:",
            "    attachments:",
            "      - ${2:element}",
            "    channel: ${3:string}",
            "    markdown: ${4|true,false|}",
            "    text: ${5:string}",
            "    url: ${6:string}",
            "$0"
        ],
        "description": "Send BearyChat notifications",
        "scope": "ansible"
    },
    "Notify BigPanda about deployments": {
        "prefix": [
            "community.general.bigpanda",
            "bigpanda Notify BigPanda about deployments"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.bigpanda:",
            "    component: ${2:string}",
            "    deployment_message: ${3:string}",
            "    description: ${4:string}",
            "    env: ${5:string}",
            "    hosts: ${6:string}",
            "    owner: ${7:string}",
            "    source_system: ${8:ansible}",
            "    state: ${9|started,finished,failed|}",
            "    token: ${10:string}",
            "    url: ${11:https://api.bigpanda.io}",
            "    validate_certs: ${12|true,false|}",
            "    version: ${13:string}",
            "$0"
        ],
        "description": "Notify BigPanda about deployments",
        "scope": "ansible"
    },
    "Manages Bitbucket repository access keys": {
        "prefix": [
            "community.general.bitbucket_access_key",
            "bitbucket_access_key Manages Bitbucket repository access keys"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.bitbucket_access_key:",
            "    client_id: ${2:string}",
            "    client_secret: ${3:string}",
            "    key: ${4:string}",
            "    label: ${5:string}",
            "    password: ${6:string}",
            "    repository: ${7:string}",
            "    state: ${8|absent,present|}",
            "    user: ${9:string}",
            "    workspace: ${10:string}",
            "$0"
        ],
        "description": "Manages Bitbucket repository access keys",
        "scope": "ansible"
    },
    "Manages Bitbucket pipeline SSH key pair": {
        "prefix": [
            "community.general.bitbucket_pipeline_key_pair",
            "bitbucket_pipeline_key_pair Manages Bitbucket pipeline SSH key pair"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.bitbucket_pipeline_key_pair:",
            "    client_id: ${2:string}",
            "    client_secret: ${3:string}",
            "    password: ${4:string}",
            "    private_key: ${5:string}",
            "    public_key: ${6:string}",
            "    repository: ${7:string}",
            "    state: ${8|absent,present|}",
            "    user: ${9:string}",
            "    workspace: ${10:string}",
            "$0"
        ],
        "description": "Manages Bitbucket pipeline SSH key pair",
        "scope": "ansible"
    },
    "Manages Bitbucket pipeline known hosts": {
        "prefix": [
            "community.general.bitbucket_pipeline_known_host",
            "bitbucket_pipeline_known_host Manages Bitbucket pipeline known hosts"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.bitbucket_pipeline_known_host:",
            "    client_id: ${2:string}",
            "    client_secret: ${3:string}",
            "    key: ${4:string}",
            "    name: ${5:string}",
            "    password: ${6:string}",
            "    repository: ${7:string}",
            "    state: ${8|absent,present|}",
            "    user: ${9:string}",
            "    workspace: ${10:string}",
            "$0"
        ],
        "description": "Manages Bitbucket pipeline known hosts",
        "scope": "ansible"
    },
    "Manages Bitbucket pipeline variables": {
        "prefix": [
            "community.general.bitbucket_pipeline_variable",
            "bitbucket_pipeline_variable Manages Bitbucket pipeline variables"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.bitbucket_pipeline_variable:",
            "    client_id: ${2:string}",
            "    client_secret: ${3:string}",
            "    name: ${4:string}",
            "    password: ${5:string}",
            "    repository: ${6:string}",
            "    secured: ${7|false,true|}",
            "    state: ${8|absent,present|}",
            "    user: ${9:string}",
            "    value: ${10:string}",
            "    workspace: ${11:string}",
            "$0"
        ],
        "description": "Manages Bitbucket pipeline variables",
        "scope": "ansible"
    },
    "Manage bower packages with bower": {
        "prefix": [
            "community.general.bower",
            "bower Manage bower packages with bower"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.bower:",
            "    name: ${2:string}",
            "    offline: ${3|false,true|}",
            "    path: ${4:/tmp/test}",
            "    production: ${5|false,true|}",
            "    relative_execpath: ${6:/tmp/test}",
            "    state: ${7|present,absent,latest|}",
            "    version: ${8:string}",
            "$0"
        ],
        "description": "Manage bower packages with bower",
        "scope": "ansible"
    },
    "Manage Ruby Gem dependencies with Bundler": {
        "prefix": [
            "community.general.bundler",
            "bundler Manage Ruby Gem dependencies with Bundler"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.bundler:",
            "    binstub_directory: ${2:/tmp/test}",
            "    chdir: ${3:/tmp/test}",
            "    clean: ${4|false,true|}",
            "    deployment_mode: ${5|false,true|}",
            "    exclude_groups:",
            "      - ${6:element}",
            "    executable: ${7:string}",
            "    extra_args: ${8:string}",
            "    gem_path: ${9:/tmp/test}",
            "    gemfile: ${10:/tmp/test}",
            "    local: ${11|false,true|}",
            "    state: ${12|present,latest|}",
            "    user_install: ${13|true,false|}",
            "$0"
        ],
        "description": "Manage Ruby Gem dependencies with Bundler",
        "scope": "ansible"
    },
    "Deploy software (or files) from bzr branches": {
        "prefix": [
            "community.general.bzr",
            "bzr Deploy software (or files) from bzr branches"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.bzr:",
            "    dest: ${2:/tmp/test}",
            "    executable: ${3:string}",
            "    force: ${4|false,true|}",
            "    name: ${5:string}",
            "    version: ${6:head}",
            "$0"
        ],
        "description": "Deploy software (or files) from bzr branches",
        "scope": "ansible"
    },
    "Send a message to Campfire": {
        "prefix": [
            "community.general.campfire",
            "campfire Send a message to Campfire"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.campfire:",
            "    msg: ${2:string}",
            "    notify: ${3|56k,bell,bezos,bueller,clowntown,cottoneyejoe,crickets,dadgummit,dangerzone,danielsan,deeper,drama,greatjob,greyjoy,guarantee,heygirl,horn,horror,inconceivable,live,loggins,makeitso,noooo,nyan,ohmy,ohyeah,pushit,rimshot,rollout,rumble,sax,secret,sexyback,story,tada,tmyk,trololo,trombone,unix,vuvuzela,what,whoomp,yeah,yodel|}",
            "    room: ${4:string}",
            "    subscription: ${5:string}",
            "    token: ${6:string}",
            "$0"
        ],
        "description": "Send a message to Campfire",
        "scope": "ansible"
    },
    "Manage Linux capabilities": {
        "prefix": [
            "community.general.capabilities",
            "capabilities Manage Linux capabilities"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.capabilities:",
            "    capability: ${2:string}",
            "    path: ${3:string}",
            "    state: ${4|present,absent|}",
            "$0"
        ],
        "description": "Manage Linux capabilities",
        "scope": "ansible"
    },
    "Manage Rust packages with cargo": {
        "prefix": [
            "community.general.cargo",
            "cargo Manage Rust packages with cargo"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.cargo:",
            "    name:",
            "      - ${2:element}",
            "    path: ${3:/tmp/test}",
            "    state: ${4|present,absent,latest|}",
            "    version: ${5:string}",
            "$0"
        ],
        "description": "Manage Rust packages with cargo",
        "scope": "ansible"
    },
    "Send a sms / mms using the catapult bandwidth api": {
        "prefix": [
            "community.general.catapult",
            "catapult Send a sms / mms using the catapult bandwidth api"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.catapult:",
            "    api_secret: ${2:string}",
            "    api_token: ${3:string}",
            "    dest:",
            "      - ${4:element}",
            "    media: ${5:string}",
            "    msg: ${6:string}",
            "    src: ${7:string}",
            "    user_id: ${8:string}",
            "$0"
        ],
        "description": "Send a sms / mms using the catapult bandwidth api",
        "scope": "ansible"
    },
    "Create an annotation in circonus": {
        "prefix": [
            "community.general.circonus_annotation",
            "circonus_annotation Create an annotation in circonus"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.circonus_annotation:",
            "    api_key: ${2:string}",
            "    category: ${3:string}",
            "    description: ${4:string}",
            "    duration: ${5:0}",
            "    start: ${6:int}",
            "    stop: ${7:int}",
            "    title: ${8:string}",
            "$0"
        ],
        "description": "Create an annotation in circonus",
        "scope": "ansible"
    },
    "Send a message to a Cisco Webex Teams Room or Individual": {
        "prefix": [
            "community.general.cisco_webex",
            "cisco_webex Send a message to a Cisco Webex Teams Room or Individual"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.cisco_webex:",
            "    msg: ${2:string}",
            "    msg_type: ${3|text,markdown|}",
            "    personal_token: ${4:string}",
            "    recipient_id: ${5:string}",
            "    recipient_type: ${6|roomId,toPersonEmail,toPersonId|}",
            "$0"
        ],
        "description": "Send a message to a Cisco Webex Teams Room or Individual",
        "scope": "ansible"
    },
    "Create or Delete Anti Affinity Policies at CenturyLink Cloud": {
        "prefix": [
            "community.general.clc_aa_policy",
            "clc_aa_policy Create or Delete Anti Affinity Policies at CenturyLink Cloud"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.clc_aa_policy:",
            "    location: ${2:string}",
            "    name: ${3:string}",
            "    state: ${4|present,absent|}",
            "$0"
        ],
        "description": "Create or Delete Anti Affinity Policies at CenturyLink Cloud",
        "scope": "ansible"
    },
    "Create or Delete Alert Policies at CenturyLink Cloud": {
        "prefix": [
            "community.general.clc_alert_policy",
            "clc_alert_policy Create or Delete Alert Policies at CenturyLink Cloud"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.clc_alert_policy:",
            "    alert_recipients:",
            "      - ${2:element}",
            "    alias: ${3:string}",
            "    duration: ${4:string}",
            "    id: ${5:string}",
            "    metric: ${6|cpu,memory,disk|}",
            "    name: ${7:string}",
            "    state: ${8|present,absent|}",
            "    threshold: ${9:int}",
            "$0"
        ],
        "description": "Create or Delete Alert Policies at CenturyLink Cloud",
        "scope": "ansible"
    },
    "Deploys a blue print package on a set of servers in CenturyLink Cloud": {
        "prefix": [
            "community.general.clc_blueprint_package",
            "clc_blueprint_package Deploys a blue print package on a set of servers in CenturyLink Cloud"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.clc_blueprint_package:",
            "    package_id: ${2:string}",
            "    server_ids:",
            "      - ${4:element}",
            "    state: ${5|present|}",
            "    wait: ${6:True}",
            "$0"
        ],
        "description": "Deploys a blue print package on a set of servers in CenturyLink Cloud",
        "scope": "ansible"
    },
    "Create/delete/update firewall policies": {
        "prefix": [
            "community.general.clc_firewall_policy",
            "clc_firewall_policy Create/delete/update firewall policies"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.clc_firewall_policy:",
            "    destination:",
            "      - ${2:element}",
            "    destination_account_alias: ${3:string}",
            "    enabled: ${4|True,False|}",
            "    firewall_policy_id: ${5:string}",
            "    location: ${6:string}",
            "    ports:",
            "      - ${7:element}",
            "    source:",
            "      - ${8:element}",
            "    source_account_alias: ${9:string}",
            "    state: ${10|present,absent|}",
            "    wait: ${11:True}",
            "$0"
        ],
        "description": "Create/delete/update firewall policies",
        "scope": "ansible"
    },
    "Create/delete Server Groups at Centurylink Cloud": {
        "prefix": [
            "community.general.clc_group",
            "clc_group Create/delete Server Groups at Centurylink Cloud"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.clc_group:",
            "    description: ${2:string}",
            "    location: ${3:string}",
            "    name: ${4:string}",
            "    parent: ${5:string}",
            "    state: ${6|present,absent|}",
            "    wait: ${7|true,false|}",
            "$0"
        ],
        "description": "Create/delete Server Groups at Centurylink Cloud",
        "scope": "ansible"
    },
    "Create, Delete shared loadbalancers in CenturyLink Cloud": {
        "prefix": [
            "community.general.clc_loadbalancer",
            "clc_loadbalancer Create, Delete shared loadbalancers in CenturyLink Cloud"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.clc_loadbalancer:",
            "    alias: ${2:string}",
            "    description: ${3:string}",
            "    location: ${4:string}",
            "    method: ${5|leastConnection,roundRobin|}",
            "    name: ${6:string}",
            "    nodes:",
            "      - ${7:element}",
            "    persistence: ${8|standard,sticky|}",
            "    port: ${9|80,443|}",
            "    state: ${10|present,absent,port_absent,nodes_present,nodes_absent|}",
            "    status: ${11|enabled,disabled|}",
            "$0"
        ],
        "description": "Create, Delete shared loadbalancers in CenturyLink Cloud",
        "scope": "ansible"
    },
    "Modify servers in CenturyLink Cloud": {
        "prefix": [
            "community.general.clc_modify_server",
            "clc_modify_server Modify servers in CenturyLink Cloud"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.clc_modify_server:",
            "    alert_policy_id: ${2:string}",
            "    alert_policy_name: ${3:string}",
            "    anti_affinity_policy_id: ${4:string}",
            "    anti_affinity_policy_name: ${5:string}",
            "    cpu: ${6:string}",
            "    memory: ${7:string}",
            "    server_ids:",
            "      - ${8:element}",
            "    state: ${9|present,absent|}",
            "    wait: ${10|true,false|}",
            "$0"
        ],
        "description": "Modify servers in CenturyLink Cloud",
        "scope": "ansible"
    },
    "Add and Delete public ips on servers in CenturyLink Cloud": {
        "prefix": [
            "community.general.clc_publicip",
            "clc_publicip Add and Delete public ips on servers in CenturyLink Cloud"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.clc_publicip:",
            "    ports:",
            "      - ${2:element}",
            "    protocol: ${3|TCP,UDP,ICMP|}",
            "    server_ids:",
            "      - ${4:element}",
            "    state: ${5|present,absent|}",
            "    wait: ${6|true,false|}",
            "$0"
        ],
        "description": "Add and Delete public ips on servers in CenturyLink Cloud",
        "scope": "ansible"
    },
    "Create, Delete, Start and Stop servers in CenturyLink Cloud": {
        "prefix": [
            "community.general.clc_server",
            "clc_server Create, Delete, Start and Stop servers in CenturyLink Cloud"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.clc_server:",
            "    add_public_ip: ${2|false,true|}",
            "    additional_disks:",
            "      - ${3:element}",
            "    alert_policy_id: ${4:string}",
            "    alert_policy_name: ${5:string}",
            "    alias: ${6:string}",
            "    anti_affinity_policy_id: ${7:string}",
            "    anti_affinity_policy_name: ${8:string}",
            "    configuration_id: ${9:string}",
            "    count: ${10:1}",
            "    count_group: ${11:string}",
            "    cpu: ${12:1}",
            "    cpu_autoscale_policy_id: ${13:string}",
            "    custom_fields:",
            "      - ${14:element}",
            "    description: ${15:string}",
            "    exact_count: ${16:int}",
            "    group: ${17:Default Group}",
            "    ip_address: ${18:string}",
            "    location: ${19:string}",
            "    managed_os: ${20|false,true|}",
            "    memory: ${21:1}",
            "    name: ${22:string}",
            "    network_id: ${23:string}",
            "    os_type: ${24|redHat6_64Bit,centOS6_64Bit,windows2012R2Standard_64Bit,ubuntu14_64Bit|}",
            "    packages:",
            "      - ${25:element}",
            "    password: ${26:string}",
            "    primary_dns: ${27:string}",
            "    public_ip_ports:",
            "      - ${28:element}",
            "    public_ip_protocol: ${29|TCP,UDP,ICMP|}",
            "    secondary_dns: ${30:string}",
            "    server_ids:",
            "      - ${31:element}",
            "    source_server_password: ${32:string}",
            "    state: ${33|present,absent,started,stopped|}",
            "    storage_type: ${34|standard,hyperscale|}",
            "    template: ${35:string}",
            "    ttl: ${36:string}",
            "    type: ${37|standard,hyperscale,bareMetal|}",
            "    wait: ${38|true,false|}",
            "$0"
        ],
        "description": "Create, Delete, Start and Stop servers in CenturyLink Cloud",
        "scope": "ansible"
    },
    "Create, Delete and Restore server snapshots in CenturyLink Cloud": {
        "prefix": [
            "community.general.clc_server_snapshot",
            "clc_server_snapshot Create, Delete and Restore server snapshots in CenturyLink Cloud"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.clc_server_snapshot:",
            "    expiration_days: ${2:7}",
            "    server_ids:",
            "      - ${3:element}",
            "    state: ${4|present,absent,restore|}",
            "    wait: ${5:True}",
            "$0"
        ],
        "description": "Create, Delete and Restore server snapshots in CenturyLink Cloud",
        "scope": "ansible"
    },
    "Retrieve facts of cloud-init": {
        "prefix": [
            "community.general.cloud_init_data_facts",
            "cloud_init_data_facts Retrieve facts of cloud-init"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.cloud_init_data_facts:",
            "    filter: ${2|status,result|}",
            "$0"
        ],
        "description": "Retrieve facts of cloud-init",
        "scope": "ansible"
    },
    "Manage Cloudflare DNS records": {
        "prefix": [
            "community.general.cloudflare_dns",
            "cloudflare_dns Manage Cloudflare DNS records"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.cloudflare_dns:",
            "    account_api_key: ${2:string}",
            "    account_email: ${3:string}",
            "    algorithm: ${4:int}",
            "    api_token: ${5:string}",
            "    cert_usage: ${6|0,1,2,3|}",
            "    hash_type: ${7|1,2|}",
            "    key_tag: ${8:int}",
            "    port: ${9:int}",
            "    priority: ${10:1}",
            "    proto: ${11:string}",
            "    proxied: ${12|false,true|}",
            "    record: ${13:@}",
            "    selector: ${14|0,1|}",
            "    service: ${15:string}",
            "    solo: ${16|false,true|}",
            "    state: ${17|present,absent|}",
            "    timeout: ${18:30}",
            "    ttl: ${19:1}",
            "    type: ${20|A,AAAA,CNAME,DS,MX,NS,SPF,SRV,SSHFP,TLSA,TXT|}",
            "    value: ${21:string}",
            "    weight: ${22:1}",
            "    zone: ${23:string}",
            "$0"
        ],
        "description": "Manage Cloudflare DNS records",
        "scope": "ansible"
    },
    "Sync Cobbler": {
        "prefix": [
            "community.general.cobbler_sync",
            "cobbler_sync Sync Cobbler"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.cobbler_sync:",
            "    host: ${2:127.0.0.1}",
            "    password: ${3:string}",
            "    port: ${4:int}",
            "    use_ssl: ${5|true,false|}",
            "    username: ${6:cobbler}",
            "    validate_certs: ${7|true,false|}",
            "$0"
        ],
        "description": "Sync Cobbler",
        "scope": "ansible"
    },
    "Manage system objects in Cobbler": {
        "prefix": [
            "community.general.cobbler_system",
            "cobbler_system Manage system objects in Cobbler"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.cobbler_system:",
            "    host: ${2:127.0.0.1}",
            "    name: ${4:string}",
            "    password: ${5:string}",
            "    port: ${6:int}",
            "    state: ${8|present,absent,query|}",
            "    sync: ${9|false,true|}",
            "    use_ssl: ${10|true,false|}",
            "    username: ${11:cobbler}",
            "    validate_certs: ${12|true,false|}",
            "$0"
        ],
        "description": "Manage system objects in Cobbler",
        "scope": "ansible"
    },
    "Dependency Manager for PHP": {
        "prefix": [
            "community.general.composer",
            "composer Dependency Manager for PHP"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.composer:",
            "    apcu_autoloader: ${2|false,true|}",
            "    arguments: ${3:}",
            "    classmap_authoritative: ${4|false,true|}",
            "    command: ${5:install}",
            "    composer_executable: ${6:/tmp/test}",
            "    executable: ${7:/tmp/test}",
            "    global_command: ${8|false,true|}",
            "    ignore_platform_reqs: ${9|false,true|}",
            "    no_dev: ${10|true,false|}",
            "    no_plugins: ${11|false,true|}",
            "    no_scripts: ${12|false,true|}",
            "    optimize_autoloader: ${13|true,false|}",
            "    prefer_dist: ${14|false,true|}",
            "    prefer_source: ${15|false,true|}",
            "    working_dir: ${16:/tmp/test}",
            "$0"
        ],
        "description": "Dependency Manager for PHP",
        "scope": "ansible"
    },
    "Add, modify & delete services within a consul cluster": {
        "prefix": [
            "community.general.consul",
            "consul Add, modify & delete services within a consul cluster"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.consul:",
            "    ack_params_state_absent: ${2|false,true|}",
            "    check_id: ${3:string}",
            "    check_name: ${4:string}",
            "    host: ${5:localhost}",
            "    http: ${6:string}",
            "    interval: ${7:string}",
            "    notes: ${8:string}",
            "    port: ${9:8500}",
            "    scheme: ${10:http}",
            "    script: ${11:string}",
            "    service_address: ${12:string}",
            "    service_id: ${13:string}",
            "    service_name: ${14:string}",
            "    service_port: ${15:int}",
            "    state: ${16|present,absent|}",
            "    tags:",
            "      - ${17:element}",
            "    tcp: ${18:string}",
            "    timeout: ${19:string}",
            "    token: ${20:string}",
            "    ttl: ${21:string}",
            "    validate_certs: ${22|true,false|}",
            "$0"
        ],
        "description": "Add, modify & delete services within a consul cluster",
        "scope": "ansible"
    },
    "Manipulate Consul ACL keys and rules": {
        "prefix": [
            "community.general.consul_acl",
            "consul_acl Manipulate Consul ACL keys and rules"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.consul_acl:",
            "    host: ${2:localhost}",
            "    mgmt_token: ${3:string}",
            "    name: ${4:string}",
            "    port: ${5:8500}",
            "    rules:",
            "      - ${6:element}",
            "    scheme: ${7:http}",
            "    state: ${8|present,absent|}",
            "    token: ${9:string}",
            "    token_type: ${10|client,management|}",
            "    validate_certs: ${11|true,false|}",
            "$0"
        ],
        "description": "Manipulate Consul ACL keys and rules",
        "scope": "ansible"
    },
    "Manipulate entries in the key/value store of a consul cluster": {
        "prefix": [
            "community.general.consul_kv",
            "consul_kv Manipulate entries in the key/value store of a consul cluster"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.consul_kv:",
            "    cas: ${2:string}",
            "    flags: ${3:string}",
            "    host: ${4:localhost}",
            "    key: ${5:string}",
            "    port: ${6:8500}",
            "    recurse: ${7|false,true|}",
            "    retrieve: ${8|true,false|}",
            "    scheme: ${9:http}",
            "    session: ${10:string}",
            "    state: ${11|present,absent,acquire,release|}",
            "    token: ${12:string}",
            "    validate_certs: ${13|true,false|}",
            "    value: ${14:string}",
            "$0"
        ],
        "description": "Manipulate entries in the key/value store of a consul cluster",
        "scope": "ansible"
    },
    "Manipulate consul sessions": {
        "prefix": [
            "community.general.consul_session",
            "consul_session Manipulate consul sessions"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.consul_session:",
            "    behavior: ${2|release,delete|}",
            "    checks:",
            "      - ${3:element}",
            "    datacenter: ${4:string}",
            "    delay: ${5:15}",
            "    host: ${6:localhost}",
            "    id: ${7:string}",
            "    name: ${8:string}",
            "    node: ${9:string}",
            "    port: ${10:8500}",
            "    scheme: ${11:http}",
            "    state: ${12|present,absent,info,list,node|}",
            "    token: ${13:string}",
            "    ttl: ${14:int}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "Manipulate consul sessions",
        "scope": "ansible"
    },
    "Manage one of the Copr repositories": {
        "prefix": [
            "community.general.copr",
            "copr Manage one of the Copr repositories"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.copr:",
            "    chroot: ${2:string}",
            "    host: ${3:copr.fedorainfracloud.org}",
            "    name: ${4:string}",
            "    protocol: ${5:https}",
            "    state: ${6|enabled,absent,disabled|}",
            "$0"
        ],
        "description": "Manage one of the Copr repositories",
        "scope": "ansible"
    },
    "Manages Perl library dependencies": {
        "prefix": [
            "community.general.cpanm",
            "cpanm Manages Perl library dependencies"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.cpanm:",
            "    executable: ${2:/tmp/test}",
            "    from_path: ${3:/tmp/test}",
            "    installdeps: ${4|false,true|}",
            "    locallib: ${5:/tmp/test}",
            "    mirror: ${6:string}",
            "    mirror_only: ${7|false,true|}",
            "    mode: ${8|compatibility,new|}",
            "    name: ${9:string}",
            "    name_check: ${10:string}",
            "    notest: ${11|false,true|}",
            "    version: ${12:string}",
            "$0"
        ],
        "description": "Manages Perl library dependencies",
        "scope": "ansible"
    },
    "Manage variables in crontabs": {
        "prefix": [
            "community.general.cronvar",
            "cronvar Manage variables in crontabs"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.cronvar:",
            "    backup: ${2|false,true|}",
            "    cron_file: ${3:string}",
            "    insertafter: ${4:string}",
            "    insertbefore: ${5:string}",
            "    name: ${6:string}",
            "    state: ${7|present,absent|}",
            "    user: ${8:string}",
            "    value: ${9:string}",
            "$0"
        ],
        "description": "Manage variables in crontabs",
        "scope": "ansible"
    },
    "Encrypted Linux block devices": {
        "prefix": [
            "community.general.crypttab",
            "crypttab Encrypted Linux block devices"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.crypttab:",
            "    backing_device: ${2:string}",
            "    name: ${3:string}",
            "    opts: ${4:string}",
            "    password: ${5:/tmp/test}",
            "    path: ${6:/tmp/test}",
            "    state: ${7|absent,opts_absent,opts_present,present|}",
            "$0"
        ],
        "description": "Encrypted Linux block devices",
        "scope": "ansible"
    },
    "Manages Datadog downtimes": {
        "prefix": [
            "community.general.datadog_downtime",
            "datadog_downtime Manages Datadog downtimes"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.datadog_downtime:",
            "    api_host: ${2:https://api.datadoghq.com}",
            "    api_key: ${3:string}",
            "    app_key: ${4:string}",
            "    downtime_message: ${5:string}",
            "    end: ${6:int}",
            "    id: ${7:int}",
            "    monitor_id: ${8:int}",
            "    monitor_tags:",
            "      - ${9:element}",
            "    rrule: ${10:string}",
            "    scope:",
            "      - ${11:element}",
            "    start: ${12:int}",
            "    state: ${13|present,absent|}",
            "    timezone: ${14:string}",
            "$0"
        ],
        "description": "Manages Datadog downtimes",
        "scope": "ansible"
    },
    "Posts events to Datadog  service": {
        "prefix": [
            "community.general.datadog_event",
            "datadog_event Posts events to Datadog  service"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.datadog_event:",
            "    aggregation_key: ${2:string}",
            "    alert_type: ${3|info,error,warning,success|}",
            "    api_host: ${4:string}",
            "    api_key: ${5:string}",
            "    app_key: ${6:string}",
            "    date_happened: ${7:int}",
            "    host: ${8:string}",
            "    priority: ${9|normal,low|}",
            "    tags:",
            "      - ${10:element}",
            "    text: ${11:string}",
            "    title: ${12:string}",
            "    validate_certs: ${13|true,false|}",
            "$0"
        ],
        "description": "Posts events to Datadog  service",
        "scope": "ansible"
    },
    "Manages Datadog monitors": {
        "prefix": [
            "community.general.datadog_monitor",
            "datadog_monitor Manages Datadog monitors"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.datadog_monitor:",
            "    api_host: ${2:string}",
            "    api_key: ${3:string}",
            "    app_key: ${4:string}",
            "    escalation_message: ${5:string}",
            "    evaluation_delay: ${6:string}",
            "    id: ${7:string}",
            "    include_tags: ${8|true,false|}",
            "    locked: ${9|false,true|}",
            "    name: ${10:string}",
            "    new_host_delay: ${11:string}",
            "    no_data_timeframe: ${12:string}",
            "    notification_message: ${13:string}",
            "    notify_audit: ${14|false,true|}",
            "    notify_no_data: ${15|false,true|}",
            "    priority: ${16:int}",
            "    query: ${17:string}",
            "    renotify_interval: ${18:string}",
            "    require_full_window: ${19|false,true|}",
            "    state: ${21|present,absent,mute,unmute|}",
            "    tags:",
            "      - ${22:element}",
            "    timeout_h: ${24:string}",
            "    type: ${25|metricalert,servicecheck,eventalert,event-v2alert,processalert,logalert,queryalert,trace-analyticsalert,rumalert,composite|}",
            "$0"
        ],
        "description": "Manages Datadog monitors",
        "scope": "ansible"
    },
    "Modify and read dconf database": {
        "prefix": [
            "community.general.dconf",
            "dconf Modify and read dconf database"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.dconf:",
            "    key: ${2:string}",
            "    state: ${3|present,read,absent|}",
            "    value: ${4:string}",
            "$0"
        ],
        "description": "Modify and read dconf database",
        "scope": "ansible"
    },
    "Manages some of the steps common in deploying projects": {
        "prefix": [
            "community.general.deploy_helper",
            "deploy_helper Manages some of the steps common in deploying projects"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.deploy_helper:",
            "    attributes: ${2:string}",
            "    clean: ${3|true,false|}",
            "    current_path: ${4:/tmp/test}",
            "    group: ${5:string}",
            "    keep_releases: ${6:5}",
            "    mode: ${7|\"0755\",\"0750\",\"0700\",\"0644\",\"0640\",\"0600\"|}",
            "    owner: ${8:string}",
            "    path: ${9:/tmp/test}",
            "    release: ${10:string}",
            "    releases_path: ${11:releases}",
            "    selevel: ${12:string}",
            "    serole: ${13:string}",
            "    setype: ${14:string}",
            "    seuser: ${15:string}",
            "    shared_path: ${16:/tmp/test}",
            "    state: ${17|present,finalize,absent,clean,query|}",
            "    unfinished_filename: ${18:DEPLOY_UNFINISHED}",
            "    unsafe_writes: ${19|false,true|}",
            "$0"
        ],
        "description": "Manages some of the steps common in deploying projects",
        "scope": "ansible"
    },
    "Create, update, and delete MCP 1.0 & 2.0 networks": {
        "prefix": [
            "community.general.dimensiondata_network",
            "dimensiondata_network Create, update, and delete MCP 1.0 & 2.0 networks"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.dimensiondata_network:",
            "    description: ${2:string}",
            "    location: ${3:string}",
            "    mcp_password: ${4:string}",
            "    mcp_user: ${5:string}",
            "    name: ${6:string}",
            "    region: ${7:na}",
            "    service_plan: ${8|ESSENTIALS,ADVANCED|}",
            "    state: ${9|present,absent|}",
            "    validate_certs: ${10|true,false|}",
            "    wait: ${11|false,true|}",
            "    wait_poll_interval: ${12:2}",
            "    wait_time: ${13:600}",
            "$0"
        ],
        "description": "Create, update, and delete MCP 1.0 & 2.0 networks",
        "scope": "ansible"
    },
    "Manage a VLAN in a Cloud Control network domain": {
        "prefix": [
            "community.general.dimensiondata_vlan",
            "dimensiondata_vlan Manage a VLAN in a Cloud Control network domain"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.dimensiondata_vlan:",
            "    allow_expand: ${2|false,true|}",
            "    description: ${3:}",
            "    location: ${4:string}",
            "    mcp_password: ${5:string}",
            "    mcp_user: ${6:string}",
            "    name: ${7:string}",
            "    network_domain: ${8:string}",
            "    private_ipv4_base_address: ${9:}",
            "    private_ipv4_prefix_size: ${10:0}",
            "    region: ${11:na}",
            "    state: ${12|present,absent,readonly|}",
            "    validate_certs: ${13|true,false|}",
            "    wait: ${14|false,true|}",
            "    wait_poll_interval: ${15:2}",
            "    wait_time: ${16:600}",
            "$0"
        ],
        "description": "Manage a VLAN in a Cloud Control network domain",
        "scope": "ansible"
    },
    "Send Discord messages": {
        "prefix": [
            "community.general.discord",
            "discord Send Discord messages"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.discord:",
            "    avatar_url: ${2:string}",
            "    content: ${3:string}",
            "    embeds:",
            "      - ${4:element}",
            "    tts: ${5|false,true|}",
            "    username: ${6:string}",
            "    webhook_id: ${7:string}",
            "    webhook_token: ${8:string}",
            "$0"
        ],
        "description": "Send Discord messages",
        "scope": "ansible"
    },
    "Manages a Django application": {
        "prefix": [
            "community.general.django_manage",
            "django_manage Manages a Django application"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.django_manage:",
            "    ack_venv_creation_deprecation: ${2|false,true|}",
            "    apps: ${3:string}",
            "    cache_table: ${4:string}",
            "    clear: ${5|false,true|}",
            "    command: ${6:string}",
            "    database: ${7:string}",
            "    failfast: ${8|false,true|}",
            "    fixtures: ${9:string}",
            "    link: ${10|false,true|}",
            "    merge: ${11|false,true|}",
            "    project_path: ${12:/tmp/test}",
            "    pythonpath: ${13:/tmp/test}",
            "    settings: ${14:/tmp/test}",
            "    skip: ${15|false,true|}",
            "    testrunner: ${16:string}",
            "    virtualenv: ${17:/tmp/test}",
            "$0"
        ],
        "description": "Manages a Django application",
        "scope": "ansible"
    },
    "Locks package versions in C(dnf) based systems": {
        "prefix": [
            "community.general.dnf_versionlock",
            "dnf_versionlock Locks package versions in C(dnf) based systems"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.dnf_versionlock:",
            "    name:",
            "      - ${2:element}",
            "    raw: ${3|false,true|}",
            "    state: ${4|present,absent,clean,excluded|}",
            "$0"
        ],
        "description": "Locks package versions in C(dnf) based systems",
        "scope": "ansible"
    },
    "Interface with dnsimple.com (a DNS hosting service)": {
        "prefix": [
            "community.general.dnsimple",
            "dnsimple Interface with dnsimple.com (a DNS hosting service)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.dnsimple:",
            "    account_api_token: ${2:string}",
            "    account_email: ${3:string}",
            "    domain: ${4:string}",
            "    priority: ${5:int}",
            "    record: ${6:string}",
            "    record_ids:",
            "      - ${7:element}",
            "    sandbox: ${8|false,true|}",
            "    solo: ${9|false,true|}",
            "    state: ${10|present,absent|}",
            "    ttl: ${11:3600}",
            "    type: ${12|A,ALIAS,CNAME,MX,SPF,URL,TXT,NS,SRV,NAPTR,PTR,AAAA,SSHFP,HINFO,POOL,CAA|}",
            "    value: ${13:string}",
            "$0"
        ],
        "description": "Interface with dnsimple.com (a DNS hosting service)",
        "scope": "ansible"
    },
    "Pull basic info from DNSimple API": {
        "prefix": [
            "community.general.dnsimple_info",
            "dnsimple_info Pull basic info from DNSimple API"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.dnsimple_info:",
            "    account_id: ${2:string}",
            "    api_key: ${3:string}",
            "    name: ${4:string}",
            "    record: ${5:string}",
            "    sandbox: ${6|false,true|}",
            "$0"
        ],
        "description": "Pull basic info from DNSimple API",
        "scope": "ansible"
    },
    "Interface with dnsmadeeasy.com (a DNS hosting service)": {
        "prefix": [
            "community.general.dnsmadeeasy",
            "dnsmadeeasy Interface with dnsmadeeasy.com (a DNS hosting service)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.dnsmadeeasy:",
            "    account_key: ${2:string}",
            "    account_secret: ${3:string}",
            "    autoFailover: ${4|false,true|}",
            "    contactList: ${5:string}",
            "    domain: ${6:string}",
            "    failover: ${7|false,true|}",
            "    httpFile: ${8:string}",
            "    httpFqdn: ${9:string}",
            "    httpQueryString: ${10:string}",
            "    ip1: ${11:string}",
            "    ip2: ${12:string}",
            "    ip3: ${13:string}",
            "    ip4: ${14:string}",
            "    ip5: ${15:string}",
            "    maxEmails: ${16:1}",
            "    monitor: ${17|false,true|}",
            "    port: ${18:80}",
            "    protocol: ${19|HTTP,TCP,UDP,DNS,SMTP,HTTPS|}",
            "    record_name: ${20:string}",
            "    record_ttl: ${21:1800}",
            "    record_type: ${22|A,AAAA,CNAME,ANAME,HTTPRED,MX,NS,PTR,SRV,TXT|}",
            "    record_value: ${23:string}",
            "    sandbox: ${24|false,true|}",
            "    sensitivity: ${25|Medium,Low,High|}",
            "    state: ${26|present,absent|}",
            "    systemDescription: ${27:}",
            "    validate_certs: ${28|true,false|}",
            "$0"
        ],
        "description": "Interface with dnsmadeeasy.com (a DNS hosting service)",
        "scope": "ansible"
    },
    "Override a debian package's version of a file": {
        "prefix": [
            "community.general.dpkg_divert",
            "dpkg_divert Override a debian package's version of a file"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.dpkg_divert:",
            "    divert: ${2:/tmp/test}",
            "    force: ${3|false,true|}",
            "    holder: ${4:string}",
            "    path: ${5:/tmp/test}",
            "    rename: ${6|false,true|}",
            "    state: ${7|present,absent|}",
            "$0"
        ],
        "description": "Override a debian package's version of a file",
        "scope": "ansible"
    },
    "Installs Python libraries": {
        "prefix": [
            "community.general.easy_install",
            "easy_install Installs Python libraries"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.easy_install:",
            "    executable: ${2:easy_install}",
            "    name: ${3:string}",
            "    state: ${4|present,latest|}",
            "    virtualenv: ${5:string}",
            "    virtualenv_command: ${6:virtualenv}",
            "    virtualenv_site_packages: ${7|false,true|}",
            "$0"
        ],
        "description": "Installs Python libraries",
        "scope": "ansible"
    },
    "Manages users for ejabberd servers": {
        "prefix": [
            "community.general.ejabberd_user",
            "ejabberd_user Manages users for ejabberd servers"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ejabberd_user:",
            "    host: ${2:string}",
            "    logging: ${3|false,true|}",
            "    password: ${4:string}",
            "    state: ${5|present,absent|}",
            "    username: ${6:string}",
            "$0"
        ],
        "description": "Manages users for ejabberd servers",
        "scope": "ansible"
    },
    "Manage Elasticsearch plugins": {
        "prefix": [
            "community.general.elasticsearch_plugin",
            "elasticsearch_plugin Manage Elasticsearch plugins"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.elasticsearch_plugin:",
            "    force: ${2|false,true|}",
            "    name: ${3:string}",
            "    plugin_bin: ${4:/tmp/test}",
            "    plugin_dir: ${5:/tmp/test}",
            "    proxy_host: ${6:string}",
            "    proxy_port: ${7:string}",
            "    src: ${8:string}",
            "    state: ${9|present,absent|}",
            "    timeout: ${10:1m}",
            "    url: ${11:string}",
            "    version: ${12:string}",
            "$0"
        ],
        "description": "Manage Elasticsearch plugins",
        "scope": "ansible"
    },
    "Manage storage group member on EMC VNX": {
        "prefix": [
            "community.general.emc_vnx_sg_member",
            "emc_vnx_sg_member Manage storage group member on EMC VNX"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.emc_vnx_sg_member:",
            "    lunid: ${2:int}",
            "    name: ${3:string}",
            "    sp_address: ${4:string}",
            "    sp_password: ${5:sysadmin}",
            "    sp_user: ${6:sysadmin}",
            "    state: ${7|present,absent|}",
            "$0"
        ],
        "description": "Manage storage group member on EMC VNX",
        "scope": "ansible"
    },
    "Set or delete key value pairs from an etcd3 cluster": {
        "prefix": [
            "community.general.etcd3",
            "etcd3 Set or delete key value pairs from an etcd3 cluster"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.etcd3:",
            "    ca_cert: ${2:/tmp/test}",
            "    client_cert: ${3:/tmp/test}",
            "    client_key: ${4:/tmp/test}",
            "    host: ${5:localhost}",
            "    key: ${6:string}",
            "    password: ${7:string}",
            "    port: ${8:2379}",
            "    state: ${9|present,absent|}",
            "    timeout: ${10:int}",
            "    user: ${11:string}",
            "    value: ${12:string}",
            "$0"
        ],
        "description": "Set or delete key value pairs from an etcd3 cluster",
        "scope": "ansible"
    },
    "Runs the discovery program I(facter) on the remote system": {
        "prefix": [
            "community.general.facter",
            "facter Runs the discovery program I(facter) on the remote system"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.facter:",
            "    arguments:",
            "      - ${2:element}",
            "$0"
        ],
        "description": "Runs the discovery program I(facter) on the remote system",
        "scope": "ansible"
    },
    "Create a file with a given size, or resize it if it exists": {
        "prefix": [
            "community.general.filesize",
            "filesize Create a file with a given size, or resize it if it exists"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.filesize:",
            "    attributes: ${2:string}",
            "    blocksize: ${3:\"raw\"}",
            "    force: ${4|false,true|}",
            "    group: ${5:string}",
            "    mode: ${6|\"0755\",\"0750\",\"0700\",\"0644\",\"0640\",\"0600\"|}",
            "    owner: ${7:string}",
            "    path: ${8:/tmp/test}",
            "    selevel: ${9:string}",
            "    serole: ${10:string}",
            "    setype: ${11:string}",
            "    seuser: ${12:string}",
            "    size: ${13:\"raw\"}",
            "    source: ${14:/tmp/test}",
            "    sparse: ${15|false,true|}",
            "    unsafe_writes: ${16|false,true|}",
            "$0"
        ],
        "description": "Create a file with a given size, or resize it if it exists",
        "scope": "ansible"
    },
    "Makes a filesystem": {
        "prefix": [
            "community.general.filesystem",
            "filesystem Makes a filesystem"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.filesystem:",
            "    dev: ${2:/tmp/test}",
            "    force: ${3|false,true|}",
            "    fstype: ${4|btrfs,ext2,ext3,ext4,ext4dev,f2fs,lvm,ocfs2,reiserfs,xfs,vfat,swap,ufs|}",
            "    opts: ${5:string}",
            "    resizefs: ${6|false,true|}",
            "    state: ${7|present,absent|}",
            "$0"
        ],
        "description": "Makes a filesystem",
        "scope": "ansible"
    },
    "Manage flatpaks": {
        "prefix": [
            "community.general.flatpak",
            "flatpak Manage flatpaks"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.flatpak:",
            "    executable: ${2:/tmp/test}",
            "    method: ${3|system,user|}",
            "    name:",
            "      - ${4:element}",
            "    no_dependencies: ${5|false,true|}",
            "    remote: ${6:flathub}",
            "    state: ${7|present,absent|}",
            "$0"
        ],
        "description": "Manage flatpaks",
        "scope": "ansible"
    },
    "Manage flatpak repository remotes": {
        "prefix": [
            "community.general.flatpak_remote",
            "flatpak_remote Manage flatpak repository remotes"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.flatpak_remote:",
            "    enabled: ${2|true,false|}",
            "    executable: ${3:flatpak}",
            "    flatpakrepo_url: ${4:string}",
            "    method: ${5|system,user|}",
            "    name: ${6:string}",
            "    state: ${7|present,absent|}",
            "$0"
        ],
        "description": "Manage flatpak repository remotes",
        "scope": "ansible"
    },
    "Send a message to a flowdock": {
        "prefix": [
            "community.general.flowdock",
            "flowdock Send a message to a flowdock"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.flowdock:",
            "    external_user_name: ${2:string}",
            "    from_address: ${3:string}",
            "    from_name: ${4:string}",
            "    link: ${5:string}",
            "    msg: ${6:string}",
            "    project: ${7:string}",
            "    reply_to: ${8:string}",
            "    source: ${9:string}",
            "    subject: ${10:string}",
            "    tags: ${11:string}",
            "    token: ${12:string}",
            "    type: ${13|inbox,chat|}",
            "    validate_certs: ${14|true,false|}",
            "$0"
        ],
        "description": "Send a message to a flowdock",
        "scope": "ansible"
    },
    "Manage Gandi LiveDNS records": {
        "prefix": [
            "community.general.gandi_livedns",
            "gandi_livedns Manage Gandi LiveDNS records"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.gandi_livedns:",
            "    api_key: ${2:string}",
            "    domain: ${3:string}",
            "    record: ${4:string}",
            "    state: ${5|present,absent|}",
            "    ttl: ${6:int}",
            "    type: ${7:string}",
            "    values:",
            "      - ${8:element}",
            "$0"
        ],
        "description": "Manage Gandi LiveDNS records",
        "scope": "ansible"
    },
    "Edit GNOME Configurations": {
        "prefix": [
            "community.general.gconftool2",
            "gconftool2 Edit GNOME Configurations"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.gconftool2:",
            "    config_source: ${2:string}",
            "    direct: ${3|false,true|}",
            "    key: ${4:string}",
            "    state: ${5|absent,get,present|}",
            "    value: ${6:string}",
            "    value_type: ${7|bool,float,int,string|}",
            "$0"
        ],
        "description": "Edit GNOME Configurations",
        "scope": "ansible"
    },
    "Retrieve GConf configurations": {
        "prefix": [
            "community.general.gconftool2_info",
            "gconftool2_info Retrieve GConf configurations"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.gconftool2_info:",
            "    key: ${2:string}",
            "$0"
        ],
        "description": "Retrieve GConf configurations",
        "scope": "ansible"
    },
    "Manage Ruby gems": {
        "prefix": [
            "community.general.gem",
            "gem Manage Ruby gems"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.gem:",
            "    bindir: ${2:/tmp/test}",
            "    build_flags: ${3:string}",
            "    env_shebang: ${4|false,true|}",
            "    executable: ${5:/tmp/test}",
            "    force: ${6|false,true|}",
            "    gem_source: ${7:/tmp/test}",
            "    include_dependencies: ${8|true,false|}",
            "    include_doc: ${9|false,true|}",
            "    install_dir: ${10:/tmp/test}",
            "    name: ${11:string}",
            "    norc: ${12|true,false|}",
            "    pre_release: ${13|false,true|}",
            "    repository: ${14:string}",
            "    state: ${15|present,absent,latest|}",
            "    user_install: ${16|true,false|}",
            "    version: ${17:string}",
            "$0"
        ],
        "description": "Manage Ruby gems",
        "scope": "ansible"
    },
    "Read and write git configuration": {
        "prefix": [
            "community.general.git_config",
            "git_config Read and write git configuration"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.git_config:",
            "    file: ${2:/tmp/test}",
            "    list_all: ${3|false,true|}",
            "    name: ${4:string}",
            "    repo: ${5:/tmp/test}",
            "    scope: ${6|file,local,global,system|}",
            "    state: ${7|present,absent|}",
            "    value: ${8:string}",
            "$0"
        ],
        "description": "Read and write git configuration",
        "scope": "ansible"
    },
    "Manages deploy keys for GitHub repositories": {
        "prefix": [
            "community.general.github_deploy_key",
            "github_deploy_key Manages deploy keys for GitHub repositories"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.github_deploy_key:",
            "    force: ${2|false,true|}",
            "    github_url: ${3:https://api.github.com}",
            "    key: ${4:string}",
            "    name: ${5:string}",
            "    otp: ${6:int}",
            "    owner: ${7:string}",
            "    password: ${8:string}",
            "    read_only: ${9|true,false|}",
            "    repo: ${10:string}",
            "    state: ${11|present,absent|}",
            "    token: ${12:string}",
            "    username: ${13:string}",
            "$0"
        ],
        "description": "Manages deploy keys for GitHub repositories",
        "scope": "ansible"
    },
    "View GitHub issue": {
        "prefix": [
            "community.general.github_issue",
            "github_issue View GitHub issue"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.github_issue:",
            "    action: ${2|get_status|}",
            "    issue: ${3:int}",
            "    organization: ${4:string}",
            "    repo: ${5:string}",
            "$0"
        ],
        "description": "View GitHub issue",
        "scope": "ansible"
    },
    "Manage GitHub access keys": {
        "prefix": [
            "community.general.github_key",
            "github_key Manage GitHub access keys"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.github_key:",
            "    force: ${2|true,false|}",
            "    name: ${3:string}",
            "    pubkey: ${4:string}",
            "    state: ${5|present,absent|}",
            "    token: ${6:string}",
            "$0"
        ],
        "description": "Manage GitHub access keys",
        "scope": "ansible"
    },
    "Interact with GitHub Releases": {
        "prefix": [
            "community.general.github_release",
            "github_release Interact with GitHub Releases"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.github_release:",
            "    action: ${2|latest_release,create_release|}",
            "    body: ${3:string}",
            "    draft: ${4|false,true|}",
            "    name: ${5:string}",
            "    password: ${6:string}",
            "    prerelease: ${7|false,true|}",
            "    repo: ${8:string}",
            "    tag: ${9:string}",
            "    target: ${10:string}",
            "    token: ${11:string}",
            "    user: ${12:string}",
            "$0"
        ],
        "description": "Interact with GitHub Releases",
        "scope": "ansible"
    },
    "Manage your repositories on Github": {
        "prefix": [
            "community.general.github_repo",
            "github_repo Manage your repositories on Github"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.github_repo:",
            "    access_token: ${2:string}",
            "    api_url: ${3:https://api.github.com}",
            "    description: ${4:string}",
            "    force_defaults: ${5|true,false|}",
            "    name: ${6:string}",
            "    organization: ${7:string}",
            "    password: ${8:string}",
            "    private: ${9|false,true|}",
            "    state: ${10|present,absent|}",
            "    username: ${11:string}",
            "$0"
        ],
        "description": "Manage your repositories on Github",
        "scope": "ansible"
    },
    "Manage GitHub webhooks": {
        "prefix": [
            "community.general.github_webhook",
            "github_webhook Manage GitHub webhooks"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.github_webhook:",
            "    active: ${2|true,false|}",
            "    content_type: ${3|form,json|}",
            "    events:",
            "      - ${4:element}",
            "    github_url: ${5:https://api.github.com}",
            "    insecure_ssl: ${6|false,true|}",
            "    password: ${7:string}",
            "    repository: ${8:string}",
            "    secret: ${9:string}",
            "    state: ${10|present,absent|}",
            "    token: ${11:string}",
            "    url: ${12:string}",
            "    user: ${13:string}",
            "$0"
        ],
        "description": "Manage GitHub webhooks",
        "scope": "ansible"
    },
    "Query information about GitHub webhooks": {
        "prefix": [
            "community.general.github_webhook_info",
            "github_webhook_info Query information about GitHub webhooks"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.github_webhook_info:",
            "    github_url: ${2:https://api.github.com}",
            "    password: ${3:string}",
            "    repository: ${4:string}",
            "    token: ${5:string}",
            "    user: ${6:string}",
            "$0"
        ],
        "description": "Query information about GitHub webhooks",
        "scope": "ansible"
    },
    "Create or delete a branch": {
        "prefix": [
            "community.general.gitlab_branch",
            "gitlab_branch Create or delete a branch"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.gitlab_branch:",
            "    api_job_token: ${2:string}",
            "    api_oauth_token: ${3:string}",
            "    api_password: ${4:string}",
            "    api_token: ${5:string}",
            "    api_url: ${6:string}",
            "    api_username: ${7:string}",
            "    branch: ${8:string}",
            "    project: ${9:string}",
            "    ref_branch: ${10:string}",
            "    state: ${11|present,absent|}",
            "    validate_certs: ${12|true,false|}",
            "$0"
        ],
        "description": "Create or delete a branch",
        "scope": "ansible"
    },
    "Manages GitLab project deploy keys": {
        "prefix": [
            "community.general.gitlab_deploy_key",
            "gitlab_deploy_key Manages GitLab project deploy keys"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.gitlab_deploy_key:",
            "    api_job_token: ${2:string}",
            "    api_oauth_token: ${3:string}",
            "    api_password: ${4:string}",
            "    api_token: ${5:string}",
            "    api_url: ${6:string}",
            "    api_username: ${7:string}",
            "    can_push: ${8|false,true|}",
            "    key: ${9:string}",
            "    project: ${10:string}",
            "    state: ${11|present,absent|}",
            "    title: ${12:string}",
            "    validate_certs: ${13|true,false|}",
            "$0"
        ],
        "description": "Manages GitLab project deploy keys",
        "scope": "ansible"
    },
    "Creates/updates/deletes GitLab Groups": {
        "prefix": [
            "community.general.gitlab_group",
            "gitlab_group Creates/updates/deletes GitLab Groups"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.gitlab_group:",
            "    api_job_token: ${2:string}",
            "    api_oauth_token: ${3:string}",
            "    api_password: ${4:string}",
            "    api_token: ${5:string}",
            "    api_url: ${6:string}",
            "    api_username: ${7:string}",
            "    auto_devops_enabled: ${8|false,true|}",
            "    avatar_path: ${9:/tmp/test}",
            "    description: ${10:string}",
            "    name: ${11:string}",
            "    parent: ${12:string}",
            "    path: ${13:string}",
            "    project_creation_level: ${14|developer,maintainer,noone|}",
            "    require_two_factor_authentication: ${15|false,true|}",
            "    state: ${16|present,absent|}",
            "    subgroup_creation_level: ${17|maintainer,owner|}",
            "    validate_certs: ${18|true,false|}",
            "    visibility: ${19|private,internal,public|}",
            "$0"
        ],
        "description": "Creates/updates/deletes GitLab Groups",
        "scope": "ansible"
    },
    "Manage group members on GitLab Server": {
        "prefix": [
            "community.general.gitlab_group_members",
            "gitlab_group_members Manage group members on GitLab Server"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.gitlab_group_members:",
            "    access_level: ${2|guest,reporter,developer,maintainer,owner|}",
            "    api_job_token: ${3:string}",
            "    api_oauth_token: ${4:string}",
            "    api_password: ${5:string}",
            "    api_token: ${6:string}",
            "    api_url: ${7:string}",
            "    api_username: ${8:string}",
            "    gitlab_group: ${9:string}",
            "    gitlab_user:",
            "      - ${10:element}",
            "    gitlab_users_access:",
            "      - ${11:element}",
            "    purge_users: ${12|guest,reporter,developer,maintainer,owner|}",
            "    state: ${13|present,absent|}",
            "    validate_certs: ${14|true,false|}",
            "$0"
        ],
        "description": "Manage group members on GitLab Server",
        "scope": "ansible"
    },
    "Creates, updates, or deletes GitLab groups variables": {
        "prefix": [
            "community.general.gitlab_group_variable",
            "gitlab_group_variable Creates, updates, or deletes GitLab groups variables"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.gitlab_group_variable:",
            "    api_job_token: ${2:string}",
            "    api_oauth_token: ${3:string}",
            "    api_password: ${4:string}",
            "    api_token: ${5:string}",
            "    api_url: ${6:string}",
            "    api_username: ${7:string}",
            "    group: ${8:string}",
            "    purge: ${9|false,true|}",
            "    state: ${10|present,absent|}",
            "    validate_certs: ${11|true,false|}",
            "    variables:",
            "      - ${12:element}",
            "$0"
        ],
        "description": "Creates, updates, or deletes GitLab groups variables",
        "scope": "ansible"
    },
    "Manages GitLab project hooks": {
        "prefix": [
            "community.general.gitlab_hook",
            "gitlab_hook Manages GitLab project hooks"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.gitlab_hook:",
            "    api_job_token: ${2:string}",
            "    api_oauth_token: ${3:string}",
            "    api_password: ${4:string}",
            "    api_token: ${5:string}",
            "    api_url: ${6:string}",
            "    api_username: ${7:string}",
            "    hook_url: ${8:string}",
            "    hook_validate_certs: ${9|false,true|}",
            "    issues_events: ${10|false,true|}",
            "    job_events: ${11|false,true|}",
            "    merge_requests_events: ${12|false,true|}",
            "    note_events: ${13|false,true|}",
            "    pipeline_events: ${14|false,true|}",
            "    project: ${15:string}",
            "    push_events: ${16|true,false|}",
            "    push_events_branch_filter: ${17:}",
            "    state: ${18|present,absent|}",
            "    tag_push_events: ${19|false,true|}",
            "    token: ${20:string}",
            "    validate_certs: ${21|true,false|}",
            "    wiki_page_events: ${22|false,true|}",
            "$0"
        ],
        "description": "Manages GitLab project hooks",
        "scope": "ansible"
    },
    "Creates/updates/deletes GitLab Projects": {
        "prefix": [
            "community.general.gitlab_project",
            "gitlab_project Creates/updates/deletes GitLab Projects"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.gitlab_project:",
            "    allow_merge_on_skipped_pipeline: ${2|false,true|}",
            "    api_job_token: ${3:string}",
            "    api_oauth_token: ${4:string}",
            "    api_password: ${5:string}",
            "    api_token: ${6:string}",
            "    api_url: ${7:string}",
            "    api_username: ${8:string}",
            "    avatar_path: ${9:/tmp/test}",
            "    builds_access_level: ${10|private,disabled,enabled|}",
            "    ci_config_path: ${11:string}",
            "    container_registry_access_level: ${12|private,disabled,enabled|}",
            "    default_branch: ${13:string}",
            "    description: ${14:string}",
            "    environments_access_level: ${15|private,disabled,enabled|}",
            "    feature_flags_access_level: ${16|private,disabled,enabled|}",
            "    forking_access_level: ${17|private,disabled,enabled|}",
            "    group: ${18:string}",
            "    import_url: ${19:string}",
            "    infrastructure_access_level: ${20|private,disabled,enabled|}",
            "    initialize_with_readme: ${21|false,true|}",
            "    issues_enabled: ${22|true,false|}",
            "    lfs_enabled: ${23|false,true|}",
            "    merge_method: ${24|merge,ff,rebase_merge|}",
            "    merge_requests_enabled: ${25|true,false|}",
            "    monitor_access_level: ${26|private,disabled,enabled|}",
            "    name: ${27:string}",
            "    only_allow_merge_if_all_discussions_are_resolved: ${28|false,true|}",
            "    only_allow_merge_if_pipeline_succeeds: ${29|false,true|}",
            "    packages_enabled: ${30|false,true|}",
            "    path: ${31:string}",
            "    releases_access_level: ${32|private,disabled,enabled|}",
            "    remove_source_branch_after_merge: ${33|false,true|}",
            "    security_and_compliance_access_level: ${34|private,disabled,enabled|}",
            "    shared_runners_enabled: ${35|false,true|}",
            "    snippets_enabled: ${36|true,false|}",
            "    squash_option: ${37|never,always,default_off,default_on|}",
            "    state: ${38|present,absent|}",
            "    username: ${39:string}",
            "    validate_certs: ${40|true,false|}",
            "    visibility: ${41|private,internal,public|}",
            "    wiki_enabled: ${42|true,false|}",
            "$0"
        ],
        "description": "Creates/updates/deletes GitLab Projects",
        "scope": "ansible"
    },
    "Manage project badges on GitLab Server": {
        "prefix": [
            "community.general.gitlab_project_badge",
            "gitlab_project_badge Manage project badges on GitLab Server"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.gitlab_project_badge:",
            "    api_job_token: ${2:string}",
            "    api_oauth_token: ${3:string}",
            "    api_password: ${4:string}",
            "    api_token: ${5:string}",
            "    api_url: ${6:string}",
            "    api_username: ${7:string}",
            "    image_url: ${8:string}",
            "    link_url: ${9:string}",
            "    project: ${10:string}",
            "    state: ${11|present,absent|}",
            "    validate_certs: ${12|true,false|}",
            "$0"
        ],
        "description": "Manage project badges on GitLab Server",
        "scope": "ansible"
    },
    "Manage project members on GitLab Server": {
        "prefix": [
            "community.general.gitlab_project_members",
            "gitlab_project_members Manage project members on GitLab Server"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.gitlab_project_members:",
            "    access_level: ${2|guest,reporter,developer,maintainer|}",
            "    api_job_token: ${3:string}",
            "    api_oauth_token: ${4:string}",
            "    api_password: ${5:string}",
            "    api_token: ${6:string}",
            "    api_url: ${7:string}",
            "    api_username: ${8:string}",
            "    gitlab_user:",
            "      - ${9:element}",
            "    gitlab_users_access:",
            "      - ${10:element}",
            "    project: ${11:string}",
            "    purge_users: ${12|guest,reporter,developer,maintainer|}",
            "    state: ${13|present,absent|}",
            "    validate_certs: ${14|true,false|}",
            "$0"
        ],
        "description": "Manage project members on GitLab Server",
        "scope": "ansible"
    },
    "Creates/updates/deletes GitLab Projects Variables": {
        "prefix": [
            "community.general.gitlab_project_variable",
            "gitlab_project_variable Creates/updates/deletes GitLab Projects Variables"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.gitlab_project_variable:",
            "    api_job_token: ${2:string}",
            "    api_oauth_token: ${3:string}",
            "    api_password: ${4:string}",
            "    api_token: ${5:string}",
            "    api_url: ${6:string}",
            "    api_username: ${7:string}",
            "    project: ${8:string}",
            "    purge: ${9|false,true|}",
            "    state: ${10|present,absent|}",
            "    validate_certs: ${11|true,false|}",
            "    variables:",
            "      - ${12:element}",
            "$0"
        ],
        "description": "Creates/updates/deletes GitLab Projects Variables",
        "scope": "ansible"
    },
    "Manage protection of existing branches": {
        "prefix": [
            "community.general.gitlab_protected_branch",
            "gitlab_protected_branch Manage protection of existing branches"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.gitlab_protected_branch:",
            "    api_job_token: ${2:string}",
            "    api_oauth_token: ${3:string}",
            "    api_password: ${4:string}",
            "    api_token: ${5:string}",
            "    api_url: ${6:string}",
            "    api_username: ${7:string}",
            "    merge_access_levels: ${8|maintainer,developer,nobody|}",
            "    name: ${9:string}",
            "    project: ${10:string}",
            "    push_access_level: ${11|maintainer,developer,nobody|}",
            "    state: ${12|present,absent|}",
            "    validate_certs: ${13|true,false|}",
            "$0"
        ],
        "description": "Manage protection of existing branches",
        "scope": "ansible"
    },
    "Create, modify and delete GitLab Runners": {
        "prefix": [
            "community.general.gitlab_runner",
            "gitlab_runner Create, modify and delete GitLab Runners"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.gitlab_runner:",
            "    access_level: ${2|not_protected,ref_protected|}",
            "    access_level_on_creation: ${3|false,true|}",
            "    active: ${4|true,false|}",
            "    api_job_token: ${5:string}",
            "    api_oauth_token: ${6:string}",
            "    api_password: ${7:string}",
            "    api_token: ${8:string}",
            "    api_url: ${9:string}",
            "    api_username: ${10:string}",
            "    description: ${11:string}",
            "    group: ${12:string}",
            "    locked: ${13|false,true|}",
            "    maximum_timeout: ${14:3600}",
            "    owned: ${15|false,true|}",
            "    project: ${16:string}",
            "    registration_token: ${17:string}",
            "    run_untagged: ${18|true,false|}",
            "    state: ${19|present,absent|}",
            "    tag_list:",
            "      - ${20:element}",
            "    validate_certs: ${21|true,false|}",
            "$0"
        ],
        "description": "Create, modify and delete GitLab Runners",
        "scope": "ansible"
    },
    "Creates/updates/deletes/blocks/unblocks GitLab Users": {
        "prefix": [
            "community.general.gitlab_user",
            "gitlab_user Creates/updates/deletes/blocks/unblocks GitLab Users"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.gitlab_user:",
            "    access_level: ${2|guest,reporter,developer,master,maintainer,owner|}",
            "    api_job_token: ${3:string}",
            "    api_oauth_token: ${4:string}",
            "    api_password: ${5:string}",
            "    api_token: ${6:string}",
            "    api_url: ${7:string}",
            "    api_username: ${8:string}",
            "    confirm: ${9|true,false|}",
            "    email: ${10:string}",
            "    external: ${11|false,true|}",
            "    group: ${12:string}",
            "    identities:",
            "      - ${13:element}",
            "    isadmin: ${14|false,true|}",
            "    name: ${15:string}",
            "    overwrite_identities: ${16|false,true|}",
            "    password: ${17:string}",
            "    reset_password: ${18|false,true|}",
            "    sshkey_expires_at: ${19:string}",
            "    sshkey_file: ${20:string}",
            "    sshkey_name: ${21:string}",
            "    state: ${22|present,absent,blocked,unblocked|}",
            "    username: ${23:string}",
            "    validate_certs: ${24|true,false|}",
            "$0"
        ],
        "description": "Creates/updates/deletes/blocks/unblocks GitLab Users",
        "scope": "ansible"
    },
    "Sends a notification to a grove.io channel": {
        "prefix": [
            "community.general.grove",
            "grove Sends a notification to a grove.io channel"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.grove:",
            "    channel_token: ${2:string}",
            "    icon_url: ${3:string}",
            "    message_content: ${4:string}",
            "    service: ${5:ansible}",
            "    url: ${6:string}",
            "    validate_certs: ${7|true,false|}",
            "$0"
        ],
        "description": "Sends a notification to a grove.io channel",
        "scope": "ansible"
    },
    "Run gunicorn with various settings": {
        "prefix": [
            "community.general.gunicorn",
            "gunicorn Run gunicorn with various settings"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.gunicorn:",
            "    app: ${2:string}",
            "    chdir: ${3:/tmp/test}",
            "    config: ${4:/tmp/test}",
            "    pid: ${5:/tmp/test}",
            "    user: ${6:string}",
            "    venv: ${7:/tmp/test}",
            "    worker: ${8|sync,eventlet,gevent,tornado,gthread,gaiohttp|}",
            "$0"
        ],
        "description": "Run gunicorn with various settings",
        "scope": "ansible"
    },
    "Execute SQL on HANA": {
        "prefix": [
            "community.general.hana_query",
            "hana_query Execute SQL on HANA"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.hana_query:",
            "    autocommit: ${2|true,false|}",
            "    database: ${3:string}",
            "    encrypted: ${4|false,true|}",
            "    filepath:",
            "      - ${5:element}",
            "    host: ${6:string}",
            "    instance: ${7:string}",
            "    password: ${8:string}",
            "    query:",
            "      - ${9:element}",
            "    sid: ${10:string}",
            "    user: ${11:SYSTEM}",
            "    userstore: ${12|false,true|}",
            "$0"
        ],
        "description": "Execute SQL on HANA",
        "scope": "ansible"
    },
    "Enable, disable, and set weights for HAProxy backend servers using socket commands": {
        "prefix": [
            "community.general.haproxy",
            "haproxy Enable, disable, and set weights for HAProxy backend servers using socket commands"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.haproxy:",
            "    agent: ${2|false,true|}",
            "    backend: ${3:string}",
            "    drain: ${4|false,true|}",
            "    fail_on_not_found: ${5|false,true|}",
            "    health: ${6|false,true|}",
            "    host: ${7:string}",
            "    shutdown_sessions: ${8|false,true|}",
            "    socket: ${9:/tmp/test}",
            "    state: ${10|disabled,drain,enabled|}",
            "    wait: ${11|false,true|}",
            "    wait_interval: ${12:5}",
            "    wait_retries: ${13:25}",
            "    weight: ${14:string}",
            "$0"
        ],
        "description": "Enable, disable, and set weights for HAProxy backend servers using socket commands",
        "scope": "ansible"
    },
    "Add or delete app collaborators on Heroku": {
        "prefix": [
            "community.general.heroku_collaborator",
            "heroku_collaborator Add or delete app collaborators on Heroku"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.heroku_collaborator:",
            "    api_key: ${2:string}",
            "    apps:",
            "      - ${3:element}",
            "    state: ${4|present,absent|}",
            "    suppress_invitation: ${5|false,true|}",
            "    user: ${6:string}",
            "$0"
        ],
        "description": "Add or delete app collaborators on Heroku",
        "scope": "ansible"
    },
    "Manages Mercurial (hg) repositories": {
        "prefix": [
            "community.general.hg",
            "hg Manages Mercurial (hg) repositories"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.hg:",
            "    clone: ${2|true,false|}",
            "    dest: ${3:/tmp/test}",
            "    executable: ${4:string}",
            "    force: ${5|false,true|}",
            "    purge: ${6|false,true|}",
            "    repo: ${7:string}",
            "    revision: ${8:string}",
            "    update: ${9|true,false|}",
            "$0"
        ],
        "description": "Manages Mercurial (hg) repositories",
        "scope": "ansible"
    },
    "Send a message to Hipchat": {
        "prefix": [
            "community.general.hipchat",
            "hipchat Send a message to Hipchat"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.hipchat:",
            "    api: ${2:https://api.hipchat.com/v1}",
            "    color: ${3|yellow,red,green,purple,gray,random|}",
            "    msg: ${4:string}",
            "    msg_format: ${5|text,html|}",
            "    msg_from: ${6:Ansible}",
            "    notify: ${7|true,false|}",
            "    room: ${8:string}",
            "    token: ${9:string}",
            "    validate_certs: ${10|true,false|}",
            "$0"
        ],
        "description": "Send a message to Hipchat",
        "scope": "ansible"
    },
    "Package manager for Homebrew": {
        "prefix": [
            "community.general.homebrew",
            "homebrew Package manager for Homebrew"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.homebrew:",
            "    install_options:",
            "      - ${2:element}",
            "    name:",
            "      - ${3:element}",
            "    path: ${4:/tmp/test}",
            "    state: ${5|present,absent,head,installed,latest,linked,removed,uninstalled,unlinked,upgraded|}",
            "    update_homebrew: ${6|false,true|}",
            "    upgrade_all: ${7|false,true|}",
            "    upgrade_options:",
            "      - ${8:element}",
            "$0"
        ],
        "description": "Package manager for Homebrew",
        "scope": "ansible"
    },
    "Install and uninstall homebrew casks": {
        "prefix": [
            "community.general.homebrew_cask",
            "homebrew_cask Install and uninstall homebrew casks"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.homebrew_cask:",
            "    accept_external_apps: ${2|false,true|}",
            "    greedy: ${3|false,true|}",
            "    install_options:",
            "      - ${4:element}",
            "    name:",
            "      - ${5:element}",
            "    path: ${6:/tmp/test}",
            "    state: ${7|present,absent,installed,latest,removed,uninstalled,upgraded|}",
            "    sudo_password: ${8:string}",
            "    update_homebrew: ${9|false,true|}",
            "    upgrade_all: ${10|false,true|}",
            "$0"
        ],
        "description": "Install and uninstall homebrew casks",
        "scope": "ansible"
    },
    "Tap a Homebrew repository": {
        "prefix": [
            "community.general.homebrew_tap",
            "homebrew_tap Tap a Homebrew repository"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.homebrew_tap:",
            "    name:",
            "      - ${2:element}",
            "    path: ${3:/tmp/test}",
            "    state: ${4|present,absent|}",
            "    url: ${5:string}",
            "$0"
        ],
        "description": "Tap a Homebrew repository",
        "scope": "ansible"
    },
    "Manage user accounts with systemd-homed": {
        "prefix": [
            "community.general.homectl",
            "homectl Manage user accounts with systemd-homed"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.homectl:",
            "    disksize: ${2:string}",
            "    email: ${3:string}",
            "    environment: ${4:string}",
            "    gid: ${5:int}",
            "    homedir: ${6:/tmp/test}",
            "    iconname: ${7:string}",
            "    imagepath: ${8:/tmp/test}",
            "    language: ${9:string}",
            "    location: ${10:string}",
            "    locked: ${11|false,true|}",
            "    memberof: ${12:string}",
            "    mountopts: ${13:string}",
            "    name: ${14:string}",
            "    notafter: ${15:int}",
            "    notbefore: ${16:int}",
            "    password: ${17:string}",
            "    passwordhint: ${18:string}",
            "    realm: ${19:string}",
            "    realname: ${20:string}",
            "    resize: ${21|false,true|}",
            "    shell: ${22:string}",
            "    skeleton: ${23:/tmp/test}",
            "    sshkeys: ${24:string}",
            "    state: ${25|present,absent|}",
            "    storage: ${26|classic,luks,directory,subvolume,fscrypt,cifs|}",
            "    timezone: ${27:string}",
            "    uid: ${28:int}",
            "    umask: ${29:int}",
            "$0"
        ],
        "description": "Manage user accounts with systemd-homed",
        "scope": "ansible"
    },
    "Notify Honeybadger.io about app deployments": {
        "prefix": [
            "community.general.honeybadger_deployment",
            "honeybadger_deployment Notify Honeybadger.io about app deployments"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.honeybadger_deployment:",
            "    environment: ${2:string}",
            "    repo: ${3:string}",
            "    revision: ${4:string}",
            "    token: ${5:string}",
            "    url: ${6:https://api.honeybadger.io/v1/deploys}",
            "    user: ${7:string}",
            "    validate_certs: ${8|true,false|}",
            "$0"
        ],
        "description": "Notify Honeybadger.io about app deployments",
        "scope": "ansible"
    },
    "Boot system using specific media through HP iLO interface": {
        "prefix": [
            "community.general.hpilo_boot",
            "hpilo_boot Boot system using specific media through HP iLO interface"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.hpilo_boot:",
            "    force: ${2|false,true|}",
            "    host: ${3:string}",
            "    image: ${4:string}",
            "    login: ${5:Administrator}",
            "    media: ${6|cdrom,floppy,rbsu,hdd,network,normal,usb|}",
            "    password: ${7:admin}",
            "    ssl_version: ${8|TLSv1,SSLv3,SSLv23,TLSv1_1,TLSv1_2|}",
            "    state: ${9|boot_once,boot_always,connect,disconnect,no_boot,poweroff|}",
            "$0"
        ],
        "description": "Boot system using specific media through HP iLO interface",
        "scope": "ansible"
    },
    "Gather information through an HP iLO interface": {
        "prefix": [
            "community.general.hpilo_info",
            "hpilo_info Gather information through an HP iLO interface"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.hpilo_info:",
            "    host: ${2:string}",
            "    login: ${3:Administrator}",
            "    password: ${4:admin}",
            "    ssl_version: ${5|TLSv1,SSLv3,SSLv23,TLSv1_1,TLSv1_2|}",
            "$0"
        ],
        "description": "Gather information through an HP iLO interface",
        "scope": "ansible"
    },
    "Configure HP iLO interface using hponcfg": {
        "prefix": [
            "community.general.hponcfg",
            "hponcfg Configure HP iLO interface using hponcfg"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.hponcfg:",
            "    executable: ${2:hponcfg}",
            "    minfw: ${3:string}",
            "    path: ${4:/tmp/test}",
            "    verbose: ${5|false,true|}",
            "$0"
        ],
        "description": "Configure HP iLO interface using hponcfg",
        "scope": "ansible"
    },
    "Manage user files for basic authentication": {
        "prefix": [
            "community.general.htpasswd",
            "htpasswd Manage user files for basic authentication"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.htpasswd:",
            "    attributes: ${2:string}",
            "    create: ${3|true,false|}",
            "    crypt_scheme: ${4:apr_md5_crypt}",
            "    group: ${5:string}",
            "    mode: ${6|\"0755\",\"0750\",\"0700\",\"0644\",\"0640\",\"0600\"|}",
            "    name: ${7:string}",
            "    owner: ${8:string}",
            "    password: ${9:string}",
            "    path: ${10:/tmp/test}",
            "    selevel: ${11:string}",
            "    serole: ${12:string}",
            "    setype: ${13:string}",
            "    seuser: ${14:string}",
            "    state: ${15|present,absent|}",
            "    unsafe_writes: ${16|false,true|}",
            "$0"
        ],
        "description": "Manage user files for basic authentication",
        "scope": "ansible"
    },
    "Creates a resource of Ecs/Instance in Huawei Cloud": {
        "prefix": [
            "community.general.hwc_ecs_instance",
            "hwc_ecs_instance Creates a resource of Ecs/Instance in Huawei Cloud"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.hwc_ecs_instance:",
            "    admin_pass: ${2:string}",
            "    availability_zone: ${3:string}",
            "    data_volumes:",
            "      - ${4:element}",
            "    description: ${5:string}",
            "    domain: ${6:string}",
            "    eip_id: ${7:string}",
            "    enable_auto_recovery: ${8|false,true|}",
            "    enterprise_project_id: ${9:string}",
            "    flavor_name: ${10:string}",
            "    id: ${11:string}",
            "    identity_endpoint: ${12:string}",
            "    image_id: ${13:string}",
            "    name: ${14:string}",
            "    nics:",
            "      - ${15:element}",
            "    password: ${16:string}",
            "    project: ${17:string}",
            "    region: ${18:string}",
            "    security_groups:",
            "      - ${20:element}",
            "    ssh_key_name: ${23:string}",
            "    state: ${24|present,absent|}",
            "    user: ${26:string}",
            "    user_data: ${27:string}",
            "    vpc_id: ${28:string}",
            "$0"
        ],
        "description": "Creates a resource of Ecs/Instance in Huawei Cloud",
        "scope": "ansible"
    },
    "Creates a resource of Evs/Disk in Huawei Cloud": {
        "prefix": [
            "community.general.hwc_evs_disk",
            "hwc_evs_disk Creates a resource of Evs/Disk in Huawei Cloud"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.hwc_evs_disk:",
            "    availability_zone: ${2:string}",
            "    backup_id: ${3:string}",
            "    description: ${4:string}",
            "    domain: ${5:string}",
            "    enable_full_clone: ${6|false,true|}",
            "    enable_scsi: ${7|false,true|}",
            "    enable_share: ${8|false,true|}",
            "    encryption_id: ${9:string}",
            "    enterprise_project_id: ${10:string}",
            "    id: ${11:string}",
            "    identity_endpoint: ${12:string}",
            "    image_id: ${13:string}",
            "    name: ${14:string}",
            "    password: ${15:string}",
            "    project: ${16:string}",
            "    region: ${17:string}",
            "    size: ${18:int}",
            "    snapshot_id: ${19:string}",
            "    state: ${20|present,absent|}",
            "    user: ${22:string}",
            "    volume_type: ${23:string}",
            "$0"
        ],
        "description": "Creates a resource of Evs/Disk in Huawei Cloud",
        "scope": "ansible"
    },
    "Creates a Huawei Cloud VPC": {
        "prefix": [
            "community.general.hwc_network_vpc",
            "hwc_network_vpc Creates a Huawei Cloud VPC"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.hwc_network_vpc:",
            "    cidr: ${2:string}",
            "    domain: ${3:string}",
            "    id: ${4:string}",
            "    identity_endpoint: ${5:string}",
            "    name: ${6:string}",
            "    password: ${7:string}",
            "    project: ${8:string}",
            "    region: ${9:string}",
            "    state: ${10|present,absent|}",
            "    user: ${12:string}",
            "$0"
        ],
        "description": "Creates a Huawei Cloud VPC",
        "scope": "ansible"
    },
    "Creates a resource of SMNTopic in Huaweicloud Cloud": {
        "prefix": [
            "community.general.hwc_smn_topic",
            "hwc_smn_topic Creates a resource of SMNTopic in Huaweicloud Cloud"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.hwc_smn_topic:",
            "    display_name: ${2:string}",
            "    domain: ${3:string}",
            "    id: ${4:string}",
            "    identity_endpoint: ${5:string}",
            "    name: ${6:string}",
            "    password: ${7:string}",
            "    project: ${8:string}",
            "    region: ${9:string}",
            "    state: ${10|present,absent|}",
            "    user: ${11:string}",
            "$0"
        ],
        "description": "Creates a resource of SMNTopic in Huaweicloud Cloud",
        "scope": "ansible"
    },
    "Creates a resource of Vpc/EIP in Huawei Cloud": {
        "prefix": [
            "community.general.hwc_vpc_eip",
            "hwc_vpc_eip Creates a resource of Vpc/EIP in Huawei Cloud"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.hwc_vpc_eip:",
            "    domain: ${3:string}",
            "    enterprise_project_id: ${4:string}",
            "    id: ${5:string}",
            "    identity_endpoint: ${6:string}",
            "    ip_version: ${7:int}",
            "    ipv4_address: ${8:string}",
            "    password: ${9:string}",
            "    port_id: ${10:string}",
            "    project: ${11:string}",
            "    region: ${12:string}",
            "    shared_bandwidth_id: ${13:string}",
            "    state: ${14|present,absent|}",
            "    type: ${16:string}",
            "    user: ${17:string}",
            "$0"
        ],
        "description": "Creates a resource of Vpc/EIP in Huawei Cloud",
        "scope": "ansible"
    },
    "Creates a resource of Vpc/PeeringConnect in Huawei Cloud": {
        "prefix": [
            "community.general.hwc_vpc_peering_connect",
            "hwc_vpc_peering_connect Creates a resource of Vpc/PeeringConnect in Huawei Cloud"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.hwc_vpc_peering_connect:",
            "    description: ${2:string}",
            "    domain: ${3:string}",
            "    id: ${4:string}",
            "    identity_endpoint: ${5:string}",
            "    local_vpc_id: ${6:string}",
            "    name: ${7:string}",
            "    password: ${8:string}",
            "    project: ${10:string}",
            "    region: ${11:string}",
            "    state: ${12|present,absent|}",
            "    user: ${14:string}",
            "$0"
        ],
        "description": "Creates a resource of Vpc/PeeringConnect in Huawei Cloud",
        "scope": "ansible"
    },
    "Creates a resource of Vpc/Port in Huawei Cloud": {
        "prefix": [
            "community.general.hwc_vpc_port",
            "hwc_vpc_port Creates a resource of Vpc/Port in Huawei Cloud"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.hwc_vpc_port:",
            "    admin_state_up: ${2|false,true|}",
            "    allowed_address_pairs:",
            "      - ${3:element}",
            "    domain: ${4:string}",
            "    extra_dhcp_opts:",
            "      - ${5:element}",
            "    id: ${6:string}",
            "    identity_endpoint: ${7:string}",
            "    ip_address: ${8:string}",
            "    name: ${9:string}",
            "    password: ${10:string}",
            "    project: ${11:string}",
            "    region: ${12:string}",
            "    security_groups:",
            "      - ${13:element}",
            "    state: ${14|present,absent|}",
            "    subnet_id: ${15:string}",
            "    user: ${17:string}",
            "$0"
        ],
        "description": "Creates a resource of Vpc/Port in Huawei Cloud",
        "scope": "ansible"
    },
    "Creates a resource of Vpc/PrivateIP in Huawei Cloud": {
        "prefix": [
            "community.general.hwc_vpc_private_ip",
            "hwc_vpc_private_ip Creates a resource of Vpc/PrivateIP in Huawei Cloud"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.hwc_vpc_private_ip:",
            "    domain: ${2:string}",
            "    id: ${3:string}",
            "    identity_endpoint: ${4:string}",
            "    ip_address: ${5:string}",
            "    password: ${6:string}",
            "    project: ${7:string}",
            "    region: ${8:string}",
            "    state: ${9|present,absent|}",
            "    subnet_id: ${10:string}",
            "    user: ${11:string}",
            "$0"
        ],
        "description": "Creates a resource of Vpc/PrivateIP in Huawei Cloud",
        "scope": "ansible"
    },
    "Creates a resource of Vpc/Route in Huawei Cloud": {
        "prefix": [
            "community.general.hwc_vpc_route",
            "hwc_vpc_route Creates a resource of Vpc/Route in Huawei Cloud"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.hwc_vpc_route:",
            "    destination: ${2:string}",
            "    domain: ${3:string}",
            "    id: ${4:string}",
            "    identity_endpoint: ${5:string}",
            "    next_hop: ${6:string}",
            "    password: ${7:string}",
            "    project: ${8:string}",
            "    region: ${9:string}",
            "    state: ${10|present,absent|}",
            "    type: ${11:peering}",
            "    user: ${12:string}",
            "    vpc_id: ${13:string}",
            "$0"
        ],
        "description": "Creates a resource of Vpc/Route in Huawei Cloud",
        "scope": "ansible"
    },
    "Creates a resource of Vpc/SecurityGroup in Huawei Cloud": {
        "prefix": [
            "community.general.hwc_vpc_security_group",
            "hwc_vpc_security_group Creates a resource of Vpc/SecurityGroup in Huawei Cloud"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.hwc_vpc_security_group:",
            "    domain: ${2:string}",
            "    enterprise_project_id: ${3:string}",
            "    id: ${4:string}",
            "    identity_endpoint: ${5:string}",
            "    name: ${6:string}",
            "    password: ${7:string}",
            "    project: ${8:string}",
            "    region: ${9:string}",
            "    state: ${10|present,absent|}",
            "    user: ${11:string}",
            "    vpc_id: ${12:string}",
            "$0"
        ],
        "description": "Creates a resource of Vpc/SecurityGroup in Huawei Cloud",
        "scope": "ansible"
    },
    "Creates a resource of Vpc/SecurityGroupRule in Huawei Cloud": {
        "prefix": [
            "community.general.hwc_vpc_security_group_rule",
            "hwc_vpc_security_group_rule Creates a resource of Vpc/SecurityGroupRule in Huawei Cloud"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.hwc_vpc_security_group_rule:",
            "    description: ${2:string}",
            "    direction: ${3:string}",
            "    domain: ${4:string}",
            "    ethertype: ${5:string}",
            "    id: ${6:string}",
            "    identity_endpoint: ${7:string}",
            "    password: ${8:string}",
            "    port_range_max: ${9:int}",
            "    port_range_min: ${10:int}",
            "    project: ${11:string}",
            "    protocol: ${12:string}",
            "    region: ${13:string}",
            "    remote_group_id: ${14:string}",
            "    remote_ip_prefix: ${15:string}",
            "    security_group_id: ${16:string}",
            "    state: ${17|present,absent|}",
            "    user: ${18:string}",
            "$0"
        ],
        "description": "Creates a resource of Vpc/SecurityGroupRule in Huawei Cloud",
        "scope": "ansible"
    },
    "Creates a resource of Vpc/Subnet in Huawei Cloud": {
        "prefix": [
            "community.general.hwc_vpc_subnet",
            "hwc_vpc_subnet Creates a resource of Vpc/Subnet in Huawei Cloud"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.hwc_vpc_subnet:",
            "    availability_zone: ${2:string}",
            "    cidr: ${3:string}",
            "    dhcp_enable: ${4|false,true|}",
            "    dns_address:",
            "      - ${5:element}",
            "    domain: ${6:string}",
            "    gateway_ip: ${7:string}",
            "    id: ${8:string}",
            "    identity_endpoint: ${9:string}",
            "    name: ${10:string}",
            "    password: ${11:string}",
            "    project: ${12:string}",
            "    region: ${13:string}",
            "    state: ${14|present,absent|}",
            "    user: ${16:string}",
            "    vpc_id: ${17:string}",
            "$0"
        ],
        "description": "Creates a resource of Vpc/Subnet in Huawei Cloud",
        "scope": "ansible"
    },
    "Manages domains on IBM Spectrum Accelerate Family storage systems": {
        "prefix": [
            "community.general.ibm_sa_domain",
            "ibm_sa_domain Manages domains on IBM Spectrum Accelerate Family storage systems"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ibm_sa_domain:",
            "    domain: ${2:string}",
            "    endpoints: ${3:string}",
            "    hard_capacity: ${4:string}",
            "    ldap_id: ${5:string}",
            "    max_cgs: ${6:string}",
            "    max_dms: ${7:string}",
            "    max_mirrors: ${8:string}",
            "    max_pools: ${9:string}",
            "    max_volumes: ${10:string}",
            "    password: ${11:string}",
            "    perf_class: ${12:string}",
            "    size: ${13:string}",
            "    soft_capacity: ${14:string}",
            "    state: ${15|present,absent|}",
            "    username: ${16:string}",
            "$0"
        ],
        "description": "Manages domains on IBM Spectrum Accelerate Family storage systems",
        "scope": "ansible"
    },
    "Adds hosts to or removes them from IBM Spectrum Accelerate Family storage systems": {
        "prefix": [
            "community.general.ibm_sa_host",
            "ibm_sa_host Adds hosts to or removes them from IBM Spectrum Accelerate Family storage systems"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ibm_sa_host:",
            "    cluster: ${2:string}",
            "    domain: ${3:string}",
            "    endpoints: ${4:string}",
            "    host: ${5:string}",
            "    iscsi_chap_name: ${6:string}",
            "    iscsi_chap_secret: ${7:string}",
            "    password: ${8:string}",
            "    state: ${9|present,absent|}",
            "    username: ${10:string}",
            "$0"
        ],
        "description": "Adds hosts to or removes them from IBM Spectrum Accelerate Family storage systems",
        "scope": "ansible"
    },
    "Add host ports on IBM Spectrum Accelerate Family storage systems": {
        "prefix": [
            "community.general.ibm_sa_host_ports",
            "ibm_sa_host_ports Add host ports on IBM Spectrum Accelerate Family storage systems"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ibm_sa_host_ports:",
            "    endpoints: ${2:string}",
            "    fcaddress: ${3:string}",
            "    host: ${4:string}",
            "    iscsi_name: ${5:string}",
            "    num_of_visible_targets: ${6:string}",
            "    password: ${7:string}",
            "    state: ${8|present,absent|}",
            "    username: ${9:string}",
            "$0"
        ],
        "description": "Add host ports on IBM Spectrum Accelerate Family storage systems",
        "scope": "ansible"
    },
    "Handles pools on IBM Spectrum Accelerate Family storage systems": {
        "prefix": [
            "community.general.ibm_sa_pool",
            "ibm_sa_pool Handles pools on IBM Spectrum Accelerate Family storage systems"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ibm_sa_pool:",
            "    domain: ${2:string}",
            "    endpoints: ${3:string}",
            "    password: ${4:string}",
            "    perf_class: ${5:string}",
            "    pool: ${6:string}",
            "    size: ${7:string}",
            "    snapshot_size: ${8:string}",
            "    state: ${9|present,absent|}",
            "    username: ${10:string}",
            "$0"
        ],
        "description": "Handles pools on IBM Spectrum Accelerate Family storage systems",
        "scope": "ansible"
    },
    "Handle volumes on IBM Spectrum Accelerate Family storage systems": {
        "prefix": [
            "community.general.ibm_sa_vol",
            "ibm_sa_vol Handle volumes on IBM Spectrum Accelerate Family storage systems"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ibm_sa_vol:",
            "    endpoints: ${2:string}",
            "    password: ${3:string}",
            "    pool: ${4:string}",
            "    size: ${5:string}",
            "    state: ${6|present,absent|}",
            "    username: ${7:string}",
            "    vol: ${8:string}",
            "$0"
        ],
        "description": "Handle volumes on IBM Spectrum Accelerate Family storage systems",
        "scope": "ansible"
    },
    "Handles volume mapping on IBM Spectrum Accelerate Family storage systems": {
        "prefix": [
            "community.general.ibm_sa_vol_map",
            "ibm_sa_vol_map Handles volume mapping on IBM Spectrum Accelerate Family storage systems"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ibm_sa_vol_map:",
            "    cluster: ${2:string}",
            "    endpoints: ${3:string}",
            "    host: ${4:string}",
            "    lun: ${5:string}",
            "    override: ${6:string}",
            "    password: ${7:string}",
            "    state: ${8|present,absent|}",
            "    username: ${9:string}",
            "    vol: ${10:string}",
            "$0"
        ],
        "description": "Handles volume mapping on IBM Spectrum Accelerate Family storage systems",
        "scope": "ansible"
    },
    "Manage Icinga2 feature": {
        "prefix": [
            "community.general.icinga2_feature",
            "icinga2_feature Manage Icinga2 feature"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.icinga2_feature:",
            "    name: ${2:string}",
            "    state: ${3|present,absent|}",
            "$0"
        ],
        "description": "Manage Icinga2 feature",
        "scope": "ansible"
    },
    "Manage a host in Icinga2": {
        "prefix": [
            "community.general.icinga2_host",
            "icinga2_host Manage a host in Icinga2"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.icinga2_host:",
            "    check_command: ${2:hostalive}",
            "    client_cert: ${3:/tmp/test}",
            "    client_key: ${4:/tmp/test}",
            "    display_name: ${5:string}",
            "    force: ${6|false,true|}",
            "    force_basic_auth: ${7|false,true|}",
            "    http_agent: ${8:ansible-httpget}",
            "    ip: ${9:string}",
            "    name: ${10:string}",
            "    state: ${11|present,absent|}",
            "    template: ${12:string}",
            "    url: ${13:string}",
            "    url_password: ${14:string}",
            "    url_username: ${15:string}",
            "    use_gssapi: ${16|false,true|}",
            "    use_proxy: ${17|true,false|}",
            "    validate_certs: ${18|true,false|}",
            "    zone: ${20:string}",
            "$0"
        ],
        "description": "Manage a host in Icinga2",
        "scope": "ansible"
    },
    "Manages Out-Of-Band controllers using iDRAC OEM Redfish APIs": {
        "prefix": [
            "community.general.idrac_redfish_command",
            "idrac_redfish_command Manages Out-Of-Band controllers using iDRAC OEM Redfish APIs"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.idrac_redfish_command:",
            "    auth_token: ${2:string}",
            "    baseuri: ${3:string}",
            "    category: ${4:string}",
            "    command:",
            "      - ${5:element}",
            "    password: ${6:string}",
            "    resource_id: ${7:string}",
            "    timeout: ${8:10}",
            "    username: ${9:string}",
            "$0"
        ],
        "description": "Manages Out-Of-Band controllers using iDRAC OEM Redfish APIs",
        "scope": "ansible"
    },
    "Manages servers through iDRAC using Dell Redfish APIs": {
        "prefix": [
            "community.general.idrac_redfish_config",
            "idrac_redfish_config Manages servers through iDRAC using Dell Redfish APIs"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.idrac_redfish_config:",
            "    auth_token: ${2:string}",
            "    baseuri: ${3:string}",
            "    category: ${4:string}",
            "    command:",
            "      - ${5:element}",
            "    password: ${7:string}",
            "    resource_id: ${8:string}",
            "    timeout: ${9:10}",
            "    username: ${10:string}",
            "$0"
        ],
        "description": "Manages servers through iDRAC using Dell Redfish APIs",
        "scope": "ansible"
    },
    "Gather PowerEdge server information through iDRAC using Redfish APIs": {
        "prefix": [
            "community.general.idrac_redfish_info",
            "idrac_redfish_info Gather PowerEdge server information through iDRAC using Redfish APIs"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.idrac_redfish_info:",
            "    auth_token: ${2:string}",
            "    baseuri: ${3:string}",
            "    category: ${4:string}",
            "    command:",
            "      - ${5:element}",
            "    password: ${6:string}",
            "    timeout: ${7:10}",
            "    username: ${8:string}",
            "$0"
        ],
        "description": "Gather PowerEdge server information through iDRAC using Redfish APIs",
        "scope": "ansible"
    },
    "Sets or updates configuration attributes on HPE iLO with Redfish OEM extensions": {
        "prefix": [
            "community.general.ilo_redfish_config",
            "ilo_redfish_config Sets or updates configuration attributes on HPE iLO with Redfish OEM extensions"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ilo_redfish_config:",
            "    attribute_name: ${2:string}",
            "    attribute_value: ${3:string}",
            "    auth_token: ${4:string}",
            "    baseuri: ${5:string}",
            "    category: ${6|Manager|}",
            "    command:",
            "      - ${7:element}",
            "    password: ${8:string}",
            "    timeout: ${9:10}",
            "    username: ${10:string}",
            "$0"
        ],
        "description": "Sets or updates configuration attributes on HPE iLO with Redfish OEM extensions",
        "scope": "ansible"
    },
    "Gathers server information through iLO using Redfish APIs": {
        "prefix": [
            "community.general.ilo_redfish_info",
            "ilo_redfish_info Gathers server information through iLO using Redfish APIs"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ilo_redfish_info:",
            "    auth_token: ${2:string}",
            "    baseuri: ${3:string}",
            "    category:",
            "      - ${4:element}",
            "    command:",
            "      - ${5:element}",
            "    password: ${6:string}",
            "    timeout: ${7:10}",
            "    username: ${8:string}",
            "$0"
        ],
        "description": "Gathers server information through iLO using Redfish APIs",
        "scope": "ansible"
    },
    "Manage Cisco IMC hardware through its REST API": {
        "prefix": [
            "community.general.imc_rest",
            "imc_rest Manage Cisco IMC hardware through its REST API"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.imc_rest:",
            "    content: ${2:string}",
            "    hostname: ${3:string}",
            "    password: ${4:password}",
            "    path: ${5:/tmp/test}",
            "    protocol: ${6|https,http|}",
            "    timeout: ${7:60}",
            "    username: ${8:admin}",
            "    validate_certs: ${9|true,false|}",
            "$0"
        ],
        "description": "Manage Cisco IMC hardware through its REST API",
        "scope": "ansible"
    },
    "Manage SmartOS images": {
        "prefix": [
            "community.general.imgadm",
            "imgadm Manage SmartOS images"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.imgadm:",
            "    force: ${2|false,true|}",
            "    pool: ${3:zones}",
            "    source: ${4:string}",
            "    state: ${5|present,absent,deleted,imported,updated,vacuumed|}",
            "    type: ${6|imgapi,docker,dsapi|}",
            "    uuid: ${7:string}",
            "$0"
        ],
        "description": "Manage SmartOS images",
        "scope": "ansible"
    },
    "Manage Infinity IPAM using Rest API": {
        "prefix": [
            "community.general.infinity",
            "infinity Manage Infinity IPAM using Rest API"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.infinity:",
            "    action: ${2|add_network,delete_network,get_network,get_network_id,release_ip,release_network,reserve_network,reserve_next_available_ip|}",
            "    ip_address: ${3:string}",
            "    network_address: ${4:string}",
            "    network_family: ${5|4,6,dual|}",
            "    network_id: ${6:string}",
            "    network_location: ${7:-1}",
            "    network_name: ${8:string}",
            "    network_size: ${9:string}",
            "    network_type: ${10|lan,shared_lan,supernet|}",
            "    password: ${11:string}",
            "    server_ip: ${12:string}",
            "    username: ${13:string}",
            "$0"
        ],
        "description": "Manage Infinity IPAM using Rest API",
        "scope": "ansible"
    },
    "Manage InfluxDB databases": {
        "prefix": [
            "community.general.influxdb_database",
            "influxdb_database Manage InfluxDB databases"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.influxdb_database:",
            "    database_name: ${2:string}",
            "    hostname: ${3:localhost}",
            "    password: ${4:root}",
            "    path: ${5:}",
            "    port: ${6:8086}",
            "    retries: ${8:3}",
            "    ssl: ${9|false,true|}",
            "    state: ${10|present,absent|}",
            "    timeout: ${11:int}",
            "    udp_port: ${12:4444}",
            "    use_udp: ${13|false,true|}",
            "    username: ${14:root}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "Manage InfluxDB databases",
        "scope": "ansible"
    },
    "Query data points from InfluxDB": {
        "prefix": [
            "community.general.influxdb_query",
            "influxdb_query Query data points from InfluxDB"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.influxdb_query:",
            "    database_name: ${2:string}",
            "    hostname: ${3:localhost}",
            "    password: ${4:root}",
            "    path: ${5:}",
            "    port: ${6:8086}",
            "    query: ${8:string}",
            "    retries: ${9:3}",
            "    ssl: ${10|false,true|}",
            "    timeout: ${11:int}",
            "    udp_port: ${12:4444}",
            "    use_udp: ${13|false,true|}",
            "    username: ${14:root}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "Query data points from InfluxDB",
        "scope": "ansible"
    },
    "Manage InfluxDB retention policies": {
        "prefix": [
            "community.general.influxdb_retention_policy",
            "influxdb_retention_policy Manage InfluxDB retention policies"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.influxdb_retention_policy:",
            "    database_name: ${2:string}",
            "    default: ${3|false,true|}",
            "    duration: ${4:string}",
            "    hostname: ${5:localhost}",
            "    password: ${6:root}",
            "    path: ${7:}",
            "    policy_name: ${8:string}",
            "    port: ${9:8086}",
            "    replication: ${11:int}",
            "    retries: ${12:3}",
            "    shard_group_duration: ${13:string}",
            "    ssl: ${14|false,true|}",
            "    state: ${15|present,absent|}",
            "    timeout: ${16:int}",
            "    udp_port: ${17:4444}",
            "    use_udp: ${18|false,true|}",
            "    username: ${19:root}",
            "    validate_certs: ${20|true,false|}",
            "$0"
        ],
        "description": "Manage InfluxDB retention policies",
        "scope": "ansible"
    },
    "Manage InfluxDB users": {
        "prefix": [
            "community.general.influxdb_user",
            "influxdb_user Manage InfluxDB users"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.influxdb_user:",
            "    admin: ${2|false,true|}",
            "    grants:",
            "      - ${3:element}",
            "    hostname: ${4:localhost}",
            "    password: ${5:root}",
            "    path: ${6:}",
            "    port: ${7:8086}",
            "    retries: ${9:3}",
            "    ssl: ${10|false,true|}",
            "    state: ${11|present,absent|}",
            "    timeout: ${12:int}",
            "    udp_port: ${13:4444}",
            "    use_udp: ${14|false,true|}",
            "    user_name: ${15:string}",
            "    user_password: ${16:string}",
            "    username: ${17:root}",
            "    validate_certs: ${18|true,false|}",
            "$0"
        ],
        "description": "Manage InfluxDB users",
        "scope": "ansible"
    },
    "Write data points into InfluxDB": {
        "prefix": [
            "community.general.influxdb_write",
            "influxdb_write Write data points into InfluxDB"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.influxdb_write:",
            "    data_points:",
            "      - ${2:element}",
            "    database_name: ${3:string}",
            "    hostname: ${4:localhost}",
            "    password: ${5:root}",
            "    path: ${6:}",
            "    port: ${7:8086}",
            "    retries: ${9:3}",
            "    ssl: ${10|false,true|}",
            "    timeout: ${11:int}",
            "    udp_port: ${12:4444}",
            "    use_udp: ${13|false,true|}",
            "    username: ${14:root}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "Write data points into InfluxDB",
        "scope": "ansible"
    },
    "Tweak settings in INI files": {
        "prefix": [
            "community.general.ini_file",
            "ini_file Tweak settings in INI files"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ini_file:",
            "    allow_no_value: ${2|false,true|}",
            "    attributes: ${3:string}",
            "    backup: ${4|false,true|}",
            "    create: ${5|true,false|}",
            "    exclusive: ${6|true,false|}",
            "    group: ${7:string}",
            "    mode: ${8|\"0755\",\"0750\",\"0700\",\"0644\",\"0640\",\"0600\"|}",
            "    no_extra_spaces: ${9|false,true|}",
            "    option: ${10:string}",
            "    owner: ${11:string}",
            "    path: ${12:/tmp/test}",
            "    section: ${13:string}",
            "    selevel: ${14:string}",
            "    serole: ${15:string}",
            "    setype: ${16:string}",
            "    seuser: ${17:string}",
            "    state: ${18|present,absent|}",
            "    unsafe_writes: ${19|false,true|}",
            "    value: ${20:string}",
            "    values:",
            "      - ${21:element}",
            "$0"
        ],
        "description": "Tweak settings in INI files",
        "scope": "ansible"
    },
    "Manage packages on AIX": {
        "prefix": [
            "community.general.installp",
            "installp Manage packages on AIX"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.installp:",
            "    accept_license: ${2|false,true|}",
            "    name:",
            "      - ${3:element}",
            "    repository_path: ${4:/tmp/test}",
            "    state: ${5|present,absent|}",
            "$0"
        ],
        "description": "Manage packages on AIX",
        "scope": "ansible"
    },
    "Tweak settings in /etc/network/interfaces files": {
        "prefix": [
            "community.general.interfaces_file",
            "interfaces_file Tweak settings in /etc/network/interfaces files"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.interfaces_file:",
            "    address_family: ${2:string}",
            "    attributes: ${3:string}",
            "    backup: ${4|false,true|}",
            "    dest: ${5:/tmp/test}",
            "    group: ${6:string}",
            "    iface: ${7:string}",
            "    mode: ${8|\"0755\",\"0750\",\"0700\",\"0644\",\"0640\",\"0600\"|}",
            "    option: ${9:string}",
            "    owner: ${10:string}",
            "    selevel: ${11:string}",
            "    serole: ${12:string}",
            "    setype: ${13:string}",
            "    seuser: ${14:string}",
            "    state: ${15|present,absent|}",
            "    unsafe_writes: ${16|false,true|}",
            "    value: ${17:string}",
            "$0"
        ],
        "description": "Tweak settings in /etc/network/interfaces files",
        "scope": "ansible"
    },
    "Manage network namespaces": {
        "prefix": [
            "community.general.ip_netns",
            "ip_netns Manage network namespaces"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ip_netns:",
            "    name: ${2:string}",
            "    state: ${3|present,absent|}",
            "$0"
        ],
        "description": "Manage network namespaces",
        "scope": "ansible"
    },
    "Manage Global FreeIPA Configuration Settings": {
        "prefix": [
            "community.general.ipa_config",
            "ipa_config Manage Global FreeIPA Configuration Settings"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ipa_config:",
            "    ipa_host: ${2:ipa.example.com}",
            "    ipa_pass: ${3:string}",
            "    ipa_port: ${4:443}",
            "    ipa_prot: ${5|https,http|}",
            "    ipa_timeout: ${6:10}",
            "    ipa_user: ${7:admin}",
            "    ipaconfigstring: ${8|AllowNThash,KDC:DisableLastSuccess,KDC:DisableLockout,KDC:DisableDefaultPreauthforSPNs|}",
            "    ipadefaultemaildomain: ${9:string}",
            "    ipadefaultloginshell: ${10:string}",
            "    ipadefaultprimarygroup: ${11:string}",
            "    ipagroupsearchfields:",
            "      - ${12:element}",
            "    ipahomesrootdir: ${13:string}",
            "    ipakrbauthzdata: ${14|MS-PAC,PAD,nfs:NONE|}",
            "    ipamaxusernamelength: ${15:int}",
            "    ipapwdexpadvnotify: ${16:int}",
            "    ipasearchrecordslimit: ${17:int}",
            "    ipasearchtimelimit: ${18:int}",
            "    ipaselinuxusermaporder:",
            "      - ${19:element}",
            "    ipauserauthtype: ${20|password,radius,otp,pkinit,hardened,disabled|}",
            "    ipausersearchfields:",
            "      - ${21:element}",
            "    validate_certs: ${22|true,false|}",
            "$0"
        ],
        "description": "Manage Global FreeIPA Configuration Settings",
        "scope": "ansible"
    },
    "Manage FreeIPA DNS records": {
        "prefix": [
            "community.general.ipa_dnsrecord",
            "ipa_dnsrecord Manage FreeIPA DNS records"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ipa_dnsrecord:",
            "    ipa_host: ${2:ipa.example.com}",
            "    ipa_pass: ${3:string}",
            "    ipa_port: ${4:443}",
            "    ipa_prot: ${5|https,http|}",
            "    ipa_timeout: ${6:10}",
            "    ipa_user: ${7:admin}",
            "    record_name: ${8:string}",
            "    record_ttl: ${9:int}",
            "    record_type: ${10|A,AAAA,A6,CNAME,DNAME,MX,PTR,SRV,TXT|}",
            "    record_value: ${11:string}",
            "    record_values:",
            "      - ${12:element}",
            "    state: ${13|present,absent|}",
            "    validate_certs: ${14|true,false|}",
            "    zone_name: ${15:string}",
            "$0"
        ],
        "description": "Manage FreeIPA DNS records",
        "scope": "ansible"
    },
    "Manage FreeIPA DNS Zones": {
        "prefix": [
            "community.general.ipa_dnszone",
            "ipa_dnszone Manage FreeIPA DNS Zones"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ipa_dnszone:",
            "    allowsyncptr: ${2|false,true|}",
            "    dynamicupdate: ${3|false,true|}",
            "    ipa_host: ${4:ipa.example.com}",
            "    ipa_pass: ${5:string}",
            "    ipa_port: ${6:443}",
            "    ipa_prot: ${7|https,http|}",
            "    ipa_timeout: ${8:10}",
            "    ipa_user: ${9:admin}",
            "    state: ${10|present,absent|}",
            "    validate_certs: ${11|true,false|}",
            "    zone_name: ${12:string}",
            "$0"
        ],
        "description": "Manage FreeIPA DNS Zones",
        "scope": "ansible"
    },
    "Manage FreeIPA group": {
        "prefix": [
            "community.general.ipa_group",
            "ipa_group Manage FreeIPA group"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ipa_group:",
            "    append: ${2|false,true|}",
            "    cn: ${3:string}",
            "    description: ${4:string}",
            "    external: ${5|false,true|}",
            "    external_user:",
            "      - ${6:element}",
            "    gidnumber: ${7:string}",
            "    group:",
            "      - ${8:element}",
            "    ipa_host: ${9:ipa.example.com}",
            "    ipa_pass: ${10:string}",
            "    ipa_port: ${11:443}",
            "    ipa_prot: ${12|https,http|}",
            "    ipa_timeout: ${13:10}",
            "    ipa_user: ${14:admin}",
            "    nonposix: ${15|false,true|}",
            "    state: ${16|present,absent|}",
            "    user:",
            "      - ${17:element}",
            "    validate_certs: ${18|true,false|}",
            "$0"
        ],
        "description": "Manage FreeIPA group",
        "scope": "ansible"
    },
    "Manage FreeIPA HBAC rule": {
        "prefix": [
            "community.general.ipa_hbacrule",
            "ipa_hbacrule Manage FreeIPA HBAC rule"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ipa_hbacrule:",
            "    cn: ${2:string}",
            "    description: ${3:string}",
            "    host:",
            "      - ${4:element}",
            "    hostcategory: ${5|all|}",
            "    hostgroup:",
            "      - ${6:element}",
            "    ipa_host: ${7:ipa.example.com}",
            "    ipa_pass: ${8:string}",
            "    ipa_port: ${9:443}",
            "    ipa_prot: ${10|https,http|}",
            "    ipa_timeout: ${11:10}",
            "    ipa_user: ${12:admin}",
            "    service:",
            "      - ${13:element}",
            "    servicecategory: ${14|all|}",
            "    servicegroup:",
            "      - ${15:element}",
            "    sourcehost:",
            "      - ${16:element}",
            "    sourcehostcategory: ${17|all|}",
            "    sourcehostgroup:",
            "      - ${18:element}",
            "    state: ${19|present,absent,disabled,enabled|}",
            "    user:",
            "      - ${20:element}",
            "    usercategory: ${21|all|}",
            "    usergroup:",
            "      - ${22:element}",
            "    validate_certs: ${23|true,false|}",
            "$0"
        ],
        "description": "Manage FreeIPA HBAC rule",
        "scope": "ansible"
    },
    "Manage FreeIPA host": {
        "prefix": [
            "community.general.ipa_host",
            "ipa_host Manage FreeIPA host"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ipa_host:",
            "    description: ${2:string}",
            "    force: ${3|false,true|}",
            "    fqdn: ${4:string}",
            "    ip_address: ${5:string}",
            "    ipa_host: ${6:ipa.example.com}",
            "    ipa_pass: ${7:string}",
            "    ipa_port: ${8:443}",
            "    ipa_prot: ${9|https,http|}",
            "    ipa_timeout: ${10:10}",
            "    ipa_user: ${11:admin}",
            "    mac_address:",
            "      - ${12:element}",
            "    ns_hardware_platform: ${13:string}",
            "    ns_host_location: ${14:string}",
            "    ns_os_version: ${15:string}",
            "    random_password: ${16|false,true|}",
            "    state: ${17|present,absent,disabled,enabled|}",
            "    update_dns: ${18|false,true|}",
            "    user_certificate:",
            "      - ${19:element}",
            "    validate_certs: ${20|true,false|}",
            "$0"
        ],
        "description": "Manage FreeIPA host",
        "scope": "ansible"
    },
    "Manage FreeIPA host-group": {
        "prefix": [
            "community.general.ipa_hostgroup",
            "ipa_hostgroup Manage FreeIPA host-group"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ipa_hostgroup:",
            "    cn: ${2:string}",
            "    description: ${3:string}",
            "    host:",
            "      - ${4:element}",
            "    hostgroup:",
            "      - ${5:element}",
            "    ipa_host: ${6:ipa.example.com}",
            "    ipa_pass: ${7:string}",
            "    ipa_port: ${8:443}",
            "    ipa_prot: ${9|https,http|}",
            "    ipa_timeout: ${10:10}",
            "    ipa_user: ${11:admin}",
            "    state: ${12|present,absent,disabled,enabled|}",
            "    validate_certs: ${13|true,false|}",
            "$0"
        ],
        "description": "Manage FreeIPA host-group",
        "scope": "ansible"
    },
    "Manage FreeIPA OTP Configuration Settings": {
        "prefix": [
            "community.general.ipa_otpconfig",
            "ipa_otpconfig Manage FreeIPA OTP Configuration Settings"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ipa_otpconfig:",
            "    ipa_host: ${2:ipa.example.com}",
            "    ipa_pass: ${3:string}",
            "    ipa_port: ${4:443}",
            "    ipa_prot: ${5|https,http|}",
            "    ipa_timeout: ${6:10}",
            "    ipa_user: ${7:admin}",
            "    ipatokenhotpauthwindow: ${8:int}",
            "    ipatokenhotpsyncwindow: ${9:int}",
            "    ipatokentotpauthwindow: ${10:int}",
            "    ipatokentotpsyncwindow: ${11:int}",
            "    validate_certs: ${12|true,false|}",
            "$0"
        ],
        "description": "Manage FreeIPA OTP Configuration Settings",
        "scope": "ansible"
    },
    "Manage FreeIPA OTPs": {
        "prefix": [
            "community.general.ipa_otptoken",
            "ipa_otptoken Manage FreeIPA OTPs"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ipa_otptoken:",
            "    algorithm: ${2|sha1,sha256,sha384,sha512|}",
            "    counter: ${3:int}",
            "    description: ${4:string}",
            "    digits: ${5|6,8|}",
            "    enabled: ${6|true,false|}",
            "    interval: ${7:int}",
            "    ipa_host: ${8:ipa.example.com}",
            "    ipa_pass: ${9:string}",
            "    ipa_port: ${10:443}",
            "    ipa_prot: ${11|https,http|}",
            "    ipa_timeout: ${12:10}",
            "    ipa_user: ${13:admin}",
            "    model: ${14:string}",
            "    newuniqueid: ${15:string}",
            "    notafter: ${16:string}",
            "    notbefore: ${17:string}",
            "    offset: ${18:int}",
            "    otptype: ${19|totp,hotp|}",
            "    owner: ${20:string}",
            "    secretkey: ${21:string}",
            "    serial: ${22:string}",
            "    state: ${23|present,absent|}",
            "    uniqueid: ${24:string}",
            "    validate_certs: ${25|true,false|}",
            "    vendor: ${26:string}",
            "$0"
        ],
        "description": "Manage FreeIPA OTPs",
        "scope": "ansible"
    },
    "Manage FreeIPA password policies": {
        "prefix": [
            "community.general.ipa_pwpolicy",
            "ipa_pwpolicy Manage FreeIPA password policies"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ipa_pwpolicy:",
            "    failinterval: ${2:string}",
            "    group: ${3:string}",
            "    historylength: ${4:string}",
            "    ipa_host: ${5:ipa.example.com}",
            "    ipa_pass: ${6:string}",
            "    ipa_port: ${7:443}",
            "    ipa_prot: ${8|https,http|}",
            "    ipa_timeout: ${9:10}",
            "    ipa_user: ${10:admin}",
            "    lockouttime: ${11:string}",
            "    maxfailcount: ${12:string}",
            "    maxpwdlife: ${13:string}",
            "    minclasses: ${14:string}",
            "    minlength: ${15:string}",
            "    minpwdlife: ${16:string}",
            "    priority: ${17:string}",
            "    state: ${18|present,absent|}",
            "    validate_certs: ${19|true,false|}",
            "$0"
        ],
        "description": "Manage FreeIPA password policies",
        "scope": "ansible"
    },
    "Manage FreeIPA role": {
        "prefix": [
            "community.general.ipa_role",
            "ipa_role Manage FreeIPA role"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ipa_role:",
            "    cn: ${2:string}",
            "    description: ${3:string}",
            "    group:",
            "      - ${4:element}",
            "    host:",
            "      - ${5:element}",
            "    hostgroup:",
            "      - ${6:element}",
            "    ipa_host: ${7:ipa.example.com}",
            "    ipa_pass: ${8:string}",
            "    ipa_port: ${9:443}",
            "    ipa_prot: ${10|https,http|}",
            "    ipa_timeout: ${11:10}",
            "    ipa_user: ${12:admin}",
            "    privilege:",
            "      - ${13:element}",
            "    service:",
            "      - ${14:element}",
            "    state: ${15|present,absent|}",
            "    user:",
            "      - ${16:element}",
            "    validate_certs: ${17|true,false|}",
            "$0"
        ],
        "description": "Manage FreeIPA role",
        "scope": "ansible"
    },
    "Manage FreeIPA service": {
        "prefix": [
            "community.general.ipa_service",
            "ipa_service Manage FreeIPA service"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ipa_service:",
            "    force: ${2|false,true|}",
            "    hosts:",
            "      - ${3:element}",
            "    ipa_host: ${4:ipa.example.com}",
            "    ipa_pass: ${5:string}",
            "    ipa_port: ${6:443}",
            "    ipa_prot: ${7|https,http|}",
            "    ipa_timeout: ${8:10}",
            "    ipa_user: ${9:admin}",
            "    krbcanonicalname: ${10:string}",
            "    skip_host_check: ${11|false,true|}",
            "    state: ${12|present,absent|}",
            "    validate_certs: ${13|true,false|}",
            "$0"
        ],
        "description": "Manage FreeIPA service",
        "scope": "ansible"
    },
    "Manage FreeIPA Lightweight Sub Certificate Authorities": {
        "prefix": [
            "community.general.ipa_subca",
            "ipa_subca Manage FreeIPA Lightweight Sub Certificate Authorities"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ipa_subca:",
            "    ipa_host: ${2:ipa.example.com}",
            "    ipa_pass: ${3:string}",
            "    ipa_port: ${4:443}",
            "    ipa_prot: ${5|https,http|}",
            "    ipa_timeout: ${6:10}",
            "    ipa_user: ${7:admin}",
            "    state: ${8|present,absent,disabled,enabled|}",
            "    subca_desc: ${9:string}",
            "    subca_name: ${10:string}",
            "    subca_subject: ${11:string}",
            "    validate_certs: ${12|true,false|}",
            "$0"
        ],
        "description": "Manage FreeIPA Lightweight Sub Certificate Authorities",
        "scope": "ansible"
    },
    "Manage FreeIPA sudo command": {
        "prefix": [
            "community.general.ipa_sudocmd",
            "ipa_sudocmd Manage FreeIPA sudo command"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ipa_sudocmd:",
            "    description: ${2:string}",
            "    ipa_host: ${3:ipa.example.com}",
            "    ipa_pass: ${4:string}",
            "    ipa_port: ${5:443}",
            "    ipa_prot: ${6|https,http|}",
            "    ipa_timeout: ${7:10}",
            "    ipa_user: ${8:admin}",
            "    state: ${9|present,absent,disabled,enabled|}",
            "    sudocmd: ${10:string}",
            "    validate_certs: ${11|true,false|}",
            "$0"
        ],
        "description": "Manage FreeIPA sudo command",
        "scope": "ansible"
    },
    "Manage FreeIPA sudo command group": {
        "prefix": [
            "community.general.ipa_sudocmdgroup",
            "ipa_sudocmdgroup Manage FreeIPA sudo command group"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ipa_sudocmdgroup:",
            "    cn: ${2:string}",
            "    description: ${3:string}",
            "    ipa_host: ${4:ipa.example.com}",
            "    ipa_pass: ${5:string}",
            "    ipa_port: ${6:443}",
            "    ipa_prot: ${7|https,http|}",
            "    ipa_timeout: ${8:10}",
            "    ipa_user: ${9:admin}",
            "    state: ${10|present,absent,disabled,enabled|}",
            "    sudocmd:",
            "      - ${11:element}",
            "    validate_certs: ${12|true,false|}",
            "$0"
        ],
        "description": "Manage FreeIPA sudo command group",
        "scope": "ansible"
    },
    "Manage FreeIPA sudo rule": {
        "prefix": [
            "community.general.ipa_sudorule",
            "ipa_sudorule Manage FreeIPA sudo rule"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ipa_sudorule:",
            "    cmd:",
            "      - ${2:element}",
            "    cmdcategory: ${3|all|}",
            "    cmdgroup:",
            "      - ${4:element}",
            "    cn: ${5:string}",
            "    description: ${6:string}",
            "    host:",
            "      - ${7:element}",
            "    hostcategory: ${8|all|}",
            "    hostgroup:",
            "      - ${9:element}",
            "    ipa_host: ${10:ipa.example.com}",
            "    ipa_pass: ${11:string}",
            "    ipa_port: ${12:443}",
            "    ipa_prot: ${13|https,http|}",
            "    ipa_timeout: ${14:10}",
            "    ipa_user: ${15:admin}",
            "    runasextusers:",
            "      - ${16:element}",
            "    runasgroupcategory: ${17|all|}",
            "    runasusercategory: ${18|all|}",
            "    state: ${19|present,absent,disabled,enabled|}",
            "    sudoopt:",
            "      - ${20:element}",
            "    user:",
            "      - ${21:element}",
            "    usercategory: ${22|all|}",
            "    usergroup:",
            "      - ${23:element}",
            "    validate_certs: ${24|true,false|}",
            "$0"
        ],
        "description": "Manage FreeIPA sudo rule",
        "scope": "ansible"
    },
    "Manage FreeIPA users": {
        "prefix": [
            "community.general.ipa_user",
            "ipa_user Manage FreeIPA users"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ipa_user:",
            "    displayname: ${2:string}",
            "    gidnumber: ${3:string}",
            "    givenname: ${4:string}",
            "    homedirectory: ${5:string}",
            "    ipa_host: ${6:ipa.example.com}",
            "    ipa_pass: ${7:string}",
            "    ipa_port: ${8:443}",
            "    ipa_prot: ${9|https,http|}",
            "    ipa_timeout: ${10:10}",
            "    ipa_user: ${11:admin}",
            "    krbpasswordexpiration: ${12:string}",
            "    loginshell: ${13:string}",
            "    mail:",
            "      - ${14:element}",
            "    password: ${15:string}",
            "    sn: ${16:string}",
            "    sshpubkey:",
            "      - ${17:element}",
            "    state: ${18|present,absent,disabled,enabled|}",
            "    telephonenumber:",
            "      - ${19:element}",
            "    title: ${20:string}",
            "    uid: ${21:string}",
            "    uidnumber: ${22:string}",
            "    update_password: ${23|always,on_create|}",
            "    userauthtype: ${24|password,radius,otp,pkinit,hardened|}",
            "    validate_certs: ${25|true,false|}",
            "$0"
        ],
        "description": "Manage FreeIPA users",
        "scope": "ansible"
    },
    "Manage FreeIPA vaults": {
        "prefix": [
            "community.general.ipa_vault",
            "ipa_vault Manage FreeIPA vaults"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ipa_vault:",
            "    cn: ${2:string}",
            "    description: ${3:string}",
            "    ipa_host: ${4:ipa.example.com}",
            "    ipa_pass: ${5:string}",
            "    ipa_port: ${6:443}",
            "    ipa_prot: ${7|https,http|}",
            "    ipa_timeout: ${8:10}",
            "    ipa_user: ${9:admin}",
            "    ipavaultpublickey: ${10:string}",
            "    ipavaultsalt: ${11:string}",
            "    ipavaulttype: ${12|symmetric,asymmetric,standard|}",
            "    replace: ${13|false,true|}",
            "    service: ${14:string}",
            "    state: ${15|present,absent|}",
            "    username:",
            "      - ${16:element}",
            "    validate_certs: ${17|true,false|}",
            "$0"
        ],
        "description": "Manage FreeIPA vaults",
        "scope": "ansible"
    },
    "Retrieve the public IP of your internet gateway": {
        "prefix": [
            "community.general.ipify_facts",
            "ipify_facts Retrieve the public IP of your internet gateway"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ipify_facts:",
            "    api_url: ${2:https://api.ipify.org/}",
            "    timeout: ${3:10}",
            "    validate_certs: ${4|true,false|}",
            "$0"
        ],
        "description": "Retrieve the public IP of your internet gateway",
        "scope": "ansible"
    },
    "Retrieve IP geolocation facts of a host's IP address": {
        "prefix": [
            "community.general.ipinfoio_facts",
            "ipinfoio_facts Retrieve IP geolocation facts of a host's IP address"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ipinfoio_facts:",
            "    http_agent: ${2:ansible-ipinfoio-module/0.0.1}",
            "    timeout: ${3:10}",
            "$0"
        ],
        "description": "Retrieve IP geolocation facts of a host's IP address",
        "scope": "ansible"
    },
    "Management of order of boot devices": {
        "prefix": [
            "community.general.ipmi_boot",
            "ipmi_boot Management of order of boot devices"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ipmi_boot:",
            "    bootdev: ${2|network,floppy,hd,safe,optical,setup,default|}",
            "    key: ${3:string}",
            "    name: ${4:string}",
            "    password: ${5:string}",
            "    persistent: ${6|false,true|}",
            "    port: ${7:623}",
            "    state: ${8|present,absent|}",
            "    uefiboot: ${9|false,true|}",
            "    user: ${10:string}",
            "$0"
        ],
        "description": "Management of order of boot devices",
        "scope": "ansible"
    },
    "Power management for machine": {
        "prefix": [
            "community.general.ipmi_power",
            "ipmi_power Power management for machine"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ipmi_power:",
            "    key: ${2:string}",
            "    machine:",
            "      - ${3:element}",
            "    name: ${4:string}",
            "    password: ${5:string}",
            "    port: ${6:623}",
            "    state: ${7|on,off,shutdown,reset,boot|}",
            "    timeout: ${8:300}",
            "    user: ${9:string}",
            "$0"
        ],
        "description": "Power management for machine",
        "scope": "ansible"
    },
    "Save iptables state into a file or restore it from a file": {
        "prefix": [
            "community.general.iptables_state",
            "iptables_state Save iptables state into a file or restore it from a file"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.iptables_state:",
            "    counters: ${2|false,true|}",
            "    ip_version: ${3|ipv4,ipv6|}",
            "    modprobe: ${4:/tmp/test}",
            "    noflush: ${5|false,true|}",
            "    path: ${6:/tmp/test}",
            "    state: ${7|saved,restored|}",
            "    table: ${8|filter,nat,mangle,raw,security|}",
            "    wait: ${9:int}",
            "$0"
        ],
        "description": "Save iptables state into a file or restore it from a file",
        "scope": "ansible"
    },
    "Manage DNS Records for Ericsson IPWorks via ipwcli": {
        "prefix": [
            "community.general.ipwcli_dns",
            "ipwcli_dns Manage DNS Records for Ericsson IPWorks via ipwcli"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ipwcli_dns:",
            "    address: ${2:string}",
            "    container: ${3:string}",
            "    dnsname: ${4:string}",
            "    flags: ${5|S,A,U,P|}",
            "    order: ${6:int}",
            "    password: ${7:string}",
            "    port: ${8:int}",
            "    preference: ${9:int}",
            "    priority: ${10:10}",
            "    replacement: ${11:string}",
            "    service: ${12:string}",
            "    state: ${13|present,absent|}",
            "    target: ${14:string}",
            "    ttl: ${15:3600}",
            "    type: ${16|NAPTR,SRV,A,AAAA|}",
            "    username: ${17:string}",
            "    weight: ${18:10}",
            "$0"
        ],
        "description": "Manage DNS Records for Ericsson IPWorks via ipwcli",
        "scope": "ansible"
    },
    "Send a message to an IRC channel or a nick": {
        "prefix": [
            "community.general.irc",
            "irc Send a message to an IRC channel or a nick"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.irc:",
            "    channel: ${2:string}",
            "    color: ${3|none,white,black,blue,green,red,brown,purple,orange,yellow,light_green,teal,light_cyan,light_blue,pink,gray,light_gray|}",
            "    key: ${4:string}",
            "    msg: ${5:string}",
            "    nick: ${6:ansible}",
            "    nick_to:",
            "      - ${7:element}",
            "    part: ${8|true,false|}",
            "    passwd: ${9:string}",
            "    port: ${10:6667}",
            "    server: ${11:localhost}",
            "    style: ${12|none,bold,underline,reverse,italic|}",
            "    timeout: ${13:30}",
            "    topic: ${14:string}",
            "    use_ssl: ${15|false,true|}",
            "$0"
        ],
        "description": "Send a message to an IRC channel or a nick",
        "scope": "ansible"
    },
    "Generate ISO file with specified files or folders": {
        "prefix": [
            "community.general.iso_create",
            "iso_create Generate ISO file with specified files or folders"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.iso_create:",
            "    dest_iso: ${2:/tmp/test}",
            "    interchange_level: ${3|1,2,3,4|}",
            "    joliet: ${4|1,2,3|}",
            "    rock_ridge: ${5|1.09,1.10,1.12|}",
            "    src_files:",
            "      - ${6:element}",
            "    udf: ${7|false,true|}",
            "    vol_ident: ${8:string}",
            "$0"
        ],
        "description": "Generate ISO file with specified files or folders",
        "scope": "ansible"
    },
    "Add/remove/change files in ISO file": {
        "prefix": [
            "community.general.iso_customize",
            "iso_customize Add/remove/change files in ISO file"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.iso_customize:",
            "    add_files:",
            "      - ${2:element}",
            "    delete_files:",
            "      - ${3:element}",
            "    dest_iso: ${4:/tmp/test}",
            "    src_iso: ${5:/tmp/test}",
            "$0"
        ],
        "description": "Add/remove/change files in ISO file",
        "scope": "ansible"
    },
    "Extract files from an ISO image": {
        "prefix": [
            "community.general.iso_extract",
            "iso_extract Extract files from an ISO image"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.iso_extract:",
            "    dest: ${2:/tmp/test}",
            "    executable: ${3:/tmp/test}",
            "    files:",
            "      - ${4:element}",
            "    force: ${5|true,false|}",
            "    image: ${6:/tmp/test}",
            "$0"
        ],
        "description": "Extract files from an ISO image",
        "scope": "ansible"
    },
    "Send a message to jabber user or chat room": {
        "prefix": [
            "community.general.jabber",
            "jabber Send a message to jabber user or chat room"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.jabber:",
            "    encoding: ${2:string}",
            "    host: ${3:string}",
            "    msg: ${4:string}",
            "    password: ${5:string}",
            "    port: ${6:5222}",
            "    to: ${7:string}",
            "    user: ${8:string}",
            "$0"
        ],
        "description": "Send a message to jabber user or chat room",
        "scope": "ansible"
    },
    "Uses keytool to import/remove certificate to/from java keystore (cacerts)": {
        "prefix": [
            "community.general.java_cert",
            "java_cert Uses keytool to import/remove certificate to/from java keystore (cacerts)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.java_cert:",
            "    cert_alias: ${2:string}",
            "    cert_path: ${3:/tmp/test}",
            "    cert_port: ${4:443}",
            "    cert_url: ${5:string}",
            "    executable: ${6:keytool}",
            "    keystore_create: ${7|false,true|}",
            "    keystore_pass: ${8:string}",
            "    keystore_path: ${9:/tmp/test}",
            "    keystore_type: ${10:string}",
            "    pkcs12_alias: ${11:string}",
            "    pkcs12_password: ${12:string}",
            "    pkcs12_path: ${13:/tmp/test}",
            "    state: ${14|present,absent|}",
            "    trust_cacert: ${15|false,true|}",
            "$0"
        ],
        "description": "Uses keytool to import/remove certificate to/from java keystore (cacerts)",
        "scope": "ansible"
    },
    "Create a Java keystore in JKS format": {
        "prefix": [
            "community.general.java_keystore",
            "java_keystore Create a Java keystore in JKS format"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.java_keystore:",
            "    attributes: ${2:string}",
            "    certificate: ${3:string}",
            "    certificate_path: ${4:/tmp/test}",
            "    dest: ${5:/tmp/test}",
            "    force: ${6|false,true|}",
            "    group: ${7:string}",
            "    keystore_type: ${8|jks,pkcs12|}",
            "    mode: ${9|\"0755\",\"0750\",\"0700\",\"0644\",\"0640\",\"0600\"|}",
            "    name: ${10:string}",
            "    owner: ${11:string}",
            "    password: ${12:string}",
            "    private_key: ${13:string}",
            "    private_key_passphrase: ${14:string}",
            "    private_key_path: ${15:/tmp/test}",
            "    selevel: ${16:string}",
            "    serole: ${17:string}",
            "    setype: ${18:string}",
            "    seuser: ${19:string}",
            "    ssl_backend: ${20|openssl,cryptography|}",
            "    unsafe_writes: ${21|false,true|}",
            "$0"
        ],
        "description": "Create a Java keystore in JKS format",
        "scope": "ansible"
    },
    "Deploy applications to JBoss": {
        "prefix": [
            "community.general.jboss",
            "jboss Deploy applications to JBoss"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.jboss:",
            "    deploy_path: ${2:/tmp/test}",
            "    deployment: ${3:string}",
            "    src: ${4:/tmp/test}",
            "    state: ${5|present,absent|}",
            "$0"
        ],
        "description": "Deploy applications to JBoss",
        "scope": "ansible"
    },
    "Manage jenkins builds": {
        "prefix": [
            "community.general.jenkins_build",
            "jenkins_build Manage jenkins builds"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.jenkins_build:",
            "    build_number: ${3:int}",
            "    name: ${4:string}",
            "    password: ${5:string}",
            "    state: ${6|present,absent,stopped|}",
            "    token: ${7:string}",
            "    url: ${8:http://localhost:8080}",
            "    user: ${9:string}",
            "$0"
        ],
        "description": "Manage jenkins builds",
        "scope": "ansible"
    },
    "Manage jenkins jobs": {
        "prefix": [
            "community.general.jenkins_job",
            "jenkins_job Manage jenkins jobs"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.jenkins_job:",
            "    config: ${2:string}",
            "    enabled: ${3|false,true|}",
            "    name: ${4:string}",
            "    password: ${5:string}",
            "    state: ${6|present,absent|}",
            "    token: ${7:string}",
            "    url: ${8:http://localhost:8080}",
            "    user: ${9:string}",
            "    validate_certs: ${10|true,false|}",
            "$0"
        ],
        "description": "Manage jenkins jobs",
        "scope": "ansible"
    },
    "Get information about Jenkins jobs": {
        "prefix": [
            "community.general.jenkins_job_info",
            "jenkins_job_info Get information about Jenkins jobs"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.jenkins_job_info:",
            "    color: ${2:string}",
            "    glob: ${3:string}",
            "    name: ${4:string}",
            "    password: ${5:string}",
            "    token: ${6:string}",
            "    url: ${7:http://localhost:8080}",
            "    user: ${8:string}",
            "    validate_certs: ${9|true,false|}",
            "$0"
        ],
        "description": "Get information about Jenkins jobs",
        "scope": "ansible"
    },
    "Add or remove Jenkins plugin": {
        "prefix": [
            "community.general.jenkins_plugin",
            "jenkins_plugin Add or remove Jenkins plugin"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.jenkins_plugin:",
            "    attributes: ${2:string}",
            "    client_cert: ${3:/tmp/test}",
            "    client_key: ${4:/tmp/test}",
            "    force: ${5|false,true|}",
            "    force_basic_auth: ${6|false,true|}",
            "    group: ${7:jenkins}",
            "    http_agent: ${8:ansible-httpget}",
            "    jenkins_home: ${9:/tmp/test}",
            "    latest_plugins_url_segments:",
            "      - ${10:element}",
            "    mode: ${11|\"0755\",\"0750\",\"0700\",\"0644\",\"0640\",\"0600\"|}",
            "    name: ${12:string}",
            "    owner: ${13:jenkins}",
            "    selevel: ${14:string}",
            "    serole: ${15:string}",
            "    setype: ${16:string}",
            "    seuser: ${17:string}",
            "    state: ${18|present,absent,pinned,unpinned,enabled,disabled,latest|}",
            "    timeout: ${19:30}",
            "    unsafe_writes: ${20|false,true|}",
            "    update_json_url_segment:",
            "      - ${21:element}",
            "    updates_expiration: ${22:86400}",
            "    updates_url:",
            "      - ${23:element}",
            "    url: ${24:http://localhost:8080}",
            "    url_password: ${25:string}",
            "    url_username: ${26:string}",
            "    use_gssapi: ${27|false,true|}",
            "    use_proxy: ${28|true,false|}",
            "    validate_certs: ${29|true,false|}",
            "    version: ${30:string}",
            "    versioned_plugins_url_segments:",
            "      - ${31:element}",
            "    with_dependencies: ${32|true,false|}",
            "$0"
        ],
        "description": "Add or remove Jenkins plugin",
        "scope": "ansible"
    },
    "Executes a groovy script in the jenkins instance": {
        "prefix": [
            "community.general.jenkins_script",
            "jenkins_script Executes a groovy script in the jenkins instance"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.jenkins_script:",
            "    password: ${3:string}",
            "    script: ${4:string}",
            "    timeout: ${5:10}",
            "    url: ${6:http://localhost:8080}",
            "    user: ${7:string}",
            "    validate_certs: ${8|true,false|}",
            "$0"
        ],
        "description": "Executes a groovy script in the jenkins instance",
        "scope": "ansible"
    },
    "Create and modify issues in a JIRA instance": {
        "prefix": [
            "community.general.jira",
            "jira Create and modify issues in a JIRA instance"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.jira:",
            "    account_id: ${2:string}",
            "    assignee: ${3:string}",
            "    comment: ${5:string}",
            "    description: ${7:string}",
            "    inwardissue: ${9:string}",
            "    issue: ${10:string}",
            "    issuetype: ${11:string}",
            "    jql: ${12:string}",
            "    linktype: ${13:string}",
            "    maxresults: ${14:int}",
            "    operation: ${15|attach,comment,create,edit,fetch,link,search,transition,update,worklog|}",
            "    outwardissue: ${16:string}",
            "    password: ${17:string}",
            "    project: ${18:string}",
            "    status: ${19:string}",
            "    summary: ${20:string}",
            "    token: ${22:string}",
            "    uri: ${23:string}",
            "    username: ${24:string}",
            "    validate_certs: ${25|true,false|}",
            "$0"
        ],
        "description": "Create and modify issues in a JIRA instance",
        "scope": "ansible"
    },
    "Manage KDE configuration files": {
        "prefix": [
            "community.general.kdeconfig",
            "kdeconfig Manage KDE configuration files"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.kdeconfig:",
            "    attributes: ${2:string}",
            "    backup: ${3|false,true|}",
            "    group: ${4:string}",
            "    kwriteconfig_path: ${5:/tmp/test}",
            "    mode: ${6|\"0755\",\"0750\",\"0700\",\"0644\",\"0640\",\"0600\"|}",
            "    owner: ${7:string}",
            "    path: ${8:/tmp/test}",
            "    selevel: ${9:string}",
            "    serole: ${10:string}",
            "    setype: ${11:string}",
            "    seuser: ${12:string}",
            "    unsafe_writes: ${13|false,true|}",
            "    values:",
            "      - ${14:element}",
            "$0"
        ],
        "description": "Manage KDE configuration files",
        "scope": "ansible"
    },
    "Blacklist kernel modules": {
        "prefix": [
            "community.general.kernel_blacklist",
            "kernel_blacklist Blacklist kernel modules"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.kernel_blacklist:",
            "    blacklist_file: ${2:/etc/modprobe.d/blacklist-ansible.conf}",
            "    name: ${3:string}",
            "    state: ${4|present,absent|}",
            "$0"
        ],
        "description": "Blacklist kernel modules",
        "scope": "ansible"
    },
    "Configure authentication in Keycloak": {
        "prefix": [
            "community.general.keycloak_authentication",
            "keycloak_authentication Configure authentication in Keycloak"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.keycloak_authentication:",
            "    alias: ${2:string}",
            "    auth_client_id: ${3:admin-cli}",
            "    auth_client_secret: ${4:string}",
            "    auth_keycloak_url: ${5:string}",
            "    auth_password: ${6:string}",
            "    auth_realm: ${7:string}",
            "    auth_username: ${8:string}",
            "    authenticationExecutions:",
            "      - ${9:element}",
            "    connection_timeout: ${10:10}",
            "    copyFrom: ${11:string}",
            "    description: ${12:string}",
            "    force: ${13|false,true|}",
            "    http_agent: ${14:Ansible}",
            "    providerId: ${15:string}",
            "    realm: ${16:string}",
            "    state: ${17|present,absent|}",
            "    token: ${18:string}",
            "    validate_certs: ${19|true,false|}",
            "$0"
        ],
        "description": "Configure authentication in Keycloak",
        "scope": "ansible"
    },
    "Allows administration of Keycloak clients via Keycloak API": {
        "prefix": [
            "community.general.keycloak_client",
            "keycloak_client Allows administration of Keycloak clients via Keycloak API"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.keycloak_client:",
            "    admin_url: ${2:string}",
            "    always_display_in_console: ${3|false,true|}",
            "    auth_client_id: ${5:admin-cli}",
            "    auth_client_secret: ${6:string}",
            "    auth_keycloak_url: ${7:string}",
            "    auth_password: ${8:string}",
            "    auth_realm: ${9:string}",
            "    auth_username: ${10:string}",
            "    authorization_services_enabled: ${12|false,true|}",
            "    base_url: ${14:string}",
            "    bearer_only: ${15|false,true|}",
            "    client_authenticator_type: ${16|client-secret,client-jwt|}",
            "    client_id: ${17:string}",
            "    client_template: ${18:string}",
            "    connection_timeout: ${19:10}",
            "    consent_required: ${20|false,true|}",
            "    default_client_scopes:",
            "      - ${21:element}",
            "    default_roles:",
            "      - ${22:element}",
            "    description: ${23:string}",
            "    direct_access_grants_enabled: ${24|false,true|}",
            "    enabled: ${25|false,true|}",
            "    frontchannel_logout: ${26|false,true|}",
            "    full_scope_allowed: ${27|false,true|}",
            "    http_agent: ${28:Ansible}",
            "    id: ${29:string}",
            "    implicit_flow_enabled: ${30|false,true|}",
            "    name: ${31:string}",
            "    node_re_registration_timeout: ${32:int}",
            "    not_before: ${33:int}",
            "    optional_client_scopes:",
            "      - ${34:element}",
            "    protocol: ${35|openid-connect,saml|}",
            "    protocol_mappers:",
            "      - ${36:element}",
            "    public_client: ${37|false,true|}",
            "    realm: ${38:master}",
            "    redirect_uris:",
            "      - ${39:element}",
            "    registration_access_token: ${41:string}",
            "    root_url: ${42:string}",
            "    secret: ${43:string}",
            "    service_accounts_enabled: ${44|false,true|}",
            "    standard_flow_enabled: ${45|false,true|}",
            "    state: ${46|present,absent|}",
            "    surrogate_auth_required: ${47|false,true|}",
            "    token: ${48:string}",
            "    use_template_config: ${49|false,true|}",
            "    use_template_mappers: ${50|false,true|}",
            "    use_template_scope: ${51|false,true|}",
            "    validate_certs: ${52|true,false|}",
            "    web_origins:",
            "      - ${53:element}",
            "$0"
        ],
        "description": "Allows administration of Keycloak clients via Keycloak API",
        "scope": "ansible"
    },
    "Allows administration of Keycloak client_rolemapping with the Keycloak API": {
        "prefix": [
            "community.general.keycloak_client_rolemapping",
            "keycloak_client_rolemapping Allows administration of Keycloak client_rolemapping with the Keycloak API"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.keycloak_client_rolemapping:",
            "    auth_client_id: ${2:admin-cli}",
            "    auth_client_secret: ${3:string}",
            "    auth_keycloak_url: ${4:string}",
            "    auth_password: ${5:string}",
            "    auth_realm: ${6:string}",
            "    auth_username: ${7:string}",
            "    cid: ${8:string}",
            "    client_id: ${9:string}",
            "    connection_timeout: ${10:10}",
            "    gid: ${11:string}",
            "    group_name: ${12:string}",
            "    http_agent: ${13:Ansible}",
            "    realm: ${14:master}",
            "    roles:",
            "      - ${15:element}",
            "    state: ${16|present,absent|}",
            "    token: ${17:string}",
            "    validate_certs: ${18|true,false|}",
            "$0"
        ],
        "description": "Allows administration of Keycloak client_rolemapping with the Keycloak API",
        "scope": "ansible"
    },
    "Allows administration of Keycloak client_scopes via Keycloak API": {
        "prefix": [
            "community.general.keycloak_clientscope",
            "keycloak_clientscope Allows administration of Keycloak client_scopes via Keycloak API"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.keycloak_clientscope:",
            "    auth_client_id: ${3:admin-cli}",
            "    auth_client_secret: ${4:string}",
            "    auth_keycloak_url: ${5:string}",
            "    auth_password: ${6:string}",
            "    auth_realm: ${7:string}",
            "    auth_username: ${8:string}",
            "    connection_timeout: ${9:10}",
            "    description: ${10:string}",
            "    http_agent: ${11:Ansible}",
            "    id: ${12:string}",
            "    name: ${13:string}",
            "    protocol: ${14|openid-connect,saml,wsfed|}",
            "    protocol_mappers:",
            "      - ${15:element}",
            "    realm: ${16:master}",
            "    state: ${17|present,absent|}",
            "    token: ${18:string}",
            "    validate_certs: ${19|true,false|}",
            "$0"
        ],
        "description": "Allows administration of Keycloak client_scopes via Keycloak API",
        "scope": "ansible"
    },
    "Retrieve client secret via Keycloak API": {
        "prefix": [
            "community.general.keycloak_clientsecret_info",
            "keycloak_clientsecret_info Retrieve client secret via Keycloak API"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.keycloak_clientsecret_info:",
            "    auth_client_id: ${2:admin-cli}",
            "    auth_client_secret: ${3:string}",
            "    auth_keycloak_url: ${4:string}",
            "    auth_password: ${5:string}",
            "    auth_realm: ${6:string}",
            "    auth_username: ${7:string}",
            "    client_id: ${8:string}",
            "    connection_timeout: ${9:10}",
            "    http_agent: ${10:Ansible}",
            "    id: ${11:string}",
            "    realm: ${12:master}",
            "    token: ${13:string}",
            "    validate_certs: ${14|true,false|}",
            "$0"
        ],
        "description": "Retrieve client secret via Keycloak API",
        "scope": "ansible"
    },
    "Regenerate Keycloak client secret via Keycloak API": {
        "prefix": [
            "community.general.keycloak_clientsecret_regenerate",
            "keycloak_clientsecret_regenerate Regenerate Keycloak client secret via Keycloak API"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.keycloak_clientsecret_regenerate:",
            "    auth_client_id: ${2:admin-cli}",
            "    auth_client_secret: ${3:string}",
            "    auth_keycloak_url: ${4:string}",
            "    auth_password: ${5:string}",
            "    auth_realm: ${6:string}",
            "    auth_username: ${7:string}",
            "    client_id: ${8:string}",
            "    connection_timeout: ${9:10}",
            "    http_agent: ${10:Ansible}",
            "    id: ${11:string}",
            "    realm: ${12:master}",
            "    token: ${13:string}",
            "    validate_certs: ${14|true,false|}",
            "$0"
        ],
        "description": "Regenerate Keycloak client secret via Keycloak API",
        "scope": "ansible"
    },
    "Allows administration of Keycloak client templates via Keycloak API": {
        "prefix": [
            "community.general.keycloak_clienttemplate",
            "keycloak_clienttemplate Allows administration of Keycloak client templates via Keycloak API"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.keycloak_clienttemplate:",
            "    auth_client_id: ${3:admin-cli}",
            "    auth_client_secret: ${4:string}",
            "    auth_keycloak_url: ${5:string}",
            "    auth_password: ${6:string}",
            "    auth_realm: ${7:string}",
            "    auth_username: ${8:string}",
            "    connection_timeout: ${9:10}",
            "    description: ${10:string}",
            "    full_scope_allowed: ${11|false,true|}",
            "    http_agent: ${12:Ansible}",
            "    id: ${13:string}",
            "    name: ${14:string}",
            "    protocol: ${15|openid-connect,saml|}",
            "    protocol_mappers:",
            "      - ${16:element}",
            "    realm: ${17:master}",
            "    state: ${18|present,absent|}",
            "    token: ${19:string}",
            "    validate_certs: ${20|true,false|}",
            "$0"
        ],
        "description": "Allows administration of Keycloak client templates via Keycloak API",
        "scope": "ansible"
    },
    "Allows administration of Keycloak groups via Keycloak API": {
        "prefix": [
            "community.general.keycloak_group",
            "keycloak_group Allows administration of Keycloak groups via Keycloak API"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.keycloak_group:",
            "    auth_client_id: ${3:admin-cli}",
            "    auth_client_secret: ${4:string}",
            "    auth_keycloak_url: ${5:string}",
            "    auth_password: ${6:string}",
            "    auth_realm: ${7:string}",
            "    auth_username: ${8:string}",
            "    connection_timeout: ${9:10}",
            "    http_agent: ${10:Ansible}",
            "    id: ${11:string}",
            "    name: ${12:string}",
            "    parents:",
            "      - ${13:element}",
            "    realm: ${14:master}",
            "    state: ${15|present,absent|}",
            "    token: ${16:string}",
            "    validate_certs: ${17|true,false|}",
            "$0"
        ],
        "description": "Allows administration of Keycloak groups via Keycloak API",
        "scope": "ansible"
    },
    "Allows administration of Keycloak identity providers via Keycloak API": {
        "prefix": [
            "community.general.keycloak_identity_provider",
            "keycloak_identity_provider Allows administration of Keycloak identity providers via Keycloak API"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.keycloak_identity_provider:",
            "    add_read_token_role_on_create: ${2|false,true|}",
            "    alias: ${3:string}",
            "    auth_client_id: ${4:admin-cli}",
            "    auth_client_secret: ${5:string}",
            "    auth_keycloak_url: ${6:string}",
            "    auth_password: ${7:string}",
            "    auth_realm: ${8:string}",
            "    auth_username: ${9:string}",
            "    authenticate_by_default: ${10|false,true|}",
            "    connection_timeout: ${12:10}",
            "    display_name: ${13:string}",
            "    enabled: ${14|false,true|}",
            "    first_broker_login_flow_alias: ${15:string}",
            "    http_agent: ${16:Ansible}",
            "    link_only: ${17|false,true|}",
            "    mappers:",
            "      - ${18:element}",
            "    post_broker_login_flow_alias: ${19:string}",
            "    provider_id: ${20:string}",
            "    realm: ${21:master}",
            "    state: ${22|present,absent|}",
            "    store_token: ${23|false,true|}",
            "    token: ${24:string}",
            "    trust_email: ${25|false,true|}",
            "    validate_certs: ${26|true,false|}",
            "$0"
        ],
        "description": "Allows administration of Keycloak identity providers via Keycloak API",
        "scope": "ansible"
    },
    "Allows administration of Keycloak realm via Keycloak API": {
        "prefix": [
            "community.general.keycloak_realm",
            "keycloak_realm Allows administration of Keycloak realm via Keycloak API"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.keycloak_realm:",
            "    access_code_lifespan: ${2:int}",
            "    access_code_lifespan_login: ${3:int}",
            "    access_code_lifespan_user_action: ${4:int}",
            "    access_token_lifespan: ${5:int}",
            "    access_token_lifespan_for_implicit_flow: ${6:int}",
            "    account_theme: ${7:string}",
            "    action_token_generated_by_admin_lifespan: ${8:int}",
            "    action_token_generated_by_user_lifespan: ${9:int}",
            "    admin_events_details_enabled: ${10|false,true|}",
            "    admin_events_enabled: ${11|false,true|}",
            "    admin_theme: ${12:string}",
            "    auth_client_id: ${14:admin-cli}",
            "    auth_client_secret: ${15:string}",
            "    auth_keycloak_url: ${16:string}",
            "    auth_password: ${17:string}",
            "    auth_realm: ${18:string}",
            "    auth_username: ${19:string}",
            "    browser_flow: ${20:string}",
            "    brute_force_protected: ${22|false,true|}",
            "    client_authentication_flow: ${23:string}",
            "    connection_timeout: ${25:10}",
            "    default_default_client_scopes:",
            "      - ${26:element}",
            "    default_groups:",
            "      - ${27:element}",
            "    default_locale: ${28:string}",
            "    default_optional_client_scopes:",
            "      - ${29:element}",
            "    default_roles:",
            "      - ${30:element}",
            "    default_signature_algorithm: ${31:string}",
            "    direct_grant_flow: ${32:string}",
            "    display_name: ${33:string}",
            "    display_name_html: ${34:string}",
            "    docker_authentication_flow: ${35:string}",
            "    duplicate_emails_allowed: ${36|false,true|}",
            "    edit_username_allowed: ${37|false,true|}",
            "    email_theme: ${38:string}",
            "    enabled: ${39|false,true|}",
            "    enabled_event_types:",
            "      - ${40:element}",
            "    events_enabled: ${41|false,true|}",
            "    events_expiration: ${42:int}",
            "    events_listeners:",
            "      - ${43:element}",
            "    failure_factor: ${44:int}",
            "    http_agent: ${45:Ansible}",
            "    id: ${46:string}",
            "    internationalization_enabled: ${47|false,true|}",
            "    login_theme: ${48:string}",
            "    login_with_email_allowed: ${49|false,true|}",
            "    max_delta_time_seconds: ${50:int}",
            "    max_failure_wait_seconds: ${51:int}",
            "    minimum_quick_login_wait_seconds: ${52:int}",
            "    not_before: ${53:int}",
            "    offline_session_idle_timeout: ${54:int}",
            "    offline_session_max_lifespan: ${55:int}",
            "    offline_session_max_lifespan_enabled: ${56|false,true|}",
            "    otp_policy_algorithm: ${57:string}",
            "    otp_policy_digits: ${58:int}",
            "    otp_policy_initial_counter: ${59:int}",
            "    otp_policy_look_ahead_window: ${60:int}",
            "    otp_policy_period: ${61:int}",
            "    otp_policy_type: ${62:string}",
            "    otp_supported_applications:",
            "      - ${63:element}",
            "    password_policy: ${64:string}",
            "    permanent_lockout: ${65|false,true|}",
            "    quick_login_check_milli_seconds: ${66:int}",
            "    realm: ${67:string}",
            "    refresh_token_max_reuse: ${68:int}",
            "    registration_allowed: ${69|false,true|}",
            "    registration_email_as_username: ${70|false,true|}",
            "    registration_flow: ${71:string}",
            "    remember_me: ${72|false,true|}",
            "    reset_credentials_flow: ${73:string}",
            "    reset_password_allowed: ${74|false,true|}",
            "    revoke_refresh_token: ${75|false,true|}",
            "    ssl_required: ${77|all,external,none|}",
            "    sso_session_idle_timeout: ${78:int}",
            "    sso_session_idle_timeout_remember_me: ${79:int}",
            "    sso_session_max_lifespan: ${80:int}",
            "    sso_session_max_lifespan_remember_me: ${81:int}",
            "    state: ${82|present,absent|}",
            "    supported_locales:",
            "      - ${83:element}",
            "    token: ${84:string}",
            "    user_managed_access_allowed: ${85|false,true|}",
            "    validate_certs: ${86|true,false|}",
            "    verify_email: ${87|false,true|}",
            "    wait_increment_seconds: ${88:int}",
            "$0"
        ],
        "description": "Allows administration of Keycloak realm via Keycloak API",
        "scope": "ansible"
    },
    "Allows obtaining Keycloak realm public information via Keycloak API": {
        "prefix": [
            "community.general.keycloak_realm_info",
            "keycloak_realm_info Allows obtaining Keycloak realm public information via Keycloak API"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.keycloak_realm_info:",
            "    auth_keycloak_url: ${2:string}",
            "    realm: ${3:master}",
            "    validate_certs: ${4|true,false|}",
            "$0"
        ],
        "description": "Allows obtaining Keycloak realm public information via Keycloak API",
        "scope": "ansible"
    },
    "Allows administration of Keycloak roles via Keycloak API": {
        "prefix": [
            "community.general.keycloak_role",
            "keycloak_role Allows administration of Keycloak roles via Keycloak API"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.keycloak_role:",
            "    auth_client_id: ${3:admin-cli}",
            "    auth_client_secret: ${4:string}",
            "    auth_keycloak_url: ${5:string}",
            "    auth_password: ${6:string}",
            "    auth_realm: ${7:string}",
            "    auth_username: ${8:string}",
            "    client_id: ${9:string}",
            "    connection_timeout: ${10:10}",
            "    description: ${11:string}",
            "    http_agent: ${12:Ansible}",
            "    name: ${13:string}",
            "    realm: ${14:master}",
            "    state: ${15|present,absent|}",
            "    token: ${16:string}",
            "    validate_certs: ${17|true,false|}",
            "$0"
        ],
        "description": "Allows administration of Keycloak roles via Keycloak API",
        "scope": "ansible"
    },
    "Allows administration of Keycloak user federations via Keycloak API": {
        "prefix": [
            "community.general.keycloak_user_federation",
            "keycloak_user_federation Allows administration of Keycloak user federations via Keycloak API"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.keycloak_user_federation:",
            "    auth_client_id: ${2:admin-cli}",
            "    auth_client_secret: ${3:string}",
            "    auth_keycloak_url: ${4:string}",
            "    auth_password: ${5:string}",
            "    auth_realm: ${6:string}",
            "    auth_username: ${7:string}",
            "    connection_timeout: ${9:10}",
            "    http_agent: ${10:Ansible}",
            "    id: ${11:string}",
            "    mappers:",
            "      - ${12:element}",
            "    name: ${13:string}",
            "    parent_id: ${14:string}",
            "    provider_id: ${15|ldap,kerberos,sssd|}",
            "    provider_type: ${16:org.keycloak.storage.UserStorageProvider}",
            "    realm: ${17:master}",
            "    state: ${18|present,absent|}",
            "    token: ${19:string}",
            "    validate_certs: ${20|true,false|}",
            "$0"
        ],
        "description": "Allows administration of Keycloak user federations via Keycloak API",
        "scope": "ansible"
    },
    "Allows administration of Keycloak user_rolemapping with the Keycloak API": {
        "prefix": [
            "community.general.keycloak_user_rolemapping",
            "keycloak_user_rolemapping Allows administration of Keycloak user_rolemapping with the Keycloak API"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.keycloak_user_rolemapping:",
            "    auth_client_id: ${2:admin-cli}",
            "    auth_client_secret: ${3:string}",
            "    auth_keycloak_url: ${4:string}",
            "    auth_password: ${5:string}",
            "    auth_realm: ${6:string}",
            "    auth_username: ${7:string}",
            "    cid: ${8:string}",
            "    client_id: ${9:string}",
            "    connection_timeout: ${10:10}",
            "    http_agent: ${11:Ansible}",
            "    realm: ${12:master}",
            "    roles:",
            "      - ${13:element}",
            "    service_account_user_client_id: ${14:string}",
            "    state: ${15|present,absent|}",
            "    target_username: ${16:string}",
            "    token: ${17:string}",
            "    uid: ${18:string}",
            "    validate_certs: ${19|true,false|}",
            "$0"
        ],
        "description": "Allows administration of Keycloak user_rolemapping with the Keycloak API",
        "scope": "ansible"
    },
    "Set or delete a passphrase using the Operating System's native keyring": {
        "prefix": [
            "community.general.keyring",
            "keyring Set or delete a passphrase using the Operating System's native keyring"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.keyring:",
            "    keyring_password: ${2:string}",
            "    service: ${3:string}",
            "    state: ${4|present,absent|}",
            "    user_password: ${5:string}",
            "    username: ${6:string}",
            "$0"
        ],
        "description": "Set or delete a passphrase using the Operating System's native keyring",
        "scope": "ansible"
    },
    "Get a passphrase using the Operating System's native keyring": {
        "prefix": [
            "community.general.keyring_info",
            "keyring_info Get a passphrase using the Operating System's native keyring"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.keyring_info:",
            "    keyring_password: ${2:string}",
            "    service: ${3:string}",
            "    username: ${4:string}",
            "$0"
        ],
        "description": "Get a passphrase using the Operating System's native keyring",
        "scope": "ansible"
    },
    "Manage Kibana plugins": {
        "prefix": [
            "community.general.kibana_plugin",
            "kibana_plugin Manage Kibana plugins"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.kibana_plugin:",
            "    allow_root: ${2|false,true|}",
            "    force: ${3|false,true|}",
            "    name: ${4:string}",
            "    plugin_bin: ${5:/tmp/test}",
            "    plugin_dir: ${6:/tmp/test}",
            "    state: ${7|present,absent|}",
            "    timeout: ${8:1m}",
            "    url: ${9:string}",
            "    version: ${10:string}",
            "$0"
        ],
        "description": "Manage Kibana plugins",
        "scope": "ansible"
    },
    "Manage macOS services": {
        "prefix": [
            "community.general.launchd",
            "launchd Manage macOS services"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.launchd:",
            "    enabled: ${2|false,true|}",
            "    force_stop: ${3|false,true|}",
            "    name: ${4:string}",
            "    state: ${5|reloaded,restarted,started,stopped,unloaded|}",
            "$0"
        ],
        "description": "Manage macOS services",
        "scope": "ansible"
    },
    "Manage Gentoo overlays": {
        "prefix": [
            "community.general.layman",
            "layman Manage Gentoo overlays"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.layman:",
            "    list_url: ${2:string}",
            "    name: ${3:string}",
            "    state: ${4|present,absent,updated|}",
            "    validate_certs: ${5|true,false|}",
            "$0"
        ],
        "description": "Manage Gentoo overlays",
        "scope": "ansible"
    },
    "Local Backup Utility for Alpine Linux": {
        "prefix": [
            "community.general.lbu",
            "lbu Local Backup Utility for Alpine Linux"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.lbu:",
            "    commit: ${2|false,true|}",
            "    exclude:",
            "      - ${3:element}",
            "    include:",
            "      - ${4:element}",
            "$0"
        ],
        "description": "Local Backup Utility for Alpine Linux",
        "scope": "ansible"
    },
    "Add or remove multiple LDAP attribute values": {
        "prefix": [
            "community.general.ldap_attrs",
            "ldap_attrs Add or remove multiple LDAP attribute values"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ldap_attrs:",
            "    bind_dn: ${3:string}",
            "    bind_pw: ${4:}",
            "    ca_path: ${5:/tmp/test}",
            "    dn: ${6:string}",
            "    ordered: ${7|false,true|}",
            "    referrals_chasing: ${8|anonymous,disabled|}",
            "    sasl_class: ${9|external,gssapi|}",
            "    server_uri: ${10:ldapi:///}",
            "    start_tls: ${11|false,true|}",
            "    state: ${12|present,absent,exact|}",
            "    validate_certs: ${13|true,false|}",
            "    xorder_discovery: ${14|auto,enable,disable|}",
            "$0"
        ],
        "description": "Add or remove multiple LDAP attribute values",
        "scope": "ansible"
    },
    "Add or remove LDAP entries": {
        "prefix": [
            "community.general.ldap_entry",
            "ldap_entry Add or remove LDAP entries"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ldap_entry:",
            "    bind_dn: ${3:string}",
            "    bind_pw: ${4:}",
            "    ca_path: ${5:/tmp/test}",
            "    dn: ${6:string}",
            "    objectClass:",
            "      - ${7:element}",
            "    recursive: ${8|false,true|}",
            "    referrals_chasing: ${9|anonymous,disabled|}",
            "    sasl_class: ${10|external,gssapi|}",
            "    server_uri: ${11:ldapi:///}",
            "    start_tls: ${12|false,true|}",
            "    state: ${13|present,absent|}",
            "    validate_certs: ${14|true,false|}",
            "    xorder_discovery: ${15|auto,enable,disable|}",
            "$0"
        ],
        "description": "Add or remove LDAP entries",
        "scope": "ansible"
    },
    "Set passwords in LDAP": {
        "prefix": [
            "community.general.ldap_passwd",
            "ldap_passwd Set passwords in LDAP"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ldap_passwd:",
            "    bind_dn: ${2:string}",
            "    bind_pw: ${3:}",
            "    ca_path: ${4:/tmp/test}",
            "    dn: ${5:string}",
            "    passwd: ${6:string}",
            "    referrals_chasing: ${7|anonymous,disabled|}",
            "    sasl_class: ${8|external,gssapi|}",
            "    server_uri: ${9:ldapi:///}",
            "    start_tls: ${10|false,true|}",
            "    validate_certs: ${11|true,false|}",
            "    xorder_discovery: ${12|auto,enable,disable|}",
            "$0"
        ],
        "description": "Set passwords in LDAP",
        "scope": "ansible"
    },
    "Search for entries in a LDAP server": {
        "prefix": [
            "community.general.ldap_search",
            "ldap_search Search for entries in a LDAP server"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ldap_search:",
            "    attrs:",
            "      - ${2:element}",
            "    bind_dn: ${3:string}",
            "    bind_pw: ${4:}",
            "    ca_path: ${5:/tmp/test}",
            "    dn: ${6:string}",
            "    filter: ${7:(objectClass=*)}",
            "    referrals_chasing: ${8|anonymous,disabled|}",
            "    sasl_class: ${9|external,gssapi|}",
            "    schema: ${10|false,true|}",
            "    scope: ${11|base,onelevel,subordinate,children|}",
            "    server_uri: ${12:ldapi:///}",
            "    start_tls: ${13|false,true|}",
            "    validate_certs: ${14|true,false|}",
            "    xorder_discovery: ${15|auto,enable,disable|}",
            "$0"
        ],
        "description": "Search for entries in a LDAP server",
        "scope": "ansible"
    },
    "Create an annotation in librato": {
        "prefix": [
            "community.general.librato_annotation",
            "librato_annotation Create an annotation in librato"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.librato_annotation:",
            "    api_key: ${2:string}",
            "    description: ${3:string}",
            "    end_time: ${4:int}",
            "    links:",
            "      - ${5:element}",
            "    name: ${6:string}",
            "    source: ${7:string}",
            "    start_time: ${8:int}",
            "    title: ${9:string}",
            "    user: ${10:string}",
            "$0"
        ],
        "description": "Create an annotation in librato",
        "scope": "ansible"
    },
    "Manage instances on the Linode Public Cloud": {
        "prefix": [
            "community.general.linode",
            "linode Manage instances on the Linode Public Cloud"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.linode:",
            "    additional_disks:",
            "      - ${2:element}",
            "    alert_bwin_enabled: ${3|false,true|}",
            "    alert_bwin_threshold: ${4:int}",
            "    alert_bwout_enabled: ${5|false,true|}",
            "    alert_bwout_threshold: ${6:int}",
            "    alert_bwquota_enabled: ${7|false,true|}",
            "    alert_bwquota_threshold: ${8:int}",
            "    alert_cpu_enabled: ${9|false,true|}",
            "    alert_cpu_threshold: ${10:int}",
            "    alert_diskio_enabled: ${11|false,true|}",
            "    alert_diskio_threshold: ${12:int}",
            "    api_key: ${13:string}",
            "    backupweeklyday: ${14:int}",
            "    backupwindow: ${15:int}",
            "    datacenter: ${16:int}",
            "    displaygroup: ${17:}",
            "    distribution: ${18:int}",
            "    kernel_id: ${19:int}",
            "    linode_id: ${20:int}",
            "    name: ${21:string}",
            "    password: ${22:string}",
            "    payment_term: ${23|1,12,24|}",
            "    plan: ${24:int}",
            "    private_ip: ${25|false,true|}",
            "    ssh_pub_key: ${26:string}",
            "    state: ${27|present,absent,active,deleted,restarted,started,stopped|}",
            "    swap: ${28:512}",
            "    wait: ${29|true,false|}",
            "    wait_timeout: ${30:300}",
            "    watchdog: ${31|true,false|}",
            "$0"
        ],
        "description": "Manage instances on the Linode Public Cloud",
        "scope": "ansible"
    },
    "Manage instances on the Linode cloud": {
        "prefix": [
            "community.general.linode_v4",
            "linode_v4 Manage instances on the Linode cloud"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.linode_v4:",
            "    access_token: ${2:string}",
            "    authorized_keys:",
            "      - ${3:element}",
            "    group: ${4:string}",
            "    image: ${5:string}",
            "    label: ${6:string}",
            "    private_ip: ${7|false,true|}",
            "    region: ${8:string}",
            "    root_pass: ${9:string}",
            "    stackscript_id: ${11:int}",
            "    state: ${12|present,absent|}",
            "    tags:",
            "      - ${13:element}",
            "    type: ${14:string}",
            "$0"
        ],
        "description": "Manage instances on the Linode cloud",
        "scope": "ansible"
    },
    "Gather facts on processes listening on TCP and UDP ports": {
        "prefix": [
            "community.general.listen_ports_facts",
            "listen_ports_facts Gather facts on processes listening on TCP and UDP ports"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.listen_ports_facts:",
            "    command: ${2|netstat,ss|}",
            "    include_non_listening: ${3|false,true|}",
            "$0"
        ],
        "description": "Gather facts on processes listening on TCP and UDP ports",
        "scope": "ansible"
    },
    "Get details reported by lldp": {
        "prefix": [
            "community.general.lldp",
            "lldp Get details reported by lldp"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.lldp:",
            "$0"
        ],
        "description": "Get details reported by lldp",
        "scope": "ansible"
    },
    "Creates or removes locales": {
        "prefix": [
            "community.general.locale_gen",
            "locale_gen Creates or removes locales"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.locale_gen:",
            "    name: ${2:string}",
            "    state: ${3|present,absent|}",
            "$0"
        ],
        "description": "Creates or removes locales",
        "scope": "ansible"
    },
    "Module for tracking logs via logentries.com": {
        "prefix": [
            "community.general.logentries",
            "logentries Module for tracking logs via logentries.com"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.logentries:",
            "    logtype: ${2:string}",
            "    name: ${3:string}",
            "    path: ${4:string}",
            "    state: ${5|present,absent,followed,unfollowed|}",
            "$0"
        ],
        "description": "Module for tracking logs via logentries.com",
        "scope": "ansible"
    },
    "Send a message to logentries": {
        "prefix": [
            "community.general.logentries_msg",
            "logentries_msg Send a message to logentries"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.logentries_msg:",
            "    api: ${2:data.logentries.com}",
            "    msg: ${3:string}",
            "    port: ${4:80}",
            "    token: ${5:string}",
            "$0"
        ],
        "description": "Send a message to logentries",
        "scope": "ansible"
    },
    "Manage Logstash plugins": {
        "prefix": [
            "community.general.logstash_plugin",
            "logstash_plugin Manage Logstash plugins"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.logstash_plugin:",
            "    name: ${2:string}",
            "    plugin_bin: ${3:/tmp/test}",
            "    proxy_host: ${4:string}",
            "    proxy_port: ${5:string}",
            "    state: ${6|present,absent|}",
            "    version: ${7:string}",
            "$0"
        ],
        "description": "Manage Logstash plugins",
        "scope": "ansible"
    },
    "Configure LVM volume groups": {
        "prefix": [
            "community.general.lvg",
            "lvg Configure LVM volume groups"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.lvg:",
            "    force: ${2|false,true|}",
            "    pesize: ${3:4}",
            "    pv_options: ${4:}",
            "    pvresize: ${5|false,true|}",
            "    pvs:",
            "      - ${6:element}",
            "    state: ${7|present,absent|}",
            "    vg: ${8:string}",
            "    vg_options: ${9:}",
            "$0"
        ],
        "description": "Configure LVM volume groups",
        "scope": "ansible"
    },
    "Configure LVM logical volumes": {
        "prefix": [
            "community.general.lvol",
            "lvol Configure LVM logical volumes"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.lvol:",
            "    active: ${2|true,false|}",
            "    force: ${3|false,true|}",
            "    lv: ${4:string}",
            "    opts: ${5:string}",
            "    pvs: ${6:string}",
            "    resizefs: ${7|false,true|}",
            "    shrink: ${8|true,false|}",
            "    size: ${9:string}",
            "    snapshot: ${10:string}",
            "    state: ${11|present,absent|}",
            "    thinpool: ${12:string}",
            "    vg: ${13:string}",
            "$0"
        ],
        "description": "Configure LVM logical volumes",
        "scope": "ansible"
    },
    "Manage LXC Containers": {
        "prefix": [
            "community.general.lxc_container",
            "lxc_container Manage LXC Containers"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.lxc_container:",
            "    archive: ${2|false,true|}",
            "    archive_compression: ${3|gzip,bzip2,none|}",
            "    archive_path: ${4:/tmp/test}",
            "    backing_store: ${5|dir,lvm,loop,btrfs,overlayfs,zfs|}",
            "    clone_name: ${6:string}",
            "    clone_snapshot: ${7|false,true|}",
            "    config: ${8:/tmp/test}",
            "    container_command: ${9:string}",
            "    container_config:",
            "      - ${10:element}",
            "    container_log: ${11|false,true|}",
            "    container_log_level: ${12|INFO,Info,info,Error,error,ERROR,Debug,debug,DEBUG|}",
            "    directory: ${13:/tmp/test}",
            "    fs_size: ${14:5G}",
            "    fs_type: ${15:ext4}",
            "    lv_name: ${16:string}",
            "    lxc_path: ${17:/tmp/test}",
            "    name: ${18:string}",
            "    state: ${19|started,stopped,restarted,absent,frozen,clone|}",
            "    template: ${20:ubuntu}",
            "    template_options: ${21:string}",
            "    thinpool: ${22:string}",
            "    vg_name: ${23:lxc}",
            "    zfs_root: ${24:string}",
            "$0"
        ],
        "description": "Manage LXC Containers",
        "scope": "ansible"
    },
    "Custom module for lxca cmms inventory utility": {
        "prefix": [
            "community.general.lxca_cmms",
            "lxca_cmms Custom module for lxca cmms inventory utility"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.lxca_cmms:",
            "    auth_url: ${2:string}",
            "    chassis: ${3:string}",
            "    command_options: ${4|cmms,cmms_by_uuid,cmms_by_chassis_uuid|}",
            "    login_password: ${5:string}",
            "    login_user: ${6:string}",
            "    uuid: ${7:string}",
            "$0"
        ],
        "description": "Custom module for lxca cmms inventory utility",
        "scope": "ansible"
    },
    "Custom module for lxca nodes inventory utility": {
        "prefix": [
            "community.general.lxca_nodes",
            "lxca_nodes Custom module for lxca nodes inventory utility"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.lxca_nodes:",
            "    auth_url: ${2:string}",
            "    chassis: ${3:string}",
            "    command_options: ${4|nodes,nodes_by_uuid,nodes_by_chassis_uuid,nodes_status_managed,nodes_status_unmanaged|}",
            "    login_password: ${5:string}",
            "    login_user: ${6:string}",
            "    uuid: ${7:string}",
            "$0"
        ],
        "description": "Custom module for lxca nodes inventory utility",
        "scope": "ansible"
    },
    "Manage LXD instances": {
        "prefix": [
            "community.general.lxd_container",
            "lxd_container Manage LXD instances"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.lxd_container:",
            "    architecture: ${2:string}",
            "    client_cert: ${3:/tmp/test}",
            "    client_key: ${4:/tmp/test}",
            "    ephemeral: ${7|false,true|}",
            "    force_stop: ${8|false,true|}",
            "    ignore_volatile_options: ${9|false,true|}",
            "    name: ${10:string}",
            "    profiles:",
            "      - ${11:element}",
            "    project: ${12:string}",
            "    snap_url: ${13:unix:/var/snap/lxd/common/lxd/unix.socket}",
            "    state: ${15|started,stopped,restarted,absent,frozen|}",
            "    target: ${16:string}",
            "    timeout: ${17:30}",
            "    trust_password: ${18:string}",
            "    type: ${19|container,virtual-machine|}",
            "    url: ${20:unix:/var/lib/lxd/unix.socket}",
            "    wait_for_container: ${21|false,true|}",
            "    wait_for_ipv4_addresses: ${22|false,true|}",
            "$0"
        ],
        "description": "Manage LXD instances",
        "scope": "ansible"
    },
    "Manage LXD profiles": {
        "prefix": [
            "community.general.lxd_profile",
            "lxd_profile Manage LXD profiles"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.lxd_profile:",
            "    client_cert: ${2:/tmp/test}",
            "    client_key: ${3:/tmp/test}",
            "    description: ${5:string}",
            "    merge_profile: ${7|false,true|}",
            "    name: ${8:string}",
            "    new_name: ${9:string}",
            "    project: ${10:string}",
            "    snap_url: ${11:unix:/var/snap/lxd/common/lxd/unix.socket}",
            "    state: ${12|present,absent|}",
            "    trust_password: ${13:string}",
            "    url: ${14:unix:/var/lib/lxd/unix.socket}",
            "$0"
        ],
        "description": "Manage LXD profiles",
        "scope": "ansible"
    },
    "Manage LXD projects": {
        "prefix": [
            "community.general.lxd_project",
            "lxd_project Manage LXD projects"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.lxd_project:",
            "    client_cert: ${2:/tmp/test}",
            "    client_key: ${3:/tmp/test}",
            "    description: ${5:string}",
            "    merge_project: ${6|false,true|}",
            "    name: ${7:string}",
            "    new_name: ${8:string}",
            "    snap_url: ${9:unix:/var/snap/lxd/common/lxd/unix.socket}",
            "    state: ${10|present,absent|}",
            "    trust_password: ${11:string}",
            "    url: ${12:unix:/var/lib/lxd/unix.socket}",
            "$0"
        ],
        "description": "Manage LXD projects",
        "scope": "ansible"
    },
    "Package manager for MacPorts": {
        "prefix": [
            "community.general.macports",
            "macports Package manager for MacPorts"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.macports:",
            "    name:",
            "      - ${2:element}",
            "    selfupdate: ${3|false,true|}",
            "    state: ${4|present,absent,active,inactive,installed,removed|}",
            "    upgrade: ${5|false,true|}",
            "    variant: ${6:string}",
            "$0"
        ],
        "description": "Package manager for MacPorts",
        "scope": "ansible"
    },
    "Send an email": {
        "prefix": [
            "community.general.mail",
            "mail Send an email"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.mail:",
            "    attach:",
            "      - ${2:element}",
            "    bcc:",
            "      - ${3:element}",
            "    body: ${4:string}",
            "    cc:",
            "      - ${5:element}",
            "    charset: ${6:utf-8}",
            "    ehlohost: ${7:string}",
            "    headers:",
            "      - ${8:element}",
            "    host: ${9:localhost}",
            "    password: ${10:string}",
            "    port: ${11:25}",
            "    secure: ${12|try,always,never,starttls|}",
            "    sender: ${13:root}",
            "    subject: ${14:string}",
            "    subtype: ${15|plain,html|}",
            "    timeout: ${16:20}",
            "    to:",
            "      - ${17:element}",
            "    username: ${18:string}",
            "$0"
        ],
        "description": "Send an email",
        "scope": "ansible"
    },
    "Run targets in a Makefile": {
        "prefix": [
            "community.general.make",
            "make Run targets in a Makefile"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.make:",
            "    chdir: ${2:/tmp/test}",
            "    file: ${3:/tmp/test}",
            "    jobs: ${4:int}",
            "    make: ${5:/tmp/test}",
            "    target: ${7:string}",
            "$0"
        ],
        "description": "Run targets in a Makefile",
        "scope": "ansible"
    },
    "Configuration of alert profiles for ManageIQ": {
        "prefix": [
            "community.general.manageiq_alert_profiles",
            "manageiq_alert_profiles Configuration of alert profiles for ManageIQ"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.manageiq_alert_profiles:",
            "    alerts:",
            "      - ${2:element}",
            "    name: ${4:string}",
            "    notes: ${5:string}",
            "    resource_type: ${6|Vm,ContainerNode,MiqServer,Host,Storage,EmsCluster,ExtManagementSystem,MiddlewareServer|}",
            "    state: ${7|present,absent|}",
            "$0"
        ],
        "description": "Configuration of alert profiles for ManageIQ",
        "scope": "ansible"
    },
    "Configuration of alerts in ManageIQ": {
        "prefix": [
            "community.general.manageiq_alerts",
            "manageiq_alerts Configuration of alerts in ManageIQ"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.manageiq_alerts:",
            "    description: ${2:string}",
            "    enabled: ${3|false,true|}",
            "    expression_type: ${5|hash,miq|}",
            "    resource_type: ${8|Vm,ContainerNode,MiqServer,Host,Storage,EmsCluster,ExtManagementSystem,MiddlewareServer|}",
            "    state: ${9|present,absent|}",
            "$0"
        ],
        "description": "Configuration of alerts in ManageIQ",
        "scope": "ansible"
    },
    "Management of groups in ManageIQ": {
        "prefix": [
            "community.general.manageiq_group",
            "manageiq_group Management of groups in ManageIQ"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.manageiq_group:",
            "    belongsto_filters:",
            "      - ${2:element}",
            "    belongsto_filters_merge_mode: ${3|replace,merge|}",
            "    description: ${4:None}",
            "    managed_filters_merge_mode: ${6|replace,merge|}",
            "    role: ${8:None}",
            "    role_id: ${9:None}",
            "    state: ${10|present,absent|}",
            "    tenant: ${11:None}",
            "    tenant_id: ${12:None}",
            "$0"
        ],
        "description": "Management of groups in ManageIQ",
        "scope": "ansible"
    },
    "Management of resource policy_profiles in ManageIQ": {
        "prefix": [
            "community.general.manageiq_policies",
            "manageiq_policies Management of resource policy_profiles in ManageIQ"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.manageiq_policies:",
            "    policy_profiles:",
            "      - ${3:element}",
            "    resource_id: ${4:int}",
            "    resource_name: ${5:string}",
            "    resource_type: ${6|provider,host,vm,blueprint,category,cluster,datastore,group,resourcepool,service,servicetemplate,template,tenant,user|}",
            "    state: ${7|present,absent,list|}",
            "$0"
        ],
        "description": "Management of resource policy_profiles in ManageIQ",
        "scope": "ansible"
    },
    "Listing of resource policy_profiles in ManageIQ": {
        "prefix": [
            "community.general.manageiq_policies_info",
            "manageiq_policies_info Listing of resource policy_profiles in ManageIQ"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.manageiq_policies_info:",
            "    resource_id: ${3:int}",
            "    resource_name: ${4:string}",
            "    resource_type: ${5|provider,host,vm,blueprint,category,cluster,datastore,group,resourcepool,service,servicetemplate,template,tenant,user|}",
            "$0"
        ],
        "description": "Listing of resource policy_profiles in ManageIQ",
        "scope": "ansible"
    },
    "Management of provider in ManageIQ": {
        "prefix": [
            "community.general.manageiq_provider",
            "manageiq_provider Management of provider in ManageIQ"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.manageiq_provider:",
            "    api_version: ${3|v2,v3|}",
            "    azure_tenant_id: ${4:string}",
            "    host_default_vnc_port_end: ${5:string}",
            "    host_default_vnc_port_start: ${6:string}",
            "    name: ${9:string}",
            "    project: ${10:string}",
            "    provider_region: ${12:string}",
            "    state: ${14|present,absent,refresh|}",
            "    subscription: ${15:string}",
            "    tenant_mapping_enabled: ${16|false,true|}",
            "    type: ${17|Openshift,Amazon,oVirt,VMware,Azure,Director,OpenStack,GCE|}",
            "    zone: ${18:default}",
            "$0"
        ],
        "description": "Management of provider in ManageIQ",
        "scope": "ansible"
    },
    "Management of resource tags in ManageIQ": {
        "prefix": [
            "community.general.manageiq_tags",
            "manageiq_tags Management of resource tags in ManageIQ"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.manageiq_tags:",
            "    resource_id: ${3:int}",
            "    resource_name: ${4:string}",
            "    resource_type: ${5|provider,host,vm,blueprint,category,cluster,datastore,group,resourcepool,service,servicetemplate,template,tenant,user|}",
            "    state: ${6|present,absent,list|}",
            "    tags:",
            "      - ${7:element}",
            "$0"
        ],
        "description": "Management of resource tags in ManageIQ",
        "scope": "ansible"
    },
    "Retrieve resource tags in ManageIQ": {
        "prefix": [
            "community.general.manageiq_tags_info",
            "manageiq_tags_info Retrieve resource tags in ManageIQ"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.manageiq_tags_info:",
            "    resource_id: ${3:int}",
            "    resource_name: ${4:string}",
            "    resource_type: ${5|provider,host,vm,blueprint,category,cluster,datastore,group,resourcepool,service,servicetemplate,template,tenant,user|}",
            "$0"
        ],
        "description": "Retrieve resource tags in ManageIQ",
        "scope": "ansible"
    },
    "Management of tenants in ManageIQ": {
        "prefix": [
            "community.general.manageiq_tenant",
            "manageiq_tenant Management of tenants in ManageIQ"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.manageiq_tenant:",
            "    description: ${2:None}",
            "    name: ${4:None}",
            "    parent: ${5:None}",
            "    parent_id: ${6:None}",
            "    state: ${8|present,absent|}",
            "$0"
        ],
        "description": "Management of tenants in ManageIQ",
        "scope": "ansible"
    },
    "Management of users in ManageIQ": {
        "prefix": [
            "community.general.manageiq_user",
            "manageiq_user Management of users in ManageIQ"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.manageiq_user:",
            "    email: ${2:string}",
            "    group: ${3:string}",
            "    name: ${5:string}",
            "    password: ${6:string}",
            "    state: ${7|present,absent|}",
            "    update_password: ${8|always,on_create|}",
            "    userid: ${9:string}",
            "$0"
        ],
        "description": "Management of users in ManageIQ",
        "scope": "ansible"
    },
    "Manage Mac App Store applications with mas-cli": {
        "prefix": [
            "community.general.mas",
            "mas Manage Mac App Store applications with mas-cli"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.mas:",
            "    id:",
            "      - ${2:element}",
            "    state: ${3|present,absent,latest|}",
            "    upgrade_all: ${4|false,true|}",
            "$0"
        ],
        "description": "Manage Mac App Store applications with mas-cli",
        "scope": "ansible"
    },
    "Send notifications to matrix": {
        "prefix": [
            "community.general.matrix",
            "matrix Send notifications to matrix"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.matrix:",
            "    hs_url: ${2:string}",
            "    msg_html: ${3:string}",
            "    msg_plain: ${4:string}",
            "    password: ${5:string}",
            "    room_id: ${6:string}",
            "    token: ${7:string}",
            "    user_id: ${8:string}",
            "$0"
        ],
        "description": "Send notifications to matrix",
        "scope": "ansible"
    },
    "Send Mattermost notifications": {
        "prefix": [
            "community.general.mattermost",
            "mattermost Send Mattermost notifications"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.mattermost:",
            "    api_key: ${2:string}",
            "    attachments:",
            "      - ${3:element}",
            "    channel: ${4:string}",
            "    icon_url: ${5:https://docs.ansible.com/favicon.ico}",
            "    text: ${6:string}",
            "    url: ${7:string}",
            "    username: ${8:Ansible}",
            "    validate_certs: ${9|true,false|}",
            "$0"
        ],
        "description": "Send Mattermost notifications",
        "scope": "ansible"
    },
    "Downloads an Artifact from a Maven Repository": {
        "prefix": [
            "community.general.maven_artifact",
            "maven_artifact Downloads an Artifact from a Maven Repository"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.maven_artifact:",
            "    artifact_id: ${2:string}",
            "    attributes: ${3:string}",
            "    checksum_alg: ${4|md5,sha1|}",
            "    classifier: ${5:}",
            "    client_cert: ${6:/tmp/test}",
            "    client_key: ${7:/tmp/test}",
            "    dest: ${8:/tmp/test}",
            "    directory_mode: ${9:string}",
            "    extension: ${10:jar}",
            "    force_basic_auth: ${11|false,true|}",
            "    group: ${12:string}",
            "    group_id: ${13:string}",
            "    keep_name: ${15|false,true|}",
            "    mode: ${16|\"0755\",\"0750\",\"0700\",\"0644\",\"0640\",\"0600\"|}",
            "    owner: ${17:string}",
            "    password: ${18:string}",
            "    repository_url: ${19:https://repo1.maven.org/maven2}",
            "    selevel: ${20:string}",
            "    serole: ${21:string}",
            "    setype: ${22:string}",
            "    seuser: ${23:string}",
            "    state: ${24|present,absent|}",
            "    timeout: ${25:10}",
            "    unredirected_headers:",
            "      - ${26:element}",
            "    unsafe_writes: ${27|false,true|}",
            "    username: ${28:string}",
            "    validate_certs: ${29|true,false|}",
            "    verify_checksum: ${30|download,never,change,always|}",
            "    version: ${31:string}",
            "    version_by_spec: ${32:string}",
            "$0"
        ],
        "description": "Downloads an Artifact from a Maven Repository",
        "scope": "ansible"
    },
    "Request reload of Memset's DNS infrastructure,": {
        "prefix": [
            "community.general.memset_dns_reload",
            "memset_dns_reload Request reload of Memset's DNS infrastructure,"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.memset_dns_reload:",
            "    api_key: ${2:string}",
            "    poll: ${3|false,true|}",
            "$0"
        ],
        "description": "Request reload of Memset's DNS infrastructure,",
        "scope": "ansible"
    },
    "Retrieve Memstore product usage information": {
        "prefix": [
            "community.general.memset_memstore_info",
            "memset_memstore_info Retrieve Memstore product usage information"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.memset_memstore_info:",
            "    api_key: ${2:string}",
            "    name: ${3:string}",
            "$0"
        ],
        "description": "Retrieve Memstore product usage information",
        "scope": "ansible"
    },
    "Retrieve server information": {
        "prefix": [
            "community.general.memset_server_info",
            "memset_server_info Retrieve server information"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.memset_server_info:",
            "    api_key: ${2:string}",
            "    name: ${3:string}",
            "$0"
        ],
        "description": "Retrieve server information",
        "scope": "ansible"
    },
    "Creates and deletes Memset DNS zones": {
        "prefix": [
            "community.general.memset_zone",
            "memset_zone Creates and deletes Memset DNS zones"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.memset_zone:",
            "    api_key: ${2:string}",
            "    force: ${3|false,true|}",
            "    name: ${4:string}",
            "    state: ${5|absent,present|}",
            "    ttl: ${6|0,300,600,900,1800,3600,7200,10800,21600,43200,86400|}",
            "$0"
        ],
        "description": "Creates and deletes Memset DNS zones",
        "scope": "ansible"
    },
    "Create and delete domains in Memset DNS zones": {
        "prefix": [
            "community.general.memset_zone_domain",
            "memset_zone_domain Create and delete domains in Memset DNS zones"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.memset_zone_domain:",
            "    api_key: ${2:string}",
            "    domain: ${3:string}",
            "    state: ${4|present,absent|}",
            "    zone: ${5:string}",
            "$0"
        ],
        "description": "Create and delete domains in Memset DNS zones",
        "scope": "ansible"
    },
    "Create and delete records in Memset DNS zones": {
        "prefix": [
            "community.general.memset_zone_record",
            "memset_zone_record Create and delete records in Memset DNS zones"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.memset_zone_record:",
            "    address: ${2:string}",
            "    api_key: ${3:string}",
            "    priority: ${4:0}",
            "    record: ${5:}",
            "    relative: ${6|false,true|}",
            "    state: ${7|present,absent|}",
            "    ttl: ${8|0,300,600,900,1800,3600,7200,10800,21600,43200,86400|}",
            "    type: ${9|A,AAAA,CNAME,MX,NS,SRV,TXT|}",
            "    zone: ${10:string}",
            "$0"
        ],
        "description": "Create and delete records in Memset DNS zones",
        "scope": "ansible"
    },
    "Generates AIX mksysb rootvg backups": {
        "prefix": [
            "community.general.mksysb",
            "mksysb Generates AIX mksysb rootvg backups"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.mksysb:",
            "    backup_crypt_files: ${2|true,false|}",
            "    backup_dmapi_fs: ${3|true,false|}",
            "    create_map_files: ${4|false,true|}",
            "    exclude_files: ${5|false,true|}",
            "    exclude_wpar_files: ${6|false,true|}",
            "    extended_attrs: ${7|true,false|}",
            "    name: ${8:string}",
            "    new_image_data: ${9|true,false|}",
            "    software_packing: ${10|false,true|}",
            "    storage_path: ${11:string}",
            "    use_snapshot: ${12|false,true|}",
            "$0"
        ],
        "description": "Generates AIX mksysb rootvg backups",
        "scope": "ansible"
    },
    "Load or unload kernel modules": {
        "prefix": [
            "community.general.modprobe",
            "modprobe Load or unload kernel modules"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.modprobe:",
            "    name: ${2:string}",
            "    params: ${3:}",
            "    persistent: ${4|disabled,absent,present|}",
            "    state: ${5|present,absent|}",
            "$0"
        ],
        "description": "Load or unload kernel modules",
        "scope": "ansible"
    },
    "Manage the state of a program monitored via Monit": {
        "prefix": [
            "community.general.monit",
            "monit Manage the state of a program monitored via Monit"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.monit:",
            "    name: ${2:string}",
            "    state: ${3|present,started,stopped,restarted,monitored,unmonitored,reloaded|}",
            "    timeout: ${4:300}",
            "$0"
        ],
        "description": "Manage the state of a program monitored via Monit",
        "scope": "ansible"
    },
    "Publish a message on an MQTT topic for the IoT": {
        "prefix": [
            "community.general.mqtt",
            "mqtt Publish a message on an MQTT topic for the IoT"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.mqtt:",
            "    ca_cert: ${2:/tmp/test}",
            "    client_cert: ${3:/tmp/test}",
            "    client_id: ${4:string}",
            "    client_key: ${5:/tmp/test}",
            "    password: ${6:string}",
            "    payload: ${7:string}",
            "    port: ${8:1883}",
            "    qos: ${9|0,1,2|}",
            "    retain: ${10|false,true|}",
            "    server: ${11:localhost}",
            "    tls_version: ${12|tlsv1.1,tlsv1.2|}",
            "    topic: ${13:string}",
            "    username: ${14:string}",
            "$0"
        ],
        "description": "Publish a message on an MQTT topic for the IoT",
        "scope": "ansible"
    },
    "Add or remove MSSQL databases from a remote host": {
        "prefix": [
            "community.general.mssql_db",
            "mssql_db Add or remove MSSQL databases from a remote host"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.mssql_db:",
            "    autocommit: ${2|false,true|}",
            "    login_host: ${3:string}",
            "    login_password: ${4:}",
            "    login_port: ${5:1433}",
            "    login_user: ${6:}",
            "    name: ${7:string}",
            "    state: ${8|present,absent,import|}",
            "    target: ${9:string}",
            "$0"
        ],
        "description": "Add or remove MSSQL databases from a remote host",
        "scope": "ansible"
    },
    "Execute SQL scripts on a MSSQL database": {
        "prefix": [
            "community.general.mssql_script",
            "mssql_script Execute SQL scripts on a MSSQL database"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.mssql_script:",
            "    login_host: ${2:string}",
            "    login_password: ${3:string}",
            "    login_port: ${4:1433}",
            "    login_user: ${5:string}",
            "    name: ${6:}",
            "    output: ${7|default,dict|}",
            "    script: ${9:string}",
            "$0"
        ],
        "description": "Execute SQL scripts on a MSSQL database",
        "scope": "ansible"
    },
    "Perform common tasks in Nagios related to downtime and notifications": {
        "prefix": [
            "community.general.nagios",
            "nagios Perform common tasks in Nagios related to downtime and notifications"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.nagios:",
            "    action: ${2|downtime,delete_downtime,enable_alerts,disable_alerts,silence,unsilence,silence_nagios,unsilence_nagios,command,servicegroup_service_downtime,servicegroup_host_downtime,acknowledge,forced_check|}",
            "    author: ${3:Ansible}",
            "    cmdfile: ${4:string}",
            "    command: ${5:string}",
            "    comment: ${6:Scheduling downtime}",
            "    host: ${7:string}",
            "    minutes: ${8:30}",
            "    servicegroup: ${9:string}",
            "    services: ${10:string}",
            "    start: ${11:string}",
            "$0"
        ],
        "description": "Perform common tasks in Nagios related to downtime and notifications",
        "scope": "ansible"
    },
    "Manage Netcup DNS records": {
        "prefix": [
            "community.general.netcup_dns",
            "netcup_dns Manage Netcup DNS records"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.netcup_dns:",
            "    api_key: ${2:string}",
            "    api_password: ${3:string}",
            "    customer_id: ${4:int}",
            "    domain: ${5:string}",
            "    priority: ${6:int}",
            "    record: ${7:@}",
            "    solo: ${8|false,true|}",
            "    state: ${9|present,absent|}",
            "    timeout: ${10:5}",
            "    type: ${11|A,AAAA,MX,CNAME,CAA,SRV,TXT,TLSA,NS,DS|}",
            "    value: ${12:string}",
            "$0"
        ],
        "description": "Manage Netcup DNS records",
        "scope": "ansible"
    },
    "Notify New Relic about app deployments": {
        "prefix": [
            "community.general.newrelic_deployment",
            "newrelic_deployment Notify New Relic about app deployments"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.newrelic_deployment:",
            "    app_name: ${2:string}",
            "    application_id: ${3:string}",
            "    appname: ${4:string}",
            "    changelog: ${5:string}",
            "    description: ${6:string}",
            "    environment: ${7:string}",
            "    revision: ${8:string}",
            "    token: ${9:string}",
            "    user: ${10:string}",
            "    validate_certs: ${11|true,false|}",
            "$0"
        ],
        "description": "Notify New Relic about app deployments",
        "scope": "ansible"
    },
    "Send a SMS via nexmo": {
        "prefix": [
            "community.general.nexmo",
            "nexmo Send a SMS via nexmo"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.nexmo:",
            "    api_key: ${2:string}",
            "    api_secret: ${3:string}",
            "    client_cert: ${4:/tmp/test}",
            "    client_key: ${5:/tmp/test}",
            "    dest:",
            "      - ${6:element}",
            "    force: ${7|false,true|}",
            "    force_basic_auth: ${8|false,true|}",
            "    http_agent: ${9:ansible-httpget}",
            "    msg: ${10:string}",
            "    src: ${11:int}",
            "    url: ${12:string}",
            "    url_password: ${13:string}",
            "    url_username: ${14:string}",
            "    use_gssapi: ${15|false,true|}",
            "    use_proxy: ${16|true,false|}",
            "    validate_certs: ${17|true,false|}",
            "$0"
        ],
        "description": "Send a SMS via nexmo",
        "scope": "ansible"
    },
    "Retrieve information on nginx status": {
        "prefix": [
            "community.general.nginx_status_info",
            "nginx_status_info Retrieve information on nginx status"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.nginx_status_info:",
            "    timeout: ${2:10}",
            "    url: ${3:string}",
            "$0"
        ],
        "description": "Retrieve information on nginx status",
        "scope": "ansible"
    },
    "Manage nic tags on SmartOS systems": {
        "prefix": [
            "community.general.nictagadm",
            "nictagadm Manage nic tags on SmartOS systems"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.nictagadm:",
            "    etherstub: ${2|false,true|}",
            "    force: ${3|false,true|}",
            "    mac: ${4:string}",
            "    mtu: ${5:int}",
            "    name: ${6:string}",
            "    state: ${7|present,absent|}",
            "$0"
        ],
        "description": "Manage nic tags on SmartOS systems",
        "scope": "ansible"
    },
    "Manage Networking": {
        "prefix": [
            "community.general.nmcli",
            "nmcli Manage Networking"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.nmcli:",
            "    addr_gen_mode6: ${2|default,default-or-eui64,eui64,stable-privacy|}",
            "    ageingtime: ${3:300}",
            "    arp_interval: ${4:int}",
            "    arp_ip_target: ${5:string}",
            "    autoconnect: ${6|true,false|}",
            "    conn_name: ${7:string}",
            "    dhcp_client_id: ${8:string}",
            "    dns4:",
            "      - ${9:element}",
            "    dns4_ignore_auto: ${10|false,true|}",
            "    dns4_search:",
            "      - ${11:element}",
            "    dns6:",
            "      - ${12:element}",
            "    dns6_ignore_auto: ${13|false,true|}",
            "    dns6_search:",
            "      - ${14:element}",
            "    downdelay: ${15:int}",
            "    egress: ${16:string}",
            "    flags: ${17:string}",
            "    forwarddelay: ${18:15}",
            "    gw4: ${20:string}",
            "    gw4_ignore_auto: ${21|false,true|}",
            "    gw6: ${22:string}",
            "    gw6_ignore_auto: ${23|false,true|}",
            "    hairpin: ${24|false,true|}",
            "    hellotime: ${25:2}",
            "    ifname: ${26:string}",
            "    ignore_unsupported_suboptions: ${27|false,true|}",
            "    ingress: ${28:string}",
            "    ip4:",
            "      - ${29:element}",
            "    ip6:",
            "      - ${30:element}",
            "    ip_privacy6: ${31|disabled,prefer-public-addr,prefer-temp-addr,unknown|}",
            "    ip_tunnel_dev: ${32:string}",
            "    ip_tunnel_input_key: ${33:string}",
            "    ip_tunnel_local: ${34:string}",
            "    ip_tunnel_output_key: ${35:string}",
            "    ip_tunnel_remote: ${36:string}",
            "    mac: ${37:string}",
            "    master: ${38:string}",
            "    maxage: ${39:20}",
            "    may_fail4: ${40|true,false|}",
            "    method4: ${41|auto,link-local,manual,shared,disabled|}",
            "    method6: ${42|ignore,auto,dhcp,link-local,manual,shared,disabled|}",
            "    miimon: ${43:int}",
            "    mode: ${44|balance-rr,802.3ad,active-backup,balance-alb,balance-tlb,balance-xor,broadcast|}",
            "    mtu: ${45:int}",
            "    never_default4: ${46|false,true|}",
            "    path_cost: ${47:100}",
            "    primary: ${48:string}",
            "    priority: ${49:128}",
            "    route_metric4: ${50:int}",
            "    route_metric6: ${51:int}",
            "    routes4:",
            "      - ${52:element}",
            "    routes4_extended:",
            "      - ${53:element}",
            "    routes6:",
            "      - ${54:element}",
            "    routes6_extended:",
            "      - ${55:element}",
            "    routing_rules4:",
            "      - ${56:element}",
            "    runner: ${57|roundrobin,broadcast,activebackup,loadbalance,lacp|}",
            "    runner_fast_rate: ${58|false,true|}",
            "    runner_hwaddr_policy: ${59|same_all,by_active,only_active|}",
            "    slavepriority: ${60:32}",
            "    ssid: ${61:string}",
            "    state: ${62|absent,present|}",
            "    stp: ${63|true,false|}",
            "    transport_mode: ${64|datagram,connected|}",
            "    type: ${65|bond,bond-slave,bridge,bridge-slave,dummy,ethernet,generic,gre,infiniband,ipip,sit,team,team-slave,vlan,vxlan,wifi,gsm,wireguard,vpn|}",
            "    updelay: ${66:int}",
            "    vlandev: ${67:string}",
            "    vlanid: ${68:int}",
            "    vxlan_id: ${70:int}",
            "    vxlan_local: ${71:string}",
            "    vxlan_remote: ${72:string}",
            "    xmit_hash_policy: ${76:string}",
            "    zone: ${77:string}",
            "$0"
        ],
        "description": "Manage Networking",
        "scope": "ansible"
    },
    "Launch a Nomad Job": {
        "prefix": [
            "community.general.nomad_job",
            "nomad_job Launch a Nomad Job"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.nomad_job:",
            "    client_cert: ${2:/tmp/test}",
            "    client_key: ${3:/tmp/test}",
            "    content: ${4:string}",
            "    content_format: ${5|hcl,json|}",
            "    force_start: ${6|false,true|}",
            "    host: ${7:string}",
            "    name: ${8:string}",
            "    namespace: ${9:string}",
            "    state: ${10|present,absent|}",
            "    timeout: ${11:5}",
            "    token: ${12:string}",
            "    use_ssl: ${13|true,false|}",
            "    validate_certs: ${14|true,false|}",
            "$0"
        ],
        "description": "Launch a Nomad Job",
        "scope": "ansible"
    },
    "Get Nomad Jobs info": {
        "prefix": [
            "community.general.nomad_job_info",
            "nomad_job_info Get Nomad Jobs info"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.nomad_job_info:",
            "    client_cert: ${2:/tmp/test}",
            "    client_key: ${3:/tmp/test}",
            "    host: ${4:string}",
            "    name: ${5:string}",
            "    namespace: ${6:string}",
            "    timeout: ${7:5}",
            "    token: ${8:string}",
            "    use_ssl: ${9|true,false|}",
            "    validate_certs: ${10|true,false|}",
            "$0"
        ],
        "description": "Get Nomad Jobs info",
        "scope": "ansible"
    },
    "Manage services with nosh": {
        "prefix": [
            "community.general.nosh",
            "nosh Manage services with nosh"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.nosh:",
            "    enabled: ${2|false,true|}",
            "    name: ${3:string}",
            "    preset: ${4|false,true|}",
            "    state: ${5|started,stopped,reset,restarted,reloaded|}",
            "    user: ${6|false,true|}",
            "$0"
        ],
        "description": "Manage services with nosh",
        "scope": "ansible"
    },
    "Manage node.js packages with npm": {
        "prefix": [
            "community.general.npm",
            "npm Manage node.js packages with npm"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.npm:",
            "    ci: ${2|false,true|}",
            "    executable: ${3:/tmp/test}",
            "    global: ${4|false,true|}",
            "    ignore_scripts: ${5|false,true|}",
            "    name: ${6:string}",
            "    no_bin_links: ${7|false,true|}",
            "    no_optional: ${8|false,true|}",
            "    path: ${9:/tmp/test}",
            "    production: ${10|false,true|}",
            "    registry: ${11:string}",
            "    state: ${12|present,absent,latest|}",
            "    unsafe_perm: ${13|false,true|}",
            "    version: ${14:string}",
            "$0"
        ],
        "description": "Manage node.js packages with npm",
        "scope": "ansible"
    },
    "Manage DNS records": {
        "prefix": [
            "community.general.nsupdate",
            "nsupdate Manage DNS records"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.nsupdate:",
            "    key_algorithm: ${2|hmac-md5,HMAC-MD5.SIG-ALG.REG.INT,hmac-sha1,hmac-sha224,hmac-sha256,hmac-sha384,hmac-sha512|}",
            "    key_name: ${3:string}",
            "    key_secret: ${4:string}",
            "    port: ${5:53}",
            "    protocol: ${6|tcp,udp|}",
            "    record: ${7:string}",
            "    server: ${8:string}",
            "    state: ${9|present,absent|}",
            "    ttl: ${10:3600}",
            "    type: ${11:A}",
            "    value:",
            "      - ${12:element}",
            "    zone: ${13:string}",
            "$0"
        ],
        "description": "Manage DNS records",
        "scope": "ansible"
    },
    "Manages Out-Of-Band controllers using Open Composable API (OCAPI)": {
        "prefix": [
            "community.general.ocapi_info",
            "ocapi_info Manages Out-Of-Band controllers using Open Composable API (OCAPI)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ocapi_info:",
            "    baseuri: ${2:string}",
            "    category: ${3:string}",
            "    command: ${4:string}",
            "    job_name: ${5:string}",
            "    password: ${6:string}",
            "    proxy_slot_number: ${7:int}",
            "    timeout: ${8:10}",
            "    username: ${9:string}",
            "$0"
        ],
        "description": "Manages Out-Of-Band controllers using Open Composable API (OCAPI)",
        "scope": "ansible"
    },
    "Manage Virtual Cloud Networks(VCN) in OCI": {
        "prefix": [
            "community.general.oci_vcn",
            "oci_vcn Manage Virtual Cloud Networks(VCN) in OCI"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.oci_vcn:",
            "    api_user: ${2:string}",
            "    api_user_fingerprint: ${3:string}",
            "    api_user_key_file: ${4:/tmp/test}",
            "    api_user_key_pass_phrase: ${5:string}",
            "    auth_type: ${6|api_key,instance_principal|}",
            "    cidr_block: ${7:string}",
            "    compartment_id: ${8:string}",
            "    config_file_location: ${9:string}",
            "    config_profile_name: ${10:DEFAULT}",
            "    display_name: ${12:string}",
            "    dns_label: ${13:string}",
            "    force_create: ${14|false,true|}",
            "    key_by:",
            "      - ${16:element}",
            "    region: ${17:string}",
            "    state: ${18|present,absent|}",
            "    tenancy: ${19:string}",
            "    vcn_id: ${20:string}",
            "    wait: ${21|true,false|}",
            "    wait_timeout: ${22:1200}",
            "    wait_until: ${23:string}",
            "$0"
        ],
        "description": "Manage Virtual Cloud Networks(VCN) in OCI",
        "scope": "ansible"
    },
    "Execute SQL via ODBC": {
        "prefix": [
            "community.general.odbc",
            "odbc Execute SQL via ODBC"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.odbc:",
            "    commit: ${2|true,false|}",
            "    dsn: ${3:string}",
            "    params:",
            "      - ${4:element}",
            "    query: ${5:string}",
            "$0"
        ],
        "description": "Execute SQL via ODBC",
        "scope": "ansible"
    },
    "Use webhooks to create Connector Card messages within an Office 365 group": {
        "prefix": [
            "community.general.office_365_connector_card",
            "office_365_connector_card Use webhooks to create Connector Card messages within an Office 365 group"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.office_365_connector_card:",
            "    actions:",
            "      - ${2:element}",
            "    color: ${3:string}",
            "    sections:",
            "      - ${4:element}",
            "    summary: ${5:string}",
            "    text: ${6:string}",
            "    title: ${7:string}",
            "    webhook: ${8:string}",
            "$0"
        ],
        "description": "Use webhooks to create Connector Card messages within an Office 365 group",
        "scope": "ansible"
    },
    "Returns inventory data from I(Ohai)": {
        "prefix": [
            "community.general.ohai",
            "ohai Returns inventory data from I(Ohai)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ohai:",
            "$0"
        ],
        "description": "Returns inventory data from I(Ohai)",
        "scope": "ansible"
    },
    "Setup OMAPI hosts": {
        "prefix": [
            "community.general.omapi_host",
            "omapi_host Setup OMAPI hosts"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.omapi_host:",
            "    ddns: ${2|false,true|}",
            "    host: ${3:localhost}",
            "    hostname: ${4:string}",
            "    ip: ${5:string}",
            "    key: ${6:string}",
            "    key_name: ${7:string}",
            "    macaddr: ${8:string}",
            "    port: ${9:7911}",
            "    state: ${10|absent,present|}",
            "    statements:",
            "      - ${11:element}",
            "$0"
        ],
        "description": "Setup OMAPI hosts",
        "scope": "ansible"
    },
    "Manages OpenNebula Hosts": {
        "prefix": [
            "community.general.one_host",
            "one_host Manages OpenNebula Hosts"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.one_host:",
            "    api_password: ${2:string}",
            "    api_url: ${3:string}",
            "    api_username: ${4:string}",
            "    cluster_id: ${5:0}",
            "    cluster_name: ${6:string}",
            "    im_mad_name: ${7:kvm}",
            "    labels:",
            "      - ${8:element}",
            "    name: ${9:string}",
            "    state: ${10|present,absent,enabled,disabled,offline|}",
            "    validate_certs: ${12|true,false|}",
            "    vmm_mad_name: ${13:kvm}",
            "    wait_timeout: ${14:300}",
            "$0"
        ],
        "description": "Manages OpenNebula Hosts",
        "scope": "ansible"
    },
    "Manages OpenNebula images": {
        "prefix": [
            "community.general.one_image",
            "one_image Manages OpenNebula images"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.one_image:",
            "    api_password: ${2:string}",
            "    api_url: ${3:string}",
            "    api_username: ${4:string}",
            "    enabled: ${5|false,true|}",
            "    id: ${6:int}",
            "    name: ${7:string}",
            "    new_name: ${8:string}",
            "    state: ${9|present,absent,cloned,renamed|}",
            "$0"
        ],
        "description": "Manages OpenNebula images",
        "scope": "ansible"
    },
    "Gather information on OpenNebula images": {
        "prefix": [
            "community.general.one_image_info",
            "one_image_info Gather information on OpenNebula images"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.one_image_info:",
            "    api_password: ${2:string}",
            "    api_url: ${3:string}",
            "    api_username: ${4:string}",
            "    ids:",
            "      - ${5:element}",
            "    name: ${6:string}",
            "$0"
        ],
        "description": "Gather information on OpenNebula images",
        "scope": "ansible"
    },
    "Deploy and manage OpenNebula services": {
        "prefix": [
            "community.general.one_service",
            "one_service Deploy and manage OpenNebula services"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.one_service:",
            "    api_password: ${2:string}",
            "    api_url: ${3:string}",
            "    api_username: ${4:string}",
            "    cardinality: ${5:int}",
            "    force: ${7|false,true|}",
            "    group_id: ${8:int}",
            "    mode: ${9:string}",
            "    owner_id: ${10:int}",
            "    role: ${11:string}",
            "    service_id: ${12:int}",
            "    service_name: ${13:string}",
            "    state: ${14|present,absent|}",
            "    template_id: ${15:int}",
            "    template_name: ${16:string}",
            "    unique: ${17|false,true|}",
            "    wait: ${18|false,true|}",
            "    wait_timeout: ${19:300}",
            "$0"
        ],
        "description": "Deploy and manage OpenNebula services",
        "scope": "ansible"
    },
    "Manages OpenNebula templates": {
        "prefix": [
            "community.general.one_template",
            "one_template Manages OpenNebula templates"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.one_template:",
            "    api_password: ${2:string}",
            "    api_url: ${3:string}",
            "    api_username: ${4:string}",
            "    id: ${5:int}",
            "    name: ${6:string}",
            "    state: ${7|present,absent|}",
            "    template: ${8:string}",
            "    validate_certs: ${9|true,false|}",
            "    wait_timeout: ${10:300}",
            "$0"
        ],
        "description": "Manages OpenNebula templates",
        "scope": "ansible"
    },
    "Creates or terminates OpenNebula instances": {
        "prefix": [
            "community.general.one_vm",
            "one_vm Creates or terminates OpenNebula instances"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.one_vm:",
            "    api_password: ${2:string}",
            "    api_url: ${3:string}",
            "    api_username: ${4:string}",
            "    count: ${6:1}",
            "    count_labels:",
            "      - ${8:element}",
            "    datastore_id: ${10:int}",
            "    datastore_name: ${11:string}",
            "    disk_size:",
            "      - ${13:element}",
            "    exact_count: ${14:int}",
            "    group_id: ${15:int}",
            "    hard: ${16|false,true|}",
            "    instance_ids:",
            "      - ${17:element}",
            "    labels:",
            "      - ${18:element}",
            "    memory: ${19:string}",
            "    mode: ${20:string}",
            "    networks:",
            "      - ${21:element}",
            "    owner_id: ${22:int}",
            "    persistent: ${23|false,true|}",
            "    state: ${24|present,absent,running,rebooted,poweredoff|}",
            "    template_id: ${25:int}",
            "    template_name: ${26:string}",
            "    vcpu: ${28:int}",
            "    vm_start_on_hold: ${29|false,true|}",
            "    wait: ${30|true,false|}",
            "    wait_timeout: ${31:300}",
            "$0"
        ],
        "description": "Creates or terminates OpenNebula instances",
        "scope": "ansible"
    },
    "Configure 1&1 firewall policy": {
        "prefix": [
            "community.general.oneandone_firewall_policy",
            "oneandone_firewall_policy Configure 1&1 firewall policy"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.oneandone_firewall_policy:",
            "    add_rules:",
            "      - ${2:element}",
            "    add_server_ips:",
            "      - ${3:element}",
            "    api_url: ${4:string}",
            "    auth_token: ${5:string}",
            "    description: ${6:string}",
            "    firewall_policy: ${7:string}",
            "    name: ${8:string}",
            "    remove_rules:",
            "      - ${9:element}",
            "    remove_server_ips:",
            "      - ${10:element}",
            "    rules:",
            "      - ${11:element}",
            "    state: ${12|present,absent,update|}",
            "    wait: ${13|true,false|}",
            "    wait_interval: ${14:5}",
            "    wait_timeout: ${15:600}",
            "$0"
        ],
        "description": "Configure 1&1 firewall policy",
        "scope": "ansible"
    },
    "Configure 1&1 load balancer": {
        "prefix": [
            "community.general.oneandone_load_balancer",
            "oneandone_load_balancer Configure 1&1 load balancer"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.oneandone_load_balancer:",
            "    add_rules:",
            "      - ${2:element}",
            "    add_server_ips:",
            "      - ${3:element}",
            "    api_url: ${4:string}",
            "    auth_token: ${5:string}",
            "    datacenter: ${6|US,ES,DE,GB|}",
            "    description: ${7:string}",
            "    health_check_interval: ${8:string}",
            "    health_check_parse: ${9:string}",
            "    health_check_path: ${10:string}",
            "    health_check_test: ${11|NONE,TCP,HTTP,ICMP|}",
            "    load_balancer: ${12:string}",
            "    method: ${13|ROUND_ROBIN,LEAST_CONNECTIONS|}",
            "    name: ${14:string}",
            "    persistence: ${15|false,true|}",
            "    persistence_time: ${16:string}",
            "    remove_rules:",
            "      - ${17:element}",
            "    remove_server_ips:",
            "      - ${18:element}",
            "    rules:",
            "      - ${19:element}",
            "    state: ${20|present,absent,update|}",
            "    wait: ${21|true,false|}",
            "    wait_interval: ${22:5}",
            "    wait_timeout: ${23:600}",
            "$0"
        ],
        "description": "Configure 1&1 load balancer",
        "scope": "ansible"
    },
    "Configure 1&1 monitoring policy": {
        "prefix": [
            "community.general.oneandone_monitoring_policy",
            "oneandone_monitoring_policy Configure 1&1 monitoring policy"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.oneandone_monitoring_policy:",
            "    add_ports:",
            "      - ${2:element}",
            "    add_processes:",
            "      - ${3:element}",
            "    add_servers:",
            "      - ${4:element}",
            "    agent: ${5:string}",
            "    api_url: ${6:string}",
            "    auth_token: ${7:string}",
            "    description: ${8:string}",
            "    email: ${9:string}",
            "    monitoring_policy: ${10:string}",
            "    name: ${11:string}",
            "    ports:",
            "      - ${12:element}",
            "    processes:",
            "      - ${13:element}",
            "    remove_ports:",
            "      - ${14:element}",
            "    remove_processes:",
            "      - ${15:element}",
            "    remove_servers:",
            "      - ${16:element}",
            "    state: ${17|present,absent,update|}",
            "    thresholds:",
            "      - ${18:element}",
            "    update_ports:",
            "      - ${19:element}",
            "    update_processes:",
            "      - ${20:element}",
            "    wait: ${21|true,false|}",
            "    wait_interval: ${22:5}",
            "    wait_timeout: ${23:600}",
            "$0"
        ],
        "description": "Configure 1&1 monitoring policy",
        "scope": "ansible"
    },
    "Configure 1&1 private networking": {
        "prefix": [
            "community.general.oneandone_private_network",
            "oneandone_private_network Configure 1&1 private networking"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.oneandone_private_network:",
            "    add_members:",
            "      - ${2:element}",
            "    api_url: ${3:string}",
            "    auth_token: ${4:string}",
            "    datacenter: ${5|US,ES,DE,GB|}",
            "    description: ${6:string}",
            "    name: ${7:string}",
            "    network_address: ${8:string}",
            "    private_network: ${9:string}",
            "    remove_members:",
            "      - ${10:element}",
            "    state: ${11|present,absent,update|}",
            "    subnet_mask: ${12:string}",
            "    wait: ${13|true,false|}",
            "    wait_interval: ${14:5}",
            "    wait_timeout: ${15:600}",
            "$0"
        ],
        "description": "Configure 1&1 private networking",
        "scope": "ansible"
    },
    "Configure 1&1 public IPs": {
        "prefix": [
            "community.general.oneandone_public_ip",
            "oneandone_public_ip Configure 1&1 public IPs"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.oneandone_public_ip:",
            "    api_url: ${2:string}",
            "    auth_token: ${3:string}",
            "    datacenter: ${4|US,ES,DE,GB|}",
            "    public_ip_id: ${5:string}",
            "    reverse_dns: ${6:string}",
            "    state: ${7|present,absent,update|}",
            "    type: ${8|IPV4,IPV6|}",
            "    wait: ${9|true,false|}",
            "    wait_interval: ${10:5}",
            "    wait_timeout: ${11:600}",
            "$0"
        ],
        "description": "Configure 1&1 public IPs",
        "scope": "ansible"
    },
    "Create, destroy, start, stop, and reboot a 1&1 Host server": {
        "prefix": [
            "community.general.oneandone_server",
            "oneandone_server Create, destroy, start, stop, and reboot a 1&1 Host server"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.oneandone_server:",
            "    api_url: ${2:string}",
            "    appliance: ${3:string}",
            "    auth_token: ${4:string}",
            "    auto_increment: ${5|true,false|}",
            "    cores_per_processor: ${6:int}",
            "    count: ${7:1}",
            "    datacenter: ${8|US,ES,DE,GB|}",
            "    description: ${9:string}",
            "    firewall_policy: ${10:string}",
            "    fixed_instance_size: ${11:string}",
            "    hdds:",
            "      - ${12:element}",
            "    hostname: ${13:string}",
            "    load_balancer: ${14:string}",
            "    monitoring_policy: ${15:string}",
            "    private_network: ${16:string}",
            "    server: ${18:string}",
            "    server_type: ${19|cloud,baremetal,k8s_node|}",
            "    ssh_key: ${20:\"raw\"}",
            "    state: ${21|present,absent,running,stopped|}",
            "    vcore: ${22:int}",
            "    wait: ${23|true,false|}",
            "    wait_interval: ${24:5}",
            "    wait_timeout: ${25:600}",
            "$0"
        ],
        "description": "Create, destroy, start, stop, and reboot a 1&1 Host server",
        "scope": "ansible"
    },
    "Gather items from 1Password": {
        "prefix": [
            "community.general.onepassword_info",
            "onepassword_info Gather items from 1Password"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.onepassword_info:",
            "    cli_path: ${3:/tmp/test}",
            "    search_terms:",
            "      - ${4:element}",
            "$0"
        ],
        "description": "Gather items from 1Password",
        "scope": "ansible"
    },
    "Retrieve information about the OneView Data Centers": {
        "prefix": [
            "community.general.oneview_datacenter_info",
            "oneview_datacenter_info Retrieve information about the OneView Data Centers"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.oneview_datacenter_info:",
            "    api_version: ${2:int}",
            "    config: ${3:/tmp/test}",
            "    hostname: ${4:string}",
            "    image_streamer_hostname: ${5:string}",
            "    name: ${6:string}",
            "    options:",
            "      - ${7:element}",
            "    password: ${9:string}",
            "    username: ${10:string}",
            "$0"
        ],
        "description": "Retrieve information about the OneView Data Centers",
        "scope": "ansible"
    },
    "Retrieve information about one or more Enclosures": {
        "prefix": [
            "community.general.oneview_enclosure_info",
            "oneview_enclosure_info Retrieve information about one or more Enclosures"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.oneview_enclosure_info:",
            "    api_version: ${2:int}",
            "    config: ${3:/tmp/test}",
            "    hostname: ${4:string}",
            "    image_streamer_hostname: ${5:string}",
            "    name: ${6:string}",
            "    options:",
            "      - ${7:element}",
            "    password: ${9:string}",
            "    username: ${10:string}",
            "$0"
        ],
        "description": "Retrieve information about one or more Enclosures",
        "scope": "ansible"
    },
    "Manage OneView Ethernet Network resources": {
        "prefix": [
            "community.general.oneview_ethernet_network",
            "oneview_ethernet_network Manage OneView Ethernet Network resources"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.oneview_ethernet_network:",
            "    api_version: ${2:int}",
            "    config: ${3:/tmp/test}",
            "    hostname: ${5:string}",
            "    image_streamer_hostname: ${6:string}",
            "    password: ${7:string}",
            "    state: ${8|present,absent,default_bandwidth_reset|}",
            "    username: ${9:string}",
            "    validate_etag: ${10|true,false|}",
            "$0"
        ],
        "description": "Manage OneView Ethernet Network resources",
        "scope": "ansible"
    },
    "Retrieve the information about one or more of the OneView Ethernet Networks": {
        "prefix": [
            "community.general.oneview_ethernet_network_info",
            "oneview_ethernet_network_info Retrieve the information about one or more of the OneView Ethernet Networks"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.oneview_ethernet_network_info:",
            "    api_version: ${2:int}",
            "    config: ${3:/tmp/test}",
            "    hostname: ${4:string}",
            "    image_streamer_hostname: ${5:string}",
            "    name: ${6:string}",
            "    options:",
            "      - ${7:element}",
            "    password: ${9:string}",
            "    username: ${10:string}",
            "$0"
        ],
        "description": "Retrieve the information about one or more of the OneView Ethernet Networks",
        "scope": "ansible"
    },
    "Manage OneView Fibre Channel Network resources": {
        "prefix": [
            "community.general.oneview_fc_network",
            "oneview_fc_network Manage OneView Fibre Channel Network resources"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.oneview_fc_network:",
            "    api_version: ${2:int}",
            "    config: ${3:/tmp/test}",
            "    hostname: ${5:string}",
            "    image_streamer_hostname: ${6:string}",
            "    password: ${7:string}",
            "    state: ${8|present,absent|}",
            "    username: ${9:string}",
            "    validate_etag: ${10|true,false|}",
            "$0"
        ],
        "description": "Manage OneView Fibre Channel Network resources",
        "scope": "ansible"
    },
    "Retrieve the information about one or more of the OneView Fibre Channel Networks": {
        "prefix": [
            "community.general.oneview_fc_network_info",
            "oneview_fc_network_info Retrieve the information about one or more of the OneView Fibre Channel Networks"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.oneview_fc_network_info:",
            "    api_version: ${2:int}",
            "    config: ${3:/tmp/test}",
            "    hostname: ${4:string}",
            "    image_streamer_hostname: ${5:string}",
            "    name: ${6:string}",
            "    password: ${8:string}",
            "    username: ${9:string}",
            "$0"
        ],
        "description": "Retrieve the information about one or more of the OneView Fibre Channel Networks",
        "scope": "ansible"
    },
    "Manage OneView FCoE Network resources": {
        "prefix": [
            "community.general.oneview_fcoe_network",
            "oneview_fcoe_network Manage OneView FCoE Network resources"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.oneview_fcoe_network:",
            "    api_version: ${2:int}",
            "    config: ${3:/tmp/test}",
            "    hostname: ${5:string}",
            "    image_streamer_hostname: ${6:string}",
            "    password: ${7:string}",
            "    state: ${8|present,absent|}",
            "    username: ${9:string}",
            "    validate_etag: ${10|true,false|}",
            "$0"
        ],
        "description": "Manage OneView FCoE Network resources",
        "scope": "ansible"
    },
    "Retrieve the information about one or more of the OneView FCoE Networks": {
        "prefix": [
            "community.general.oneview_fcoe_network_info",
            "oneview_fcoe_network_info Retrieve the information about one or more of the OneView FCoE Networks"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.oneview_fcoe_network_info:",
            "    api_version: ${2:int}",
            "    config: ${3:/tmp/test}",
            "    hostname: ${4:string}",
            "    image_streamer_hostname: ${5:string}",
            "    name: ${6:string}",
            "    password: ${8:string}",
            "    username: ${9:string}",
            "$0"
        ],
        "description": "Retrieve the information about one or more of the OneView FCoE Networks",
        "scope": "ansible"
    },
    "Manage OneView Logical Interconnect Group resources": {
        "prefix": [
            "community.general.oneview_logical_interconnect_group",
            "oneview_logical_interconnect_group Manage OneView Logical Interconnect Group resources"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.oneview_logical_interconnect_group:",
            "    api_version: ${2:int}",
            "    config: ${3:/tmp/test}",
            "    hostname: ${5:string}",
            "    image_streamer_hostname: ${6:string}",
            "    password: ${7:string}",
            "    state: ${8|present,absent|}",
            "    username: ${9:string}",
            "    validate_etag: ${10|true,false|}",
            "$0"
        ],
        "description": "Manage OneView Logical Interconnect Group resources",
        "scope": "ansible"
    },
    "Retrieve information about one or more of the OneView Logical Interconnect Groups": {
        "prefix": [
            "community.general.oneview_logical_interconnect_group_info",
            "oneview_logical_interconnect_group_info Retrieve information about one or more of the OneView Logical Interconnect Groups"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.oneview_logical_interconnect_group_info:",
            "    api_version: ${2:int}",
            "    config: ${3:/tmp/test}",
            "    hostname: ${4:string}",
            "    image_streamer_hostname: ${5:string}",
            "    name: ${6:string}",
            "    password: ${8:string}",
            "    username: ${9:string}",
            "$0"
        ],
        "description": "Retrieve information about one or more of the OneView Logical Interconnect Groups",
        "scope": "ansible"
    },
    "Manage HPE OneView Network Set resources": {
        "prefix": [
            "community.general.oneview_network_set",
            "oneview_network_set Manage HPE OneView Network Set resources"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.oneview_network_set:",
            "    api_version: ${2:int}",
            "    config: ${3:/tmp/test}",
            "    hostname: ${5:string}",
            "    image_streamer_hostname: ${6:string}",
            "    password: ${7:string}",
            "    state: ${8|present,absent|}",
            "    username: ${9:string}",
            "    validate_etag: ${10|true,false|}",
            "$0"
        ],
        "description": "Manage HPE OneView Network Set resources",
        "scope": "ansible"
    },
    "Retrieve information about the OneView Network Sets": {
        "prefix": [
            "community.general.oneview_network_set_info",
            "oneview_network_set_info Retrieve information about the OneView Network Sets"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.oneview_network_set_info:",
            "    api_version: ${2:int}",
            "    config: ${3:/tmp/test}",
            "    hostname: ${4:string}",
            "    image_streamer_hostname: ${5:string}",
            "    name: ${6:string}",
            "    options:",
            "      - ${7:element}",
            "    password: ${9:string}",
            "    username: ${10:string}",
            "$0"
        ],
        "description": "Retrieve information about the OneView Network Sets",
        "scope": "ansible"
    },
    "Manage OneView SAN Manager resources": {
        "prefix": [
            "community.general.oneview_san_manager",
            "oneview_san_manager Manage OneView SAN Manager resources"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.oneview_san_manager:",
            "    api_version: ${2:int}",
            "    config: ${3:/tmp/test}",
            "    hostname: ${5:string}",
            "    image_streamer_hostname: ${6:string}",
            "    password: ${7:string}",
            "    state: ${8|present,absent,connection_information_set|}",
            "    username: ${9:string}",
            "    validate_etag: ${10|true,false|}",
            "$0"
        ],
        "description": "Manage OneView SAN Manager resources",
        "scope": "ansible"
    },
    "Retrieve information about one or more of the OneView SAN Managers": {
        "prefix": [
            "community.general.oneview_san_manager_info",
            "oneview_san_manager_info Retrieve information about one or more of the OneView SAN Managers"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.oneview_san_manager_info:",
            "    api_version: ${2:int}",
            "    config: ${3:/tmp/test}",
            "    hostname: ${4:string}",
            "    image_streamer_hostname: ${5:string}",
            "    password: ${7:string}",
            "    provider_display_name: ${8:string}",
            "    username: ${9:string}",
            "$0"
        ],
        "description": "Retrieve information about one or more of the OneView SAN Managers",
        "scope": "ansible"
    },
    "Gather information about Online servers": {
        "prefix": [
            "community.general.online_server_info",
            "online_server_info Gather information about Online servers"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.online_server_info:",
            "    api_timeout: ${2:30}",
            "    api_token: ${3:string}",
            "    api_url: ${4:https://api.online.net}",
            "    validate_certs: ${5|true,false|}",
            "$0"
        ],
        "description": "Gather information about Online servers",
        "scope": "ansible"
    },
    "Gather information about Online user": {
        "prefix": [
            "community.general.online_user_info",
            "online_user_info Gather information about Online user"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.online_user_info:",
            "    api_timeout: ${2:30}",
            "    api_token: ${3:string}",
            "    api_url: ${4:https://api.online.net}",
            "    validate_certs: ${5|true,false|}",
            "$0"
        ],
        "description": "Gather information about Online user",
        "scope": "ansible"
    },
    "Manage iSCSI targets with Open-iSCSI": {
        "prefix": [
            "community.general.open_iscsi",
            "open_iscsi Manage iSCSI targets with Open-iSCSI"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.open_iscsi:",
            "    auto_node_startup: ${2|false,true|}",
            "    auto_portal_startup: ${3|false,true|}",
            "    discover: ${4|false,true|}",
            "    login: ${5|false,true|}",
            "    node_auth: ${6:CHAP}",
            "    node_pass: ${7:string}",
            "    node_pass_in: ${8:string}",
            "    node_user: ${9:string}",
            "    node_user_in: ${10:string}",
            "    port: ${11:3260}",
            "    portal: ${12:string}",
            "    rescan: ${13|false,true|}",
            "    show_nodes: ${14|false,true|}",
            "    target: ${15:string}",
            "$0"
        ],
        "description": "Manage iSCSI targets with Open-iSCSI",
        "scope": "ansible"
    },
    "Manage packages on OpenBSD": {
        "prefix": [
            "community.general.openbsd_pkg",
            "openbsd_pkg Manage packages on OpenBSD"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.openbsd_pkg:",
            "    build: ${2|false,true|}",
            "    clean: ${3|false,true|}",
            "    name:",
            "      - ${4:element}",
            "    ports_dir: ${5:/tmp/test}",
            "    quick: ${6|false,true|}",
            "    snapshot: ${7|false,true|}",
            "    state: ${8|present,absent,latest,installed,removed|}",
            "$0"
        ],
        "description": "Manage packages on OpenBSD",
        "scope": "ansible"
    },
    "Will update the backend configuration of OpenDJ via the dsconfig set-backend-prop command": {
        "prefix": [
            "community.general.opendj_backendprop",
            "opendj_backendprop Will update the backend configuration of OpenDJ via the dsconfig set-backend-prop command"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.opendj_backendprop:",
            "    backend: ${2:string}",
            "    hostname: ${3:string}",
            "    name: ${4:string}",
            "    opendj_bindir: ${5:/tmp/test}",
            "    password: ${6:string}",
            "    passwordfile: ${7:/tmp/test}",
            "    port: ${8:string}",
            "    state: ${9:present}",
            "    username: ${10:cn=Directory Manager}",
            "    value: ${11:string}",
            "$0"
        ],
        "description": "Will update the backend configuration of OpenDJ via the dsconfig set-backend-prop command",
        "scope": "ansible"
    },
    "Manage services on OpenWrt": {
        "prefix": [
            "community.general.openwrt_init",
            "openwrt_init Manage services on OpenWrt"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.openwrt_init:",
            "    enabled: ${2|false,true|}",
            "    name: ${3:string}",
            "    pattern: ${4:string}",
            "    state: ${5|started,stopped,restarted,reloaded|}",
            "$0"
        ],
        "description": "Manage services on OpenWrt",
        "scope": "ansible"
    },
    "Package manager for OpenWrt and Openembedded/Yocto based Linux distributions": {
        "prefix": [
            "community.general.opkg",
            "opkg Package manager for OpenWrt and Openembedded/Yocto based Linux distributions"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.opkg:",
            "    force: ${2|,depends,maintainer,reinstall,overwrite,downgrade,space,postinstall,remove,checksum,removal-of-dependent-packages|}",
            "    name:",
            "      - ${3:element}",
            "    state: ${4|present,absent,installed,removed|}",
            "    update_cache: ${5|false,true|}",
            "$0"
        ],
        "description": "Package manager for OpenWrt and Openembedded/Yocto based Linux distributions",
        "scope": "ansible"
    },
    "Manage macOS user defaults": {
        "prefix": [
            "community.general.osx_defaults",
            "osx_defaults Manage macOS user defaults"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.osx_defaults:",
            "    array_add: ${2|false,true|}",
            "    domain: ${3:NSGlobalDomain}",
            "    host: ${4:string}",
            "    key: ${5:string}",
            "    path: ${6:/usr/bin:/usr/local/bin}",
            "    state: ${7|present,absent,list|}",
            "    type: ${8|string,array,bool,boolean,date,float,int,integer|}",
            "    value: ${9:\"raw\"}",
            "$0"
        ],
        "description": "Manage macOS user defaults",
        "scope": "ansible"
    },
    "Manage OVH IP failover address": {
        "prefix": [
            "community.general.ovh_ip_failover",
            "ovh_ip_failover Manage OVH IP failover address"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ovh_ip_failover:",
            "    application_key: ${2:string}",
            "    application_secret: ${3:string}",
            "    consumer_key: ${4:string}",
            "    endpoint: ${5:string}",
            "    name: ${6:string}",
            "    service: ${7:string}",
            "    timeout: ${8:120}",
            "    wait_completion: ${9|true,false|}",
            "    wait_task_completion: ${10:0}",
            "$0"
        ],
        "description": "Manage OVH IP failover address",
        "scope": "ansible"
    },
    "Manage OVH IP LoadBalancing backends": {
        "prefix": [
            "community.general.ovh_ip_loadbalancing_backend",
            "ovh_ip_loadbalancing_backend Manage OVH IP LoadBalancing backends"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ovh_ip_loadbalancing_backend:",
            "    application_key: ${2:string}",
            "    application_secret: ${3:string}",
            "    backend: ${4:string}",
            "    consumer_key: ${5:string}",
            "    endpoint: ${6:string}",
            "    name: ${7:string}",
            "    probe: ${8|none,http,icmp,oco|}",
            "    state: ${9|present,absent|}",
            "    timeout: ${10:120}",
            "    weight: ${11:8}",
            "$0"
        ],
        "description": "Manage OVH IP LoadBalancing backends",
        "scope": "ansible"
    },
    "Manage OVH monthly billing": {
        "prefix": [
            "community.general.ovh_monthly_billing",
            "ovh_monthly_billing Manage OVH monthly billing"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ovh_monthly_billing:",
            "    application_key: ${2:string}",
            "    application_secret: ${3:string}",
            "    consumer_key: ${4:string}",
            "    endpoint: ${5:string}",
            "    instance_id: ${6:string}",
            "    project_id: ${7:string}",
            "$0"
        ],
        "description": "Manage OVH monthly billing",
        "scope": "ansible"
    },
    "Manage pacemaker clusters": {
        "prefix": [
            "community.general.pacemaker_cluster",
            "pacemaker_cluster Manage pacemaker clusters"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.pacemaker_cluster:",
            "    force: ${2|true,false|}",
            "    node: ${3:string}",
            "    state: ${4|cleanup,offline,online,restart|}",
            "    timeout: ${5:300}",
            "$0"
        ],
        "description": "Manage pacemaker clusters",
        "scope": "ansible"
    },
    "Manage a bare metal server in the Packet Host": {
        "prefix": [
            "community.general.packet_device",
            "packet_device Manage a bare metal server in the Packet Host"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.packet_device:",
            "    always_pxe: ${2|false,true|}",
            "    auth_token: ${3:string}",
            "    count: ${4:1}",
            "    count_offset: ${5:1}",
            "    device_ids:",
            "      - ${6:element}",
            "    facility: ${7:string}",
            "    hostnames:",
            "      - ${9:element}",
            "    ipxe_script_url: ${10:}",
            "    locked: ${11|false,true|}",
            "    operating_system: ${12:string}",
            "    plan: ${13:string}",
            "    project_id: ${14:string}",
            "    state: ${15|present,absent,active,inactive,rebooted|}",
            "    tags:",
            "      - ${16:element}",
            "    user_data: ${17:string}",
            "    wait_for_public_IPv: ${18|4,6|}",
            "    wait_timeout: ${19:900}",
            "$0"
        ],
        "description": "Manage a bare metal server in the Packet Host",
        "scope": "ansible"
    },
    "Assign IP subnet to a bare metal server": {
        "prefix": [
            "community.general.packet_ip_subnet",
            "packet_ip_subnet Assign IP subnet to a bare metal server"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.packet_ip_subnet:",
            "    auth_token: ${2:string}",
            "    cidr: ${3:string}",
            "    device_count: ${4:100}",
            "    device_id: ${5:string}",
            "    hostname: ${6:string}",
            "    project_id: ${7:string}",
            "    state: ${8|present,absent|}",
            "$0"
        ],
        "description": "Assign IP subnet to a bare metal server",
        "scope": "ansible"
    },
    "Create/delete a project in Packet host": {
        "prefix": [
            "community.general.packet_project",
            "packet_project Create/delete a project in Packet host"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.packet_project:",
            "    auth_token: ${2:string}",
            "    custom_data: ${3:string}",
            "    id: ${4:string}",
            "    name: ${5:string}",
            "    org_id: ${6:string}",
            "    payment_method: ${7:string}",
            "    state: ${8|present,absent|}",
            "$0"
        ],
        "description": "Create/delete a project in Packet host",
        "scope": "ansible"
    },
    "Create/delete an SSH key in Packet host": {
        "prefix": [
            "community.general.packet_sshkey",
            "packet_sshkey Create/delete an SSH key in Packet host"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.packet_sshkey:",
            "    auth_token: ${2:string}",
            "    fingerprint: ${3:string}",
            "    id: ${4:string}",
            "    key: ${5:string}",
            "    key_file: ${6:/tmp/test}",
            "    label: ${7:string}",
            "    state: ${8|present,absent|}",
            "$0"
        ],
        "description": "Create/delete an SSH key in Packet host",
        "scope": "ansible"
    },
    "Create/delete a volume in Packet host": {
        "prefix": [
            "community.general.packet_volume",
            "packet_volume Create/delete a volume in Packet host"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.packet_volume:",
            "    auth_token: ${2:string}",
            "    billing_cycle: ${3|hourly,monthly|}",
            "    description: ${4:string}",
            "    facility: ${5:string}",
            "    id: ${6:string}",
            "    locked: ${7|false,true|}",
            "    name: ${8:string}",
            "    plan: ${9|storage_1,storage_2|}",
            "    project_id: ${10:string}",
            "    size: ${11:int}",
            "    state: ${13|present,absent|}",
            "$0"
        ],
        "description": "Create/delete a volume in Packet host",
        "scope": "ansible"
    },
    "Attach/detach a volume to a device in the Packet host": {
        "prefix": [
            "community.general.packet_volume_attachment",
            "packet_volume_attachment Attach/detach a volume to a device in the Packet host"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.packet_volume_attachment:",
            "    auth_token: ${2:string}",
            "    device: ${3:string}",
            "    project_id: ${4:string}",
            "    state: ${5|present,absent|}",
            "    volume: ${6:string}",
            "$0"
        ],
        "description": "Attach/detach a volume to a device in the Packet host",
        "scope": "ansible"
    },
    "Manage packages with I(pacman)": {
        "prefix": [
            "community.general.pacman",
            "pacman Manage packages with I(pacman)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.pacman:",
            "    executable: ${2:pacman}",
            "    extra_args: ${3:}",
            "    force: ${4|false,true|}",
            "    name:",
            "      - ${5:element}",
            "    reason: ${6|dependency,explicit|}",
            "    reason_for: ${7|new,all|}",
            "    remove_nosave: ${8|false,true|}",
            "    state: ${9|present,absent,installed,latest,removed|}",
            "    update_cache: ${10|false,true|}",
            "    update_cache_extra_args: ${11:}",
            "    upgrade: ${12|false,true|}",
            "    upgrade_extra_args: ${13:}",
            "$0"
        ],
        "description": "Manage packages with I(pacman)",
        "scope": "ansible"
    },
    "Manage pacman's list of trusted keys": {
        "prefix": [
            "community.general.pacman_key",
            "pacman_key Manage pacman's list of trusted keys"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.pacman_key:",
            "    data: ${2:string}",
            "    file: ${3:/tmp/test}",
            "    force_update: ${4|false,true|}",
            "    id: ${5:string}",
            "    keyring: ${6:/tmp/test}",
            "    keyserver: ${7:string}",
            "    state: ${8|present,absent|}",
            "    url: ${9:string}",
            "    verify: ${10|true,false|}",
            "$0"
        ],
        "description": "Manage pacman's list of trusted keys",
        "scope": "ansible"
    },
    "Create PagerDuty maintenance windows": {
        "prefix": [
            "community.general.pagerduty",
            "pagerduty Create PagerDuty maintenance windows"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.pagerduty:",
            "    desc: ${2:Created by Ansible}",
            "    hours: ${3:1}",
            "    minutes: ${4:0}",
            "    name: ${5:string}",
            "    requester_id: ${6:string}",
            "    service:",
            "      - ${7:element}",
            "    state: ${8|running,started,ongoing,absent|}",
            "    token: ${9:string}",
            "    user: ${10:string}",
            "    validate_certs: ${11|true,false|}",
            "    window_id: ${12:string}",
            "$0"
        ],
        "description": "Create PagerDuty maintenance windows",
        "scope": "ansible"
    },
    "Trigger, acknowledge or resolve PagerDuty incidents": {
        "prefix": [
            "community.general.pagerduty_alert",
            "pagerduty_alert Trigger, acknowledge or resolve PagerDuty incidents"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.pagerduty_alert:",
            "    api_key: ${2:string}",
            "    client: ${3:string}",
            "    client_url: ${4:string}",
            "    desc: ${5:Created via Ansible}",
            "    incident_key: ${6:string}",
            "    integration_key: ${7:string}",
            "    name: ${8:string}",
            "    service_id: ${9:string}",
            "    service_key: ${10:string}",
            "    state: ${11|triggered,acknowledged,resolved|}",
            "$0"
        ],
        "description": "Trigger, acknowledge or resolve PagerDuty incidents",
        "scope": "ansible"
    },
    "Track a code or infrastructure change as a PagerDuty change event": {
        "prefix": [
            "community.general.pagerduty_change",
            "pagerduty_change Track a code or infrastructure change as a PagerDuty change event"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.pagerduty_change:",
            "    environment: ${2:string}",
            "    integration_key: ${3:string}",
            "    link_text: ${4:string}",
            "    link_url: ${5:string}",
            "    repo: ${6:string}",
            "    revision: ${7:string}",
            "    source: ${8:Ansible}",
            "    summary: ${9:string}",
            "    url: ${10:https://events.pagerduty.com/v2/change/enqueue}",
            "    user: ${11:string}",
            "    validate_certs: ${12|true,false|}",
            "$0"
        ],
        "description": "Track a code or infrastructure change as a PagerDuty change event",
        "scope": "ansible"
    },
    "Manage a user account on PagerDuty": {
        "prefix": [
            "community.general.pagerduty_user",
            "pagerduty_user Manage a user account on PagerDuty"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.pagerduty_user:",
            "    access_token: ${2:string}",
            "    pd_email: ${3:string}",
            "    pd_role: ${4|responder,global_admin,manager,observer,stakeholder,limited_stakeholder,restricted_access|}",
            "    pd_teams:",
            "      - ${5:element}",
            "    pd_user: ${6:string}",
            "    state: ${7|present,absent|}",
            "$0"
        ],
        "description": "Manage a user account on PagerDuty",
        "scope": "ansible"
    },
    "Modify Linux PAM limits": {
        "prefix": [
            "community.general.pam_limits",
            "pam_limits Modify Linux PAM limits"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.pam_limits:",
            "    backup: ${2|false,true|}",
            "    comment: ${3:}",
            "    dest: ${4:/etc/security/limits.conf}",
            "    domain: ${5:string}",
            "    limit_item: ${6|core,data,fsize,memlock,nofile,rss,stack,cpu,nproc,as,maxlogins,maxsyslogins,priority,locks,sigpending,msgqueue,nice,rtprio,chroot|}",
            "    limit_type: ${7|hard,soft,-|}",
            "    use_max: ${8|false,true|}",
            "    use_min: ${9|false,true|}",
            "    value: ${10:string}",
            "$0"
        ],
        "description": "Modify Linux PAM limits",
        "scope": "ansible"
    },
    "Manage PAM Modules": {
        "prefix": [
            "community.general.pamd",
            "pamd Manage PAM Modules"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.pamd:",
            "    backup: ${2|false,true|}",
            "    control: ${3:string}",
            "    module_arguments:",
            "      - ${4:element}",
            "    module_path: ${5:string}",
            "    name: ${6:string}",
            "    new_control: ${7:string}",
            "    new_module_path: ${8:string}",
            "    new_type: ${9|account,-account,auth,-auth,password,-password,session,-session|}",
            "    path: ${10:/tmp/test}",
            "    state: ${11|updated,absent,before,after,args_absent,args_present|}",
            "    type: ${12|account,-account,auth,-auth,password,-password,session,-session|}",
            "$0"
        ],
        "description": "Manage PAM Modules",
        "scope": "ansible"
    },
    "Configure block device partitions": {
        "prefix": [
            "community.general.parted",
            "parted Configure block device partitions"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.parted:",
            "    align: ${2|optimal,cylinder,minimal,none,undefined|}",
            "    device: ${3:string}",
            "    flags:",
            "      - ${4:element}",
            "    fs_type: ${5:string}",
            "    label: ${6|msdos,aix,amiga,bsd,dvh,gpt,loop,mac,pc98,sun|}",
            "    name: ${7:string}",
            "    number: ${8:int}",
            "    part_end: ${9:100%}",
            "    part_start: ${10:0%}",
            "    part_type: ${11|primary,extended,logical|}",
            "    resize: ${12|false,true|}",
            "    state: ${13|info,absent,present|}",
            "    unit: ${14|KiB,s,B,KB,MB,MiB,GB,GiB,TB,TiB,%,cyl,chs,compact|}",
            "$0"
        ],
        "description": "Configure block device partitions",
        "scope": "ansible"
    },
    "Manage pear/pecl packages": {
        "prefix": [
            "community.general.pear",
            "pear Manage pear/pecl packages"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.pear:",
            "    executable: ${2:/tmp/test}",
            "    name: ${3:string}",
            "    prompts:",
            "      - ${4:element}",
            "    state: ${5|present,installed,latest,absent,removed|}",
            "$0"
        ],
        "description": "Manage pear/pecl packages",
        "scope": "ansible"
    },
    "Retrieves process IDs list if the process is running otherwise return empty list": {
        "prefix": [
            "community.general.pids",
            "pids Retrieves process IDs list if the process is running otherwise return empty list"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.pids:",
            "    ignore_case: ${2|false,true|}",
            "    name: ${3:string}",
            "    pattern: ${4:string}",
            "$0"
        ],
        "description": "Retrieves process IDs list if the process is running otherwise return empty list",
        "scope": "ansible"
    },
    "Pause/unpause Pingdom alerts": {
        "prefix": [
            "community.general.pingdom",
            "pingdom Pause/unpause Pingdom alerts"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.pingdom:",
            "    checkid: ${2:string}",
            "    key: ${3:string}",
            "    passwd: ${4:string}",
            "    state: ${5|running,paused,started,stopped|}",
            "    uid: ${6:string}",
            "$0"
        ],
        "description": "Pause/unpause Pingdom alerts",
        "scope": "ansible"
    },
    "Pip package information": {
        "prefix": [
            "community.general.pip_package_info",
            "pip_package_info Pip package information"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.pip_package_info:",
            "    clients:",
            "      - ${2:element}",
            "$0"
        ],
        "description": "Pip package information",
        "scope": "ansible"
    },
    "Manages applications installed with pipx": {
        "prefix": [
            "community.general.pipx",
            "pipx Manages applications installed with pipx"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.pipx:",
            "    editable: ${2|false,true|}",
            "    executable: ${3:/tmp/test}",
            "    force: ${4|false,true|}",
            "    include_injected: ${5|false,true|}",
            "    index_url: ${6:string}",
            "    inject_packages:",
            "      - ${7:element}",
            "    install_apps: ${8|false,true|}",
            "    install_deps: ${9|false,true|}",
            "    name: ${10:string}",
            "    pip_args: ${11:string}",
            "    python: ${12:string}",
            "    source: ${13:string}",
            "    state: ${14|install,present,absent,uninstall,uninstall_all,inject,upgrade,upgrade_all,reinstall,reinstall_all,latest|}",
            "$0"
        ],
        "description": "Manages applications installed with pipx",
        "scope": "ansible"
    },
    "Rretrieves information about applications installed with pipx": {
        "prefix": [
            "community.general.pipx_info",
            "pipx_info Rretrieves information about applications installed with pipx"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.pipx_info:",
            "    executable: ${2:/tmp/test}",
            "    include_deps: ${3|false,true|}",
            "    include_injected: ${4|false,true|}",
            "    include_raw: ${5|false,true|}",
            "    name: ${6:string}",
            "$0"
        ],
        "description": "Rretrieves information about applications installed with pipx",
        "scope": "ansible"
    },
    "Manages packages with the Solaris 11 Image Packaging System": {
        "prefix": [
            "community.general.pkg5",
            "pkg5 Manages packages with the Solaris 11 Image Packaging System"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.pkg5:",
            "    accept_licenses: ${2|false,true|}",
            "    be_name: ${3:string}",
            "    name:",
            "      - ${4:element}",
            "    refresh: ${5|true,false|}",
            "    state: ${6|present,absent,latest,installed,removed,uninstalled|}",
            "$0"
        ],
        "description": "Manages packages with the Solaris 11 Image Packaging System",
        "scope": "ansible"
    },
    "Manages Solaris 11 Image Packaging System publishers": {
        "prefix": [
            "community.general.pkg5_publisher",
            "pkg5_publisher Manages Solaris 11 Image Packaging System publishers"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.pkg5_publisher:",
            "    enabled: ${2|false,true|}",
            "    mirror:",
            "      - ${3:element}",
            "    name: ${4:string}",
            "    origin:",
            "      - ${5:element}",
            "    state: ${6|present,absent|}",
            "    sticky: ${7|false,true|}",
            "$0"
        ],
        "description": "Manages Solaris 11 Image Packaging System publishers",
        "scope": "ansible"
    },
    "Package manager for SmartOS, NetBSD, et al": {
        "prefix": [
            "community.general.pkgin",
            "pkgin Package manager for SmartOS, NetBSD, et al"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.pkgin:",
            "    clean: ${2|false,true|}",
            "    force: ${3|false,true|}",
            "    full_upgrade: ${4|false,true|}",
            "    name:",
            "      - ${5:element}",
            "    state: ${6|present,absent|}",
            "    update_cache: ${7|false,true|}",
            "    upgrade: ${8|false,true|}",
            "$0"
        ],
        "description": "Package manager for SmartOS, NetBSD, et al",
        "scope": "ansible"
    },
    "Package manager for FreeBSD >= 9.0": {
        "prefix": [
            "community.general.pkgng",
            "pkgng Package manager for FreeBSD >= 9.0"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.pkgng:",
            "    annotation:",
            "      - ${2:element}",
            "    autoremove: ${3|false,true|}",
            "    cached: ${4|false,true|}",
            "    chroot: ${5:/tmp/test}",
            "    ignore_osver: ${6|false,true|}",
            "    jail: ${7:string}",
            "    name:",
            "      - ${8:element}",
            "    pkgsite: ${9:string}",
            "    rootdir: ${10:/tmp/test}",
            "    state: ${11|present,latest,absent|}",
            "$0"
        ],
        "description": "Package manager for FreeBSD >= 9.0",
        "scope": "ansible"
    },
    "OpenCSW package management on Solaris": {
        "prefix": [
            "community.general.pkgutil",
            "pkgutil OpenCSW package management on Solaris"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.pkgutil:",
            "    force: ${2|false,true|}",
            "    name:",
            "      - ${3:element}",
            "    site: ${4:string}",
            "    state: ${5|absent,installed,latest,present,removed|}",
            "    update_catalog: ${6|false,true|}",
            "$0"
        ],
        "description": "OpenCSW package management on Solaris",
        "scope": "ansible"
    },
    "Configure Intel Optane Persistent Memory modules": {
        "prefix": [
            "community.general.pmem",
            "pmem Configure Intel Optane Persistent Memory modules"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.pmem:",
            "    appdirect: ${2:int}",
            "    appdirect_interleaved: ${3|true,false|}",
            "    memorymode: ${4:int}",
            "    namespace:",
            "      - ${5:element}",
            "    namespace_append: ${6|false,true|}",
            "    reserved: ${7:int}",
            "    socket:",
            "      - ${8:element}",
            "$0"
        ],
        "description": "Configure Intel Optane Persistent Memory modules",
        "scope": "ansible"
    },
    "Package manager for Gentoo": {
        "prefix": [
            "community.general.portage",
            "portage Package manager for Gentoo"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.portage:",
            "    backtrack: ${2:int}",
            "    changed_use: ${3|false,true|}",
            "    deep: ${4|false,true|}",
            "    depclean: ${5|false,true|}",
            "    getbinpkg: ${6|false,true|}",
            "    getbinpkgonly: ${7|false,true|}",
            "    jobs: ${8:int}",
            "    keepgoing: ${9|false,true|}",
            "    newuse: ${11|false,true|}",
            "    nodeps: ${12|false,true|}",
            "    noreplace: ${13|true,false|}",
            "    oneshot: ${14|false,true|}",
            "    onlydeps: ${15|false,true|}",
            "    package:",
            "      - ${16:element}",
            "    quiet: ${17|false,true|}",
            "    quietbuild: ${18|false,true|}",
            "    quietfail: ${19|false,true|}",
            "    state: ${20|present,installed,emerged,absent,removed,unmerged,latest|}",
            "    sync: ${21|web,yes,no|}",
            "    update: ${22|false,true|}",
            "    usepkg: ${23|false,true|}",
            "    usepkgonly: ${24|false,true|}",
            "    verbose: ${25|false,true|}",
            "    withbdeps: ${26|false,true|}",
            "$0"
        ],
        "description": "Package manager for Gentoo",
        "scope": "ansible"
    },
    "Installing packages from FreeBSD's ports system": {
        "prefix": [
            "community.general.portinstall",
            "portinstall Installing packages from FreeBSD's ports system"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.portinstall:",
            "    name: ${2:string}",
            "    state: ${3|present,absent|}",
            "    use_packages: ${4|true,false|}",
            "$0"
        ],
        "description": "Installing packages from FreeBSD's ports system",
        "scope": "ansible"
    },
    "Manages Pritunl Organizations using the Pritunl API": {
        "prefix": [
            "community.general.pritunl_org",
            "pritunl_org Manages Pritunl Organizations using the Pritunl API"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.pritunl_org:",
            "    force: ${2|false,true|}",
            "    name: ${3:string}",
            "    pritunl_api_secret: ${4:string}",
            "    pritunl_api_token: ${5:string}",
            "    pritunl_url: ${6:string}",
            "    state: ${7|present,absent|}",
            "    validate_certs: ${8|true,false|}",
            "$0"
        ],
        "description": "Manages Pritunl Organizations using the Pritunl API",
        "scope": "ansible"
    },
    "List Pritunl Organizations using the Pritunl API": {
        "prefix": [
            "community.general.pritunl_org_info",
            "pritunl_org_info List Pritunl Organizations using the Pritunl API"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.pritunl_org_info:",
            "    organization: ${2:None}",
            "    pritunl_api_secret: ${3:string}",
            "    pritunl_api_token: ${4:string}",
            "    pritunl_url: ${5:string}",
            "    validate_certs: ${6|true,false|}",
            "$0"
        ],
        "description": "List Pritunl Organizations using the Pritunl API",
        "scope": "ansible"
    },
    "Manage Pritunl Users using the Pritunl API": {
        "prefix": [
            "community.general.pritunl_user",
            "pritunl_user Manage Pritunl Users using the Pritunl API"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.pritunl_user:",
            "    organization: ${2:string}",
            "    pritunl_api_secret: ${3:string}",
            "    pritunl_api_token: ${4:string}",
            "    pritunl_url: ${5:string}",
            "    state: ${6|present,absent|}",
            "    user_disabled: ${7|false,true|}",
            "    user_email: ${8:None}",
            "    user_gravatar: ${9|false,true|}",
            "    user_groups:",
            "      - ${10:element}",
            "    user_mac_addresses:",
            "      - ${11:element}",
            "    user_name: ${12:None}",
            "    user_type: ${13|client,server|}",
            "    validate_certs: ${14|true,false|}",
            "$0"
        ],
        "description": "Manage Pritunl Users using the Pritunl API",
        "scope": "ansible"
    },
    "List Pritunl Users using the Pritunl API": {
        "prefix": [
            "community.general.pritunl_user_info",
            "pritunl_user_info List Pritunl Users using the Pritunl API"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.pritunl_user_info:",
            "    organization: ${2:string}",
            "    pritunl_api_secret: ${3:string}",
            "    pritunl_api_token: ${4:string}",
            "    pritunl_url: ${5:string}",
            "    user_name: ${6:string}",
            "    user_type: ${7|client,server|}",
            "    validate_certs: ${8|true,false|}",
            "$0"
        ],
        "description": "List Pritunl Users using the Pritunl API",
        "scope": "ansible"
    },
    "Create, destroy, start, stop, and reboot a ProfitBricks virtual machine": {
        "prefix": [
            "community.general.profitbricks",
            "profitbricks Create, destroy, start, stop, and reboot a ProfitBricks virtual machine"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.profitbricks:",
            "    assign_public_ip: ${2|false,true|}",
            "    auto_increment: ${3|true,false|}",
            "    bus: ${4|VIRTIO,IDE|}",
            "    cores: ${5:2}",
            "    count: ${6:1}",
            "    cpu_family: ${7|AMD_OPTERON,INTEL_XEON|}",
            "    datacenter: ${8:string}",
            "    disk_type: ${9|HDD,SSD|}",
            "    image: ${10:string}",
            "    image_password: ${11:string}",
            "    instance_ids:",
            "      - ${12:element}",
            "    lan: ${13:1}",
            "    location: ${14|us/las,de/fra,de/fkb|}",
            "    name: ${15:string}",
            "    ram: ${16:2048}",
            "    remove_boot_volume: ${17|true,false|}",
            "    ssh_keys:",
            "      - ${18:element}",
            "    state: ${19:present}",
            "    subscription_password: ${20:string}",
            "    subscription_user: ${21:string}",
            "    volume_size: ${22:10}",
            "    wait: ${23|true,false|}",
            "    wait_timeout: ${24:600}",
            "$0"
        ],
        "description": "Create, destroy, start, stop, and reboot a ProfitBricks virtual machine",
        "scope": "ansible"
    },
    "Create or destroy a ProfitBricks Virtual Datacenter": {
        "prefix": [
            "community.general.profitbricks_datacenter",
            "profitbricks_datacenter Create or destroy a ProfitBricks Virtual Datacenter"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.profitbricks_datacenter:",
            "    description: ${2:string}",
            "    location: ${3|us/las,de/fra,de/fkb|}",
            "    name: ${4:string}",
            "    state: ${5:present}",
            "    subscription_password: ${6:string}",
            "    subscription_user: ${7:string}",
            "    wait: ${8|true,false|}",
            "    wait_timeout: ${9:600}",
            "$0"
        ],
        "description": "Create or destroy a ProfitBricks Virtual Datacenter",
        "scope": "ansible"
    },
    "Create or Remove a NIC": {
        "prefix": [
            "community.general.profitbricks_nic",
            "profitbricks_nic Create or Remove a NIC"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.profitbricks_nic:",
            "    datacenter: ${2:string}",
            "    lan: ${3:string}",
            "    name: ${4:string}",
            "    server: ${5:string}",
            "    state: ${6:present}",
            "    subscription_password: ${7:string}",
            "    subscription_user: ${8:string}",
            "    wait: ${9|true,false|}",
            "    wait_timeout: ${10:600}",
            "$0"
        ],
        "description": "Create or Remove a NIC",
        "scope": "ansible"
    },
    "Create or destroy a volume": {
        "prefix": [
            "community.general.profitbricks_volume",
            "profitbricks_volume Create or destroy a volume"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.profitbricks_volume:",
            "    auto_increment: ${2|true,false|}",
            "    bus: ${3|VIRTIO,IDE|}",
            "    count: ${4:1}",
            "    datacenter: ${5:string}",
            "    disk_type: ${6|HDD,SSD|}",
            "    image: ${7:string}",
            "    image_password: ${8:string}",
            "    instance_ids:",
            "      - ${9:element}",
            "    licence_type: ${10:UNKNOWN}",
            "    name: ${11:string}",
            "    server: ${12:string}",
            "    size: ${13:10}",
            "    ssh_keys:",
            "      - ${14:element}",
            "    state: ${15:present}",
            "    subscription_password: ${16:string}",
            "    subscription_user: ${17:string}",
            "    wait: ${18|true,false|}",
            "    wait_timeout: ${19:600}",
            "$0"
        ],
        "description": "Create or destroy a volume",
        "scope": "ansible"
    },
    "Attach or detach a volume": {
        "prefix": [
            "community.general.profitbricks_volume_attachments",
            "profitbricks_volume_attachments Attach or detach a volume"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.profitbricks_volume_attachments:",
            "    datacenter: ${2:string}",
            "    server: ${3:string}",
            "    state: ${4:present}",
            "    subscription_password: ${5:string}",
            "    subscription_user: ${6:string}",
            "    volume: ${7:string}",
            "    wait: ${8|true,false|}",
            "    wait_timeout: ${9:600}",
            "$0"
        ],
        "description": "Attach or detach a volume",
        "scope": "ansible"
    },
    "Management of instances in Proxmox VE cluster": {
        "prefix": [
            "community.general.proxmox",
            "proxmox Management of instances in Proxmox VE cluster"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.proxmox:",
            "    api_host: ${2:string}",
            "    api_password: ${3:string}",
            "    api_token_id: ${4:string}",
            "    api_token_secret: ${5:string}",
            "    api_user: ${6:string}",
            "    clone: ${7:int}",
            "    clone_type: ${8|opportunistic,full,linked|}",
            "    cores: ${9:int}",
            "    cpus: ${10:int}",
            "    cpuunits: ${11:int}",
            "    description: ${12:string}",
            "    disk: ${13:string}",
            "    features:",
            "      - ${14:element}",
            "    force: ${15|false,true|}",
            "    hookscript: ${16:string}",
            "    hostname: ${17:string}",
            "    ip_address: ${18:string}",
            "    memory: ${19:int}",
            "    nameserver: ${21:string}",
            "    node: ${23:string}",
            "    onboot: ${24|false,true|}",
            "    ostemplate: ${25:string}",
            "    password: ${26:string}",
            "    pool: ${27:string}",
            "    proxmox_default_behavior: ${28|no_defaults,compatibility|}",
            "    pubkey: ${29:string}",
            "    purge: ${30|false,true|}",
            "    searchdomain: ${31:string}",
            "    state: ${32|present,started,absent,stopped,restarted|}",
            "    storage: ${33:local}",
            "    swap: ${34:int}",
            "    tags:",
            "      - ${35:element}",
            "    timeout: ${36:30}",
            "    unprivileged: ${37|false,true|}",
            "    validate_certs: ${38|false,true|}",
            "    vmid: ${39:int}",
            "$0"
        ],
        "description": "Management of instances in Proxmox VE cluster",
        "scope": "ansible"
    },
    "Management of a disk of a Qemu(KVM) VM in a Proxmox VE cluster": {
        "prefix": [
            "community.general.proxmox_disk",
            "proxmox_disk Management of a disk of a Qemu(KVM) VM in a Proxmox VE cluster"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.proxmox_disk:",
            "    aio: ${2|native,threads,io_uring|}",
            "    api_host: ${3:string}",
            "    api_password: ${4:string}",
            "    api_token_id: ${5:string}",
            "    api_token_secret: ${6:string}",
            "    api_user: ${7:string}",
            "    backup: ${8|false,true|}",
            "    bps_max_length: ${9:int}",
            "    bps_rd_max_length: ${10:int}",
            "    bps_wr_max_length: ${11:int}",
            "    bwlimit: ${12:int}",
            "    cache: ${13|none,writethrough,writeback,unsafe,directsync|}",
            "    create: ${14|regular,disabled,forced|}",
            "    cyls: ${15:int}",
            "    delete_moved: ${16|false,true|}",
            "    detect_zeroes: ${17|false,true|}",
            "    discard: ${18|ignore,on|}",
            "    disk: ${19:string}",
            "    format: ${20|raw,cow,qcow,qed,qcow2,vmdk,cloop|}",
            "    heads: ${21:int}",
            "    import_from: ${22:string}",
            "    iops: ${23:int}",
            "    iops_max: ${24:int}",
            "    iops_max_length: ${25:int}",
            "    iops_rd: ${26:int}",
            "    iops_rd_max: ${27:int}",
            "    iops_rd_max_length: ${28:int}",
            "    iops_wr: ${29:int}",
            "    iops_wr_max: ${30:int}",
            "    iops_wr_max_length: ${31:int}",
            "    iothread: ${32|false,true|}",
            "    media: ${39|cdrom,disk|}",
            "    name: ${40:string}",
            "    queues: ${41:int}",
            "    replicate: ${42|false,true|}",
            "    rerror: ${43|ignore,report,stop|}",
            "    ro: ${44|false,true|}",
            "    scsiblock: ${45|false,true|}",
            "    secs: ${46:int}",
            "    serial: ${47:string}",
            "    shared: ${48|false,true|}",
            "    size: ${49:string}",
            "    snapshot: ${50|false,true|}",
            "    ssd: ${51|false,true|}",
            "    state: ${52|present,resized,detached,moved,absent|}",
            "    storage: ${53:string}",
            "    target_disk: ${54:string}",
            "    target_storage: ${55:string}",
            "    target_vmid: ${56:int}",
            "    timeout: ${57:600}",
            "    trans: ${58|auto,lba,none|}",
            "    validate_certs: ${59|false,true|}",
            "    vmid: ${60:int}",
            "    werror: ${61|enospc,ignore,report,stop|}",
            "    wwn: ${62:string}",
            "$0"
        ],
        "description": "Management of a disk of a Qemu(KVM) VM in a Proxmox VE cluster",
        "scope": "ansible"
    },
    "Retrieve information about one or more Proxmox VE domains": {
        "prefix": [
            "community.general.proxmox_domain_info",
            "proxmox_domain_info Retrieve information about one or more Proxmox VE domains"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.proxmox_domain_info:",
            "    api_host: ${2:string}",
            "    api_password: ${3:string}",
            "    api_token_id: ${4:string}",
            "    api_token_secret: ${5:string}",
            "    api_user: ${6:string}",
            "    domain: ${7:string}",
            "    validate_certs: ${8|false,true|}",
            "$0"
        ],
        "description": "Retrieve information about one or more Proxmox VE domains",
        "scope": "ansible"
    },
    "Retrieve information about one or more Proxmox VE groups": {
        "prefix": [
            "community.general.proxmox_group_info",
            "proxmox_group_info Retrieve information about one or more Proxmox VE groups"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.proxmox_group_info:",
            "    api_host: ${2:string}",
            "    api_password: ${3:string}",
            "    api_token_id: ${4:string}",
            "    api_token_secret: ${5:string}",
            "    api_user: ${6:string}",
            "    group: ${7:string}",
            "    validate_certs: ${8|false,true|}",
            "$0"
        ],
        "description": "Retrieve information about one or more Proxmox VE groups",
        "scope": "ansible"
    },
    "Management of Qemu(KVM) Virtual Machines in Proxmox VE cluster": {
        "prefix": [
            "community.general.proxmox_kvm",
            "proxmox_kvm Management of Qemu(KVM) Virtual Machines in Proxmox VE cluster"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.proxmox_kvm:",
            "    acpi: ${2|false,true|}",
            "    agent: ${3:string}",
            "    api_host: ${4:string}",
            "    api_password: ${5:string}",
            "    api_token_id: ${6:string}",
            "    api_token_secret: ${7:string}",
            "    api_user: ${8:string}",
            "    archive: ${9:string}",
            "    args: ${10:string}",
            "    autostart: ${11|false,true|}",
            "    balloon: ${12:int}",
            "    bios: ${13|seabios,ovmf|}",
            "    boot: ${14:string}",
            "    bootdisk: ${15:string}",
            "    cicustom: ${16:string}",
            "    cipassword: ${17:string}",
            "    citype: ${18|nocloud,configdrive2|}",
            "    ciuser: ${19:string}",
            "    clone: ${20:string}",
            "    cores: ${21:int}",
            "    cpu: ${22:string}",
            "    cpulimit: ${23:int}",
            "    cpuunits: ${24:int}",
            "    delete: ${25:string}",
            "    description: ${26:string}",
            "    digest: ${27:string}",
            "    force: ${29|false,true|}",
            "    format: ${30|cloop,cow,qcow,qcow2,qed,raw,vmdk,unspecified|}",
            "    freeze: ${31|false,true|}",
            "    full: ${32|true,false|}",
            "    hotplug: ${34:string}",
            "    hugepages: ${35|any,2,1024|}",
            "    keyboard: ${38:string}",
            "    kvm: ${39|false,true|}",
            "    localtime: ${40|false,true|}",
            "    lock: ${41|migrate,backup,snapshot,rollback|}",
            "    machine: ${42:string}",
            "    memory: ${43:int}",
            "    migrate_downtime: ${44:int}",
            "    migrate_speed: ${45:int}",
            "    name: ${46:string}",
            "    nameservers:",
            "      - ${47:element}",
            "    newid: ${49:int}",
            "    node: ${50:string}",
            "    numa_enabled: ${52|false,true|}",
            "    onboot: ${53|false,true|}",
            "    ostype: ${54|other,wxp,w2k,w2k3,w2k8,wvista,win7,win8,win10,win11,l24,l26,solaris|}",
            "    pool: ${56:string}",
            "    protection: ${57|false,true|}",
            "    proxmox_default_behavior: ${58|no_defaults,compatibility|}",
            "    reboot: ${59|false,true|}",
            "    revert: ${60:string}",
            "    scsihw: ${63|lsi,lsi53c810,virtio-scsi-pci,virtio-scsi-single,megasas,pvscsi|}",
            "    searchdomains:",
            "      - ${64:element}",
            "    shares: ${66:int}",
            "    skiplock: ${67|false,true|}",
            "    smbios: ${68:string}",
            "    snapname: ${69:string}",
            "    sockets: ${70:int}",
            "    sshkeys: ${71:string}",
            "    startdate: ${72:string}",
            "    startup: ${73:string}",
            "    state: ${74|present,started,absent,stopped,restarted,current|}",
            "    storage: ${75:string}",
            "    tablet: ${76|false,true|}",
            "    tags:",
            "      - ${77:element}",
            "    target: ${78:string}",
            "    tdf: ${79|false,true|}",
            "    template: ${80|false,true|}",
            "    timeout: ${81:30}",
            "    update: ${82|false,true|}",
            "    validate_certs: ${83|false,true|}",
            "    vcpus: ${84:int}",
            "    vga: ${85|std,cirrus,vmware,qxl,serial0,serial1,serial2,serial3,qxl2,qxl3,qxl4|}",
            "    vmid: ${87:int}",
            "    watchdog: ${88:string}",
            "$0"
        ],
        "description": "Management of Qemu(KVM) Virtual Machines in Proxmox VE cluster",
        "scope": "ansible"
    },
    "Management of a NIC of a Qemu(KVM) VM in a Proxmox VE cluster": {
        "prefix": [
            "community.general.proxmox_nic",
            "proxmox_nic Management of a NIC of a Qemu(KVM) VM in a Proxmox VE cluster"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.proxmox_nic:",
            "    api_host: ${2:string}",
            "    api_password: ${3:string}",
            "    api_token_id: ${4:string}",
            "    api_token_secret: ${5:string}",
            "    api_user: ${6:string}",
            "    bridge: ${7:string}",
            "    firewall: ${8|false,true|}",
            "    interface: ${9:string}",
            "    link_down: ${10|false,true|}",
            "    mac: ${11:string}",
            "    model: ${12|virtio,e1000,e1000-82540em,e1000-82544gc,e1000-82545em,i82551,i82557b,i82559er,ne2k_isa,ne2k_pci,pcnet,rtl8139,vmxnet3|}",
            "    mtu: ${13:int}",
            "    name: ${14:string}",
            "    queues: ${15:int}",
            "    state: ${17|present,absent|}",
            "    tag: ${18:int}",
            "    trunks:",
            "      - ${19:element}",
            "    validate_certs: ${20|false,true|}",
            "    vmid: ${21:int}",
            "$0"
        ],
        "description": "Management of a NIC of a Qemu(KVM) VM in a Proxmox VE cluster",
        "scope": "ansible"
    },
    "Snapshot management of instances in Proxmox VE cluster": {
        "prefix": [
            "community.general.proxmox_snap",
            "proxmox_snap Snapshot management of instances in Proxmox VE cluster"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.proxmox_snap:",
            "    api_host: ${2:string}",
            "    api_password: ${3:string}",
            "    api_token_id: ${4:string}",
            "    api_token_secret: ${5:string}",
            "    api_user: ${6:string}",
            "    description: ${7:string}",
            "    force: ${8|false,true|}",
            "    hostname: ${9:string}",
            "    snapname: ${10:ansible_snap}",
            "    state: ${11|present,absent,rollback|}",
            "    timeout: ${12:30}",
            "    unbind: ${13|false,true|}",
            "    validate_certs: ${14|false,true|}",
            "    vmid: ${15:string}",
            "    vmstate: ${16|false,true|}",
            "$0"
        ],
        "description": "Snapshot management of instances in Proxmox VE cluster",
        "scope": "ansible"
    },
    "Retrieve information about one or more Proxmox VE storages": {
        "prefix": [
            "community.general.proxmox_storage_info",
            "proxmox_storage_info Retrieve information about one or more Proxmox VE storages"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.proxmox_storage_info:",
            "    api_host: ${2:string}",
            "    api_password: ${3:string}",
            "    api_token_id: ${4:string}",
            "    api_token_secret: ${5:string}",
            "    api_user: ${6:string}",
            "    storage: ${7:string}",
            "    type: ${8:string}",
            "    validate_certs: ${9|false,true|}",
            "$0"
        ],
        "description": "Retrieve information about one or more Proxmox VE storages",
        "scope": "ansible"
    },
    "Retrieve information about one or more Proxmox VE tasks": {
        "prefix": [
            "community.general.proxmox_tasks_info",
            "proxmox_tasks_info Retrieve information about one or more Proxmox VE tasks"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.proxmox_tasks_info:",
            "    api_host: ${2:string}",
            "    api_password: ${3:string}",
            "    api_token_id: ${4:string}",
            "    api_token_secret: ${5:string}",
            "    api_user: ${6:string}",
            "    node: ${7:string}",
            "    task: ${8:string}",
            "    validate_certs: ${9|false,true|}",
            "$0"
        ],
        "description": "Retrieve information about one or more Proxmox VE tasks",
        "scope": "ansible"
    },
    "Management of OS templates in Proxmox VE cluster": {
        "prefix": [
            "community.general.proxmox_template",
            "proxmox_template Management of OS templates in Proxmox VE cluster"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.proxmox_template:",
            "    api_host: ${2:string}",
            "    api_password: ${3:string}",
            "    api_token_id: ${4:string}",
            "    api_token_secret: ${5:string}",
            "    api_user: ${6:string}",
            "    content_type: ${7|vztmpl,iso|}",
            "    force: ${8|false,true|}",
            "    node: ${9:string}",
            "    src: ${10:/tmp/test}",
            "    state: ${11|present,absent|}",
            "    storage: ${12:local}",
            "    template: ${13:string}",
            "    timeout: ${14:30}",
            "    validate_certs: ${15|false,true|}",
            "$0"
        ],
        "description": "Management of OS templates in Proxmox VE cluster",
        "scope": "ansible"
    },
    "Retrieve information about one or more Proxmox VE users": {
        "prefix": [
            "community.general.proxmox_user_info",
            "proxmox_user_info Retrieve information about one or more Proxmox VE users"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.proxmox_user_info:",
            "    api_host: ${2:string}",
            "    api_password: ${3:string}",
            "    api_token_id: ${4:string}",
            "    api_token_secret: ${5:string}",
            "    api_user: ${6:string}",
            "    domain: ${7:string}",
            "    user: ${8:string}",
            "    userid: ${9:string}",
            "    validate_certs: ${10|false,true|}",
            "$0"
        ],
        "description": "Retrieve information about one or more Proxmox VE users",
        "scope": "ansible"
    },
    "PubNub blocks management module": {
        "prefix": [
            "community.general.pubnub_blocks",
            "pubnub_blocks PubNub blocks management module"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.pubnub_blocks:",
            "    account: ${2:}",
            "    application: ${3:string}",
            "    description: ${6:string}",
            "    email: ${7:}",
            "    event_handlers:",
            "      - ${8:element}",
            "    keyset: ${9:string}",
            "    name: ${10:string}",
            "    password: ${11:}",
            "    state: ${12|present,started,stopped,absent|}",
            "    validate_certs: ${13|true,false|}",
            "$0"
        ],
        "description": "PubNub blocks management module",
        "scope": "ansible"
    },
    "Add or remove Pulp repos from a remote host": {
        "prefix": [
            "community.general.pulp_repo",
            "pulp_repo Add or remove Pulp repos from a remote host"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.pulp_repo:",
            "    add_export_distributor: ${2|false,true|}",
            "    client_cert: ${3:/tmp/test}",
            "    client_key: ${4:/tmp/test}",
            "    feed: ${5:string}",
            "    feed_ca_cert: ${6:string}",
            "    feed_client_cert: ${7:string}",
            "    feed_client_key: ${8:string}",
            "    force: ${9|false,true|}",
            "    force_basic_auth: ${10|false,true|}",
            "    generate_sqlite: ${11|false,true|}",
            "    http_agent: ${12:ansible-httpget}",
            "    name: ${13:string}",
            "    proxy_host: ${14:None}",
            "    proxy_password: ${15:None}",
            "    proxy_port: ${16:None}",
            "    proxy_username: ${17:None}",
            "    publish_distributor: ${18:string}",
            "    pulp_host: ${19:https://127.0.0.1}",
            "    relative_url: ${20:string}",
            "    repo_type: ${21:rpm}",
            "    repoview: ${22|false,true|}",
            "    serve_http: ${23|false,true|}",
            "    serve_https: ${24|true,false|}",
            "    state: ${25|present,absent,sync,publish|}",
            "    url: ${26:string}",
            "    url_password: ${27:string}",
            "    url_username: ${28:string}",
            "    use_gssapi: ${29|false,true|}",
            "    use_proxy: ${30|true,false|}",
            "    validate_certs: ${31|true,false|}",
            "    wait_for_completion: ${32|false,true|}",
            "$0"
        ],
        "description": "Add or remove Pulp repos from a remote host",
        "scope": "ansible"
    },
    "Runs puppet": {
        "prefix": [
            "community.general.puppet",
            "puppet Runs puppet"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.puppet:",
            "    certname: ${2:string}",
            "    confdir: ${3:string}",
            "    debug: ${4|false,true|}",
            "    environment: ${5:string}",
            "    execute: ${6:string}",
            "    facter_basename: ${7:ansible}",
            "    logdest: ${9|stdout,all,syslog|}",
            "    manifest: ${10:string}",
            "    modulepath: ${11:string}",
            "    noop: ${12|false,true|}",
            "    puppetmaster: ${13:string}",
            "    show_diff: ${14|false,true|}",
            "    summarize: ${15|false,true|}",
            "    tags:",
            "      - ${16:element}",
            "    timeout: ${17:30m}",
            "    use_srv_records: ${18|false,true|}",
            "    verbose: ${19|false,true|}",
            "$0"
        ],
        "description": "Runs puppet",
        "scope": "ansible"
    },
    "Sends notifications to Pushbullet": {
        "prefix": [
            "community.general.pushbullet",
            "pushbullet Sends notifications to Pushbullet"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.pushbullet:",
            "    api_key: ${2:string}",
            "    body: ${3:string}",
            "    channel: ${4:string}",
            "    device: ${5:string}",
            "    push_type: ${6|note,link|}",
            "    title: ${7:string}",
            "    url: ${8:string}",
            "$0"
        ],
        "description": "Sends notifications to Pushbullet",
        "scope": "ansible"
    },
    "Send notifications via U(https://pushover.net)": {
        "prefix": [
            "community.general.pushover",
            "pushover Send notifications via U(https://pushover.net)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.pushover:",
            "    app_token: ${2:string}",
            "    device: ${3:string}",
            "    msg: ${4:string}",
            "    pri: ${5|0,-2,-1,1,2|}",
            "    title: ${6:string}",
            "    user_key: ${7:string}",
            "$0"
        ],
        "description": "Send notifications via U(https://pushover.net)",
        "scope": "ansible"
    },
    "Show python path and assert dependency versions": {
        "prefix": [
            "community.general.python_requirements_info",
            "python_requirements_info Show python path and assert dependency versions"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.python_requirements_info:",
            "    dependencies:",
            "      - ${2:element}",
            "$0"
        ],
        "description": "Show python path and assert dependency versions",
        "scope": "ansible"
    },
    "Create / delete an instance in Rackspace Public Cloud": {
        "prefix": [
            "community.general.rax",
            "rax Create / delete an instance in Rackspace Public Cloud"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rax:",
            "    api_key: ${2:string}",
            "    auth_endpoint: ${3:string}",
            "    auto_increment: ${4|true,false|}",
            "    boot_from_volume: ${5|false,true|}",
            "    boot_volume: ${6:string}",
            "    boot_volume_size: ${7:100}",
            "    boot_volume_terminate: ${8|false,true|}",
            "    config_drive: ${9|false,true|}",
            "    count: ${10:1}",
            "    count_offset: ${11:1}",
            "    credentials: ${12:/tmp/test}",
            "    disk_config: ${13|auto,manual|}",
            "    env: ${14:string}",
            "    exact_count: ${15|false,true|}",
            "    flavor: ${19:string}",
            "    group: ${20:string}",
            "    identity_type: ${21:rackspace}",
            "    image: ${22:string}",
            "    instance_ids:",
            "      - ${23:element}",
            "    key_name: ${24:string}",
            "    name: ${26:string}",
            "    networks:",
            "      - ${27:element}",
            "    region: ${28:string}",
            "    state: ${29|present,absent|}",
            "    tenant_id: ${30:string}",
            "    tenant_name: ${31:string}",
            "    user_data: ${32:string}",
            "    username: ${33:string}",
            "    validate_certs: ${34|false,true|}",
            "    wait: ${35|false,true|}",
            "    wait_timeout: ${36:300}",
            "$0"
        ],
        "description": "Create / delete an instance in Rackspace Public Cloud",
        "scope": "ansible"
    },
    "Manipulate Rackspace Cloud Block Storage Volumes": {
        "prefix": [
            "community.general.rax_cbs",
            "rax_cbs Manipulate Rackspace Cloud Block Storage Volumes"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rax_cbs:",
            "    api_key: ${2:string}",
            "    auth_endpoint: ${3:string}",
            "    credentials: ${4:/tmp/test}",
            "    description: ${5:string}",
            "    env: ${6:string}",
            "    identity_type: ${7:rackspace}",
            "    image: ${8:string}",
            "    name: ${10:string}",
            "    region: ${11:string}",
            "    size: ${12:100}",
            "    snapshot_id: ${13:string}",
            "    state: ${14|present,absent|}",
            "    tenant_id: ${15:string}",
            "    tenant_name: ${16:string}",
            "    username: ${17:string}",
            "    validate_certs: ${18|false,true|}",
            "    volume_type: ${19|SATA,SSD|}",
            "    wait: ${20|false,true|}",
            "    wait_timeout: ${21:300}",
            "$0"
        ],
        "description": "Manipulate Rackspace Cloud Block Storage Volumes",
        "scope": "ansible"
    },
    "Manipulate Rackspace Cloud Block Storage Volume Attachments": {
        "prefix": [
            "community.general.rax_cbs_attachments",
            "rax_cbs_attachments Manipulate Rackspace Cloud Block Storage Volume Attachments"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rax_cbs_attachments:",
            "    api_key: ${2:string}",
            "    auth_endpoint: ${3:string}",
            "    credentials: ${4:/tmp/test}",
            "    device: ${5:string}",
            "    env: ${6:string}",
            "    identity_type: ${7:rackspace}",
            "    region: ${8:string}",
            "    server: ${9:string}",
            "    state: ${10|present,absent|}",
            "    tenant_id: ${11:string}",
            "    tenant_name: ${12:string}",
            "    username: ${13:string}",
            "    validate_certs: ${14|false,true|}",
            "    volume: ${15:string}",
            "    wait: ${16|false,true|}",
            "    wait_timeout: ${17:300}",
            "$0"
        ],
        "description": "Manipulate Rackspace Cloud Block Storage Volume Attachments",
        "scope": "ansible"
    },
    "Create/delete or resize a Rackspace Cloud Databases instance": {
        "prefix": [
            "community.general.rax_cdb",
            "rax_cdb Create/delete or resize a Rackspace Cloud Databases instance"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rax_cdb:",
            "    api_key: ${2:string}",
            "    auth_endpoint: ${3:string}",
            "    cdb_type: ${4:MySQL}",
            "    cdb_version: ${5:5.6}",
            "    credentials: ${6:/tmp/test}",
            "    env: ${7:string}",
            "    flavor: ${8:1}",
            "    identity_type: ${9:rackspace}",
            "    name: ${10:string}",
            "    region: ${11:string}",
            "    state: ${12|present,absent|}",
            "    tenant_id: ${13:string}",
            "    tenant_name: ${14:string}",
            "    username: ${15:string}",
            "    validate_certs: ${16|false,true|}",
            "    volume: ${17:2}",
            "    wait: ${18|false,true|}",
            "    wait_timeout: ${19:300}",
            "$0"
        ],
        "description": "Create/delete or resize a Rackspace Cloud Databases instance",
        "scope": "ansible"
    },
    "Create / delete a database in the Cloud Databases": {
        "prefix": [
            "community.general.rax_cdb_database",
            "rax_cdb_database Create / delete a database in the Cloud Databases"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rax_cdb_database:",
            "    api_key: ${2:string}",
            "    auth_endpoint: ${3:string}",
            "    cdb_id: ${4:string}",
            "    character_set: ${5:utf8}",
            "    collate: ${6:utf8_general_ci}",
            "    credentials: ${7:/tmp/test}",
            "    env: ${8:string}",
            "    identity_type: ${9:rackspace}",
            "    name: ${10:string}",
            "    region: ${11:string}",
            "    state: ${12|present,absent|}",
            "    tenant_id: ${13:string}",
            "    tenant_name: ${14:string}",
            "    username: ${15:string}",
            "    validate_certs: ${16|false,true|}",
            "$0"
        ],
        "description": "Create / delete a database in the Cloud Databases",
        "scope": "ansible"
    },
    "Create / delete a Rackspace Cloud Database": {
        "prefix": [
            "community.general.rax_cdb_user",
            "rax_cdb_user Create / delete a Rackspace Cloud Database"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rax_cdb_user:",
            "    api_key: ${2:string}",
            "    auth_endpoint: ${3:string}",
            "    cdb_id: ${4:string}",
            "    credentials: ${5:/tmp/test}",
            "    databases:",
            "      - ${6:element}",
            "    db_password: ${7:string}",
            "    db_username: ${8:string}",
            "    env: ${9:string}",
            "    host: ${10:%}",
            "    identity_type: ${11:rackspace}",
            "    region: ${12:string}",
            "    state: ${13|present,absent|}",
            "    tenant_id: ${14:string}",
            "    tenant_name: ${15:string}",
            "    username: ${16:string}",
            "    validate_certs: ${17|false,true|}",
            "$0"
        ],
        "description": "Create / delete a Rackspace Cloud Database",
        "scope": "ansible"
    },
    "Create / delete a load balancer in Rackspace Public Cloud": {
        "prefix": [
            "community.general.rax_clb",
            "rax_clb Create / delete a load balancer in Rackspace Public Cloud"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rax_clb:",
            "    algorithm: ${2|LEAST_CONNECTIONS,RANDOM,ROUND_ROBIN,WEIGHTED_LEAST_CONNECTIONS,WEIGHTED_ROUND_ROBIN|}",
            "    api_key: ${3:string}",
            "    auth_endpoint: ${4:string}",
            "    credentials: ${5:/tmp/test}",
            "    env: ${6:string}",
            "    identity_type: ${7:rackspace}",
            "    name: ${9:string}",
            "    port: ${10:80}",
            "    protocol: ${11|HTTP,DNS_TCP,DNS_UDP,FTP,HTTPS,IMAPS,IMAPv4,LDAP,LDAPS,MYSQL,POP3,POP3S,SMTP,TCP,TCP_CLIENT_FIRST,UDP,UDP_STREAM,SFTP|}",
            "    region: ${12:string}",
            "    state: ${13|present,absent|}",
            "    tenant_id: ${14:string}",
            "    tenant_name: ${15:string}",
            "    timeout: ${16:30}",
            "    type: ${17|PUBLIC,SERVICENET|}",
            "    username: ${18:string}",
            "    validate_certs: ${19|false,true|}",
            "    vip_id: ${20:string}",
            "    wait: ${21|false,true|}",
            "    wait_timeout: ${22:300}",
            "$0"
        ],
        "description": "Create / delete a load balancer in Rackspace Public Cloud",
        "scope": "ansible"
    },
    "Add, modify and remove nodes from a Rackspace Cloud Load Balancer": {
        "prefix": [
            "community.general.rax_clb_nodes",
            "rax_clb_nodes Add, modify and remove nodes from a Rackspace Cloud Load Balancer"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rax_clb_nodes:",
            "    address: ${2:string}",
            "    api_key: ${3:string}",
            "    auth_endpoint: ${4:string}",
            "    condition: ${5|enabled,disabled,draining|}",
            "    credentials: ${6:/tmp/test}",
            "    env: ${7:string}",
            "    identity_type: ${8:rackspace}",
            "    load_balancer_id: ${9:int}",
            "    node_id: ${10:int}",
            "    port: ${11:int}",
            "    region: ${12:string}",
            "    state: ${13|present,absent|}",
            "    tenant_id: ${14:string}",
            "    tenant_name: ${15:string}",
            "    type: ${16|primary,secondary|}",
            "    username: ${17:string}",
            "    validate_certs: ${18|false,true|}",
            "    virtualenv: ${19:/tmp/test}",
            "    wait: ${20|false,true|}",
            "    wait_timeout: ${21:30}",
            "    weight: ${22:int}",
            "$0"
        ],
        "description": "Add, modify and remove nodes from a Rackspace Cloud Load Balancer",
        "scope": "ansible"
    },
    "Manage SSL termination for a Rackspace Cloud Load Balancer": {
        "prefix": [
            "community.general.rax_clb_ssl",
            "rax_clb_ssl Manage SSL termination for a Rackspace Cloud Load Balancer"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rax_clb_ssl:",
            "    api_key: ${2:string}",
            "    auth_endpoint: ${3:string}",
            "    certificate: ${4:string}",
            "    credentials: ${5:/tmp/test}",
            "    enabled: ${6|true,false|}",
            "    env: ${7:string}",
            "    https_redirect: ${8|false,true|}",
            "    identity_type: ${9:rackspace}",
            "    intermediate_certificate: ${10:string}",
            "    loadbalancer: ${11:string}",
            "    private_key: ${12:string}",
            "    region: ${13:string}",
            "    secure_port: ${14:443}",
            "    secure_traffic_only: ${15|false,true|}",
            "    state: ${16|present,absent|}",
            "    tenant_id: ${17:string}",
            "    tenant_name: ${18:string}",
            "    username: ${19:string}",
            "    validate_certs: ${20|false,true|}",
            "    wait: ${21|false,true|}",
            "    wait_timeout: ${22:300}",
            "$0"
        ],
        "description": "Manage SSL termination for a Rackspace Cloud Load Balancer",
        "scope": "ansible"
    },
    "Manage domains on Rackspace Cloud DNS": {
        "prefix": [
            "community.general.rax_dns",
            "rax_dns Manage domains on Rackspace Cloud DNS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rax_dns:",
            "    api_key: ${2:string}",
            "    auth_endpoint: ${3:string}",
            "    comment: ${4:string}",
            "    credentials: ${5:/tmp/test}",
            "    email: ${6:string}",
            "    env: ${7:string}",
            "    identity_type: ${8:rackspace}",
            "    name: ${9:string}",
            "    region: ${10:string}",
            "    state: ${11|present,absent|}",
            "    tenant_id: ${12:string}",
            "    tenant_name: ${13:string}",
            "    ttl: ${14:3600}",
            "    username: ${15:string}",
            "    validate_certs: ${16|false,true|}",
            "$0"
        ],
        "description": "Manage domains on Rackspace Cloud DNS",
        "scope": "ansible"
    },
    "Manage DNS records on Rackspace Cloud DNS": {
        "prefix": [
            "community.general.rax_dns_record",
            "rax_dns_record Manage DNS records on Rackspace Cloud DNS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rax_dns_record:",
            "    api_key: ${2:string}",
            "    auth_endpoint: ${3:string}",
            "    comment: ${4:string}",
            "    credentials: ${5:/tmp/test}",
            "    data: ${6:string}",
            "    domain: ${7:string}",
            "    env: ${8:string}",
            "    identity_type: ${9:rackspace}",
            "    loadbalancer: ${10:string}",
            "    name: ${11:string}",
            "    overwrite: ${12|true,false|}",
            "    priority: ${13:int}",
            "    region: ${14:string}",
            "    server: ${15:string}",
            "    state: ${16|present,absent|}",
            "    tenant_id: ${17:string}",
            "    tenant_name: ${18:string}",
            "    ttl: ${19:3600}",
            "    type: ${20|A,AAAA,CNAME,MX,NS,SRV,TXT,PTR|}",
            "    username: ${21:string}",
            "    validate_certs: ${22|false,true|}",
            "$0"
        ],
        "description": "Manage DNS records on Rackspace Cloud DNS",
        "scope": "ansible"
    },
    "Gather facts for Rackspace Cloud Servers": {
        "prefix": [
            "community.general.rax_facts",
            "rax_facts Gather facts for Rackspace Cloud Servers"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rax_facts:",
            "    address: ${2:string}",
            "    api_key: ${3:string}",
            "    auth_endpoint: ${4:string}",
            "    credentials: ${5:/tmp/test}",
            "    env: ${6:string}",
            "    id: ${7:string}",
            "    identity_type: ${8:rackspace}",
            "    name: ${9:string}",
            "    region: ${10:string}",
            "    tenant_id: ${11:string}",
            "    tenant_name: ${12:string}",
            "    username: ${13:string}",
            "    validate_certs: ${14|false,true|}",
            "$0"
        ],
        "description": "Gather facts for Rackspace Cloud Servers",
        "scope": "ansible"
    },
    "Manipulate Rackspace Cloud Files Containers": {
        "prefix": [
            "community.general.rax_files",
            "rax_files Manipulate Rackspace Cloud Files Containers"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rax_files:",
            "    api_key: ${2:string}",
            "    auth_endpoint: ${3:string}",
            "    clear_meta: ${4|false,true|}",
            "    container: ${5:string}",
            "    credentials: ${6:/tmp/test}",
            "    env: ${7:string}",
            "    identity_type: ${8:rackspace}",
            "    private: ${10|false,true|}",
            "    public: ${11|false,true|}",
            "    region: ${12:string}",
            "    state: ${13|present,absent,list|}",
            "    tenant_id: ${14:string}",
            "    tenant_name: ${15:string}",
            "    ttl: ${16:int}",
            "    type: ${17|container,meta|}",
            "    username: ${18:string}",
            "    validate_certs: ${19|false,true|}",
            "    web_error: ${20:string}",
            "    web_index: ${21:string}",
            "$0"
        ],
        "description": "Manipulate Rackspace Cloud Files Containers",
        "scope": "ansible"
    },
    "Upload, download, and delete objects in Rackspace Cloud Files": {
        "prefix": [
            "community.general.rax_files_objects",
            "rax_files_objects Upload, download, and delete objects in Rackspace Cloud Files"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rax_files_objects:",
            "    api_key: ${2:string}",
            "    auth_endpoint: ${3:string}",
            "    clear_meta: ${4|false,true|}",
            "    container: ${5:string}",
            "    credentials: ${6:/tmp/test}",
            "    dest: ${7:string}",
            "    env: ${8:string}",
            "    expires: ${9:int}",
            "    identity_type: ${10:rackspace}",
            "    method: ${12|get,put,delete|}",
            "    region: ${13:string}",
            "    src: ${14:string}",
            "    structure: ${15|true,false|}",
            "    tenant_id: ${16:string}",
            "    tenant_name: ${17:string}",
            "    type: ${18|file,meta|}",
            "    username: ${19:string}",
            "    validate_certs: ${20|false,true|}",
            "$0"
        ],
        "description": "Upload, download, and delete objects in Rackspace Cloud Files",
        "scope": "ansible"
    },
    "Load Rackspace Cloud Identity": {
        "prefix": [
            "community.general.rax_identity",
            "rax_identity Load Rackspace Cloud Identity"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rax_identity:",
            "    api_key: ${2:string}",
            "    auth_endpoint: ${3:string}",
            "    credentials: ${4:/tmp/test}",
            "    env: ${5:string}",
            "    identity_type: ${6:rackspace}",
            "    region: ${7:string}",
            "    state: ${8|present|}",
            "    tenant_id: ${9:string}",
            "    tenant_name: ${10:string}",
            "    username: ${11:string}",
            "    validate_certs: ${12|false,true|}",
            "$0"
        ],
        "description": "Load Rackspace Cloud Identity",
        "scope": "ansible"
    },
    "Create a keypair for use with Rackspace Cloud Servers": {
        "prefix": [
            "community.general.rax_keypair",
            "rax_keypair Create a keypair for use with Rackspace Cloud Servers"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rax_keypair:",
            "    api_key: ${2:string}",
            "    auth_endpoint: ${3:string}",
            "    credentials: ${4:/tmp/test}",
            "    env: ${5:string}",
            "    identity_type: ${6:rackspace}",
            "    name: ${7:string}",
            "    public_key: ${8:string}",
            "    region: ${9:string}",
            "    state: ${10|present,absent|}",
            "    tenant_id: ${11:string}",
            "    tenant_name: ${12:string}",
            "    username: ${13:string}",
            "    validate_certs: ${14|false,true|}",
            "$0"
        ],
        "description": "Create a keypair for use with Rackspace Cloud Servers",
        "scope": "ansible"
    },
    "Manipulate metadata for Rackspace Cloud Servers": {
        "prefix": [
            "community.general.rax_meta",
            "rax_meta Manipulate metadata for Rackspace Cloud Servers"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rax_meta:",
            "    address: ${2:string}",
            "    api_key: ${3:string}",
            "    auth_endpoint: ${4:string}",
            "    credentials: ${5:/tmp/test}",
            "    env: ${6:string}",
            "    id: ${7:string}",
            "    identity_type: ${8:rackspace}",
            "    name: ${10:string}",
            "    region: ${11:string}",
            "    tenant_id: ${12:string}",
            "    tenant_name: ${13:string}",
            "    username: ${14:string}",
            "    validate_certs: ${15|false,true|}",
            "$0"
        ],
        "description": "Manipulate metadata for Rackspace Cloud Servers",
        "scope": "ansible"
    },
    "Create or delete a Rackspace Cloud Monitoring alarm": {
        "prefix": [
            "community.general.rax_mon_alarm",
            "rax_mon_alarm Create or delete a Rackspace Cloud Monitoring alarm"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rax_mon_alarm:",
            "    api_key: ${2:string}",
            "    auth_endpoint: ${3:string}",
            "    check_id: ${4:string}",
            "    credentials: ${5:/tmp/test}",
            "    criteria: ${6:string}",
            "    disabled: ${7|false,true|}",
            "    entity_id: ${8:string}",
            "    env: ${9:string}",
            "    identity_type: ${10:rackspace}",
            "    label: ${11:string}",
            "    notification_plan_id: ${13:string}",
            "    region: ${14:string}",
            "    state: ${15|present,absent|}",
            "    tenant_id: ${16:string}",
            "    tenant_name: ${17:string}",
            "    username: ${18:string}",
            "    validate_certs: ${19|false,true|}",
            "$0"
        ],
        "description": "Create or delete a Rackspace Cloud Monitoring alarm",
        "scope": "ansible"
    },
    "Create or delete a Rackspace Cloud Monitoring check for an existing entity.": {
        "prefix": [
            "community.general.rax_mon_check",
            "rax_mon_check Create or delete a Rackspace Cloud Monitoring check for an existing entity."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rax_mon_check:",
            "    api_key: ${2:string}",
            "    auth_endpoint: ${3:string}",
            "    check_type: ${4:string}",
            "    credentials: ${5:/tmp/test}",
            "    disabled: ${7|false,true|}",
            "    entity_id: ${8:string}",
            "    env: ${9:string}",
            "    identity_type: ${10:rackspace}",
            "    label: ${11:string}",
            "    monitoring_zones_poll: ${13:string}",
            "    period: ${14:int}",
            "    region: ${15:string}",
            "    state: ${16|present,absent|}",
            "    target_alias: ${17:string}",
            "    target_hostname: ${18:string}",
            "    tenant_id: ${19:string}",
            "    tenant_name: ${20:string}",
            "    timeout: ${21:int}",
            "    username: ${22:string}",
            "    validate_certs: ${23|false,true|}",
            "$0"
        ],
        "description": "Create or delete a Rackspace Cloud Monitoring check for an existing entity.",
        "scope": "ansible"
    },
    "Create or delete a Rackspace Cloud Monitoring entity": {
        "prefix": [
            "community.general.rax_mon_entity",
            "rax_mon_entity Create or delete a Rackspace Cloud Monitoring entity"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rax_mon_entity:",
            "    agent_id: ${2:string}",
            "    api_key: ${3:string}",
            "    auth_endpoint: ${4:string}",
            "    credentials: ${5:/tmp/test}",
            "    env: ${6:string}",
            "    identity_type: ${7:rackspace}",
            "    label: ${8:string}",
            "    region: ${11:string}",
            "    state: ${12|present,absent|}",
            "    tenant_id: ${13:string}",
            "    tenant_name: ${14:string}",
            "    username: ${15:string}",
            "    validate_certs: ${16|false,true|}",
            "$0"
        ],
        "description": "Create or delete a Rackspace Cloud Monitoring entity",
        "scope": "ansible"
    },
    "Create or delete a Rackspace Cloud Monitoring notification": {
        "prefix": [
            "community.general.rax_mon_notification",
            "rax_mon_notification Create or delete a Rackspace Cloud Monitoring notification"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rax_mon_notification:",
            "    api_key: ${2:string}",
            "    auth_endpoint: ${3:string}",
            "    credentials: ${4:/tmp/test}",
            "    env: ${6:string}",
            "    identity_type: ${7:rackspace}",
            "    label: ${8:string}",
            "    notification_type: ${9|webhook,email,pagerduty|}",
            "    region: ${10:string}",
            "    state: ${11|present,absent|}",
            "    tenant_id: ${12:string}",
            "    tenant_name: ${13:string}",
            "    username: ${14:string}",
            "    validate_certs: ${15|false,true|}",
            "$0"
        ],
        "description": "Create or delete a Rackspace Cloud Monitoring notification",
        "scope": "ansible"
    },
    "Create or delete a Rackspace Cloud Monitoring notification plan.": {
        "prefix": [
            "community.general.rax_mon_notification_plan",
            "rax_mon_notification_plan Create or delete a Rackspace Cloud Monitoring notification plan."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rax_mon_notification_plan:",
            "    api_key: ${2:string}",
            "    auth_endpoint: ${3:string}",
            "    credentials: ${4:/tmp/test}",
            "    critical_state:",
            "      - ${5:element}",
            "    env: ${6:string}",
            "    identity_type: ${7:rackspace}",
            "    label: ${8:string}",
            "    ok_state:",
            "      - ${9:element}",
            "    region: ${10:string}",
            "    state: ${11|present,absent|}",
            "    tenant_id: ${12:string}",
            "    tenant_name: ${13:string}",
            "    username: ${14:string}",
            "    validate_certs: ${15|false,true|}",
            "    warning_state:",
            "      - ${16:element}",
            "$0"
        ],
        "description": "Create or delete a Rackspace Cloud Monitoring notification plan.",
        "scope": "ansible"
    },
    "Create / delete an isolated network in Rackspace Public Cloud": {
        "prefix": [
            "community.general.rax_network",
            "rax_network Create / delete an isolated network in Rackspace Public Cloud"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rax_network:",
            "    api_key: ${2:string}",
            "    auth_endpoint: ${3:string}",
            "    cidr: ${4:string}",
            "    credentials: ${5:/tmp/test}",
            "    env: ${6:string}",
            "    identity_type: ${7:rackspace}",
            "    label: ${8:string}",
            "    region: ${9:string}",
            "    state: ${10|present,absent|}",
            "    tenant_id: ${11:string}",
            "    tenant_name: ${12:string}",
            "    username: ${13:string}",
            "    validate_certs: ${14|false,true|}",
            "$0"
        ],
        "description": "Create / delete an isolated network in Rackspace Public Cloud",
        "scope": "ansible"
    },
    "Create / delete a queue in Rackspace Public Cloud": {
        "prefix": [
            "community.general.rax_queue",
            "rax_queue Create / delete a queue in Rackspace Public Cloud"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rax_queue:",
            "    api_key: ${2:string}",
            "    auth_endpoint: ${3:string}",
            "    credentials: ${4:/tmp/test}",
            "    env: ${5:string}",
            "    identity_type: ${6:rackspace}",
            "    name: ${7:string}",
            "    region: ${8:string}",
            "    state: ${9|present,absent|}",
            "    tenant_id: ${10:string}",
            "    tenant_name: ${11:string}",
            "    username: ${12:string}",
            "    validate_certs: ${13|false,true|}",
            "$0"
        ],
        "description": "Create / delete a queue in Rackspace Public Cloud",
        "scope": "ansible"
    },
    "Manipulate Rackspace Cloud Autoscale Groups": {
        "prefix": [
            "community.general.rax_scaling_group",
            "rax_scaling_group Manipulate Rackspace Cloud Autoscale Groups"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rax_scaling_group:",
            "    api_key: ${2:string}",
            "    auth_endpoint: ${3:string}",
            "    config_drive: ${4|false,true|}",
            "    cooldown: ${5:300}",
            "    credentials: ${6:/tmp/test}",
            "    disk_config: ${7|auto,manual|}",
            "    env: ${8:string}",
            "    flavor: ${10:string}",
            "    identity_type: ${11:rackspace}",
            "    image: ${12:string}",
            "    key_name: ${13:string}",
            "    loadbalancers:",
            "      - ${14:element}",
            "    max_entities: ${15:int}",
            "    min_entities: ${17:int}",
            "    name: ${18:string}",
            "    networks:",
            "      - ${19:element}",
            "    region: ${20:string}",
            "    server_name: ${21:string}",
            "    state: ${22|present,absent|}",
            "    tenant_id: ${23:string}",
            "    tenant_name: ${24:string}",
            "    user_data: ${25:string}",
            "    username: ${26:string}",
            "    validate_certs: ${27|false,true|}",
            "    wait: ${28|false,true|}",
            "    wait_timeout: ${29:300}",
            "$0"
        ],
        "description": "Manipulate Rackspace Cloud Autoscale Groups",
        "scope": "ansible"
    },
    "Manipulate Rackspace Cloud Autoscale Scaling Policy": {
        "prefix": [
            "community.general.rax_scaling_policy",
            "rax_scaling_policy Manipulate Rackspace Cloud Autoscale Scaling Policy"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rax_scaling_policy:",
            "    api_key: ${2:string}",
            "    at: ${3:string}",
            "    auth_endpoint: ${4:string}",
            "    change: ${5:int}",
            "    cooldown: ${6:300}",
            "    credentials: ${7:/tmp/test}",
            "    cron: ${8:string}",
            "    desired_capacity: ${9:int}",
            "    env: ${10:string}",
            "    identity_type: ${11:rackspace}",
            "    is_percent: ${12|false,true|}",
            "    name: ${13:string}",
            "    policy_type: ${14|webhook,schedule|}",
            "    region: ${15:string}",
            "    scaling_group: ${16:string}",
            "    state: ${17|present,absent|}",
            "    tenant_id: ${18:string}",
            "    tenant_name: ${19:string}",
            "    username: ${20:string}",
            "    validate_certs: ${21|false,true|}",
            "$0"
        ],
        "description": "Manipulate Rackspace Cloud Autoscale Scaling Policy",
        "scope": "ansible"
    },
    "Read a CSV file": {
        "prefix": [
            "community.general.read_csv",
            "read_csv Read a CSV file"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.read_csv:",
            "    delimiter: ${2:string}",
            "    dialect: ${3:excel}",
            "    fieldnames:",
            "      - ${4:element}",
            "    key: ${5:string}",
            "    path: ${6:/tmp/test}",
            "    skipinitialspace: ${7|false,true|}",
            "    strict: ${8|false,true|}",
            "    unique: ${9|true,false|}",
            "$0"
        ],
        "description": "Read a CSV file",
        "scope": "ansible"
    },
    "Manages Out-Of-Band controllers using Redfish APIs": {
        "prefix": [
            "community.general.redfish_info",
            "redfish_info Manages Out-Of-Band controllers using Redfish APIs"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.redfish_info:",
            "    auth_token: ${2:string}",
            "    baseuri: ${3:string}",
            "    category:",
            "      - ${4:element}",
            "    command:",
            "      - ${5:element}",
            "    password: ${6:string}",
            "    timeout: ${7:10}",
            "    update_handle: ${8:string}",
            "    username: ${9:string}",
            "$0"
        ],
        "description": "Manages Out-Of-Band controllers using Redfish APIs",
        "scope": "ansible"
    },
    "Manage registration and subscriptions to RHSM using C(subscription-manager)": {
        "prefix": [
            "community.general.redhat_subscription",
            "redhat_subscription Manage registration and subscriptions to RHSM using C(subscription-manager)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.redhat_subscription:",
            "    activationkey: ${2:string}",
            "    auto_attach: ${3|false,true|}",
            "    consumer_id: ${4:string}",
            "    consumer_name: ${5:string}",
            "    consumer_type: ${6:string}",
            "    environment: ${7:string}",
            "    force_register: ${8|false,true|}",
            "    org_id: ${9:string}",
            "    password: ${10:string}",
            "    pool: ${11:^}",
            "    pool_ids:",
            "      - ${12:element}",
            "    release: ${13:string}",
            "    rhsm_baseurl: ${14:string}",
            "    rhsm_repo_ca_cert: ${15:string}",
            "    server_hostname: ${16:string}",
            "    server_insecure: ${17:string}",
            "    server_port: ${18:string}",
            "    server_prefix: ${19:string}",
            "    server_proxy_hostname: ${20:string}",
            "    server_proxy_password: ${21:string}",
            "    server_proxy_port: ${22:string}",
            "    server_proxy_scheme: ${23:string}",
            "    server_proxy_user: ${24:string}",
            "    state: ${25|present,absent|}",
            "    token: ${27:string}",
            "    username: ${28:string}",
            "$0"
        ],
        "description": "Manage registration and subscriptions to RHSM using C(subscription-manager)",
        "scope": "ansible"
    },
    "Various redis commands, replica and flush": {
        "prefix": [
            "community.general.redis",
            "redis Various redis commands, replica and flush"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.redis:",
            "    ca_certs: ${2:string}",
            "    command: ${3|config,flush,replica,slave|}",
            "    db: ${4:int}",
            "    flush_mode: ${5|all,db|}",
            "    login_host: ${6:localhost}",
            "    login_password: ${7:string}",
            "    login_port: ${8:6379}",
            "    login_user: ${9:string}",
            "    master_host: ${10:string}",
            "    master_port: ${11:int}",
            "    name: ${12:string}",
            "    replica_mode: ${13|replica,master,slave|}",
            "    tls: ${14|false,true|}",
            "    validate_certs: ${15|true,false|}",
            "    value: ${16:string}",
            "$0"
        ],
        "description": "Various redis commands, replica and flush",
        "scope": "ansible"
    },
    "Set key value pairs in Redis": {
        "prefix": [
            "community.general.redis_data",
            "redis_data Set key value pairs in Redis"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.redis_data:",
            "    ca_certs: ${2:string}",
            "    existing: ${3|false,true|}",
            "    expiration: ${4:int}",
            "    keep_ttl: ${5|false,true|}",
            "    key: ${6:string}",
            "    login_host: ${7:localhost}",
            "    login_password: ${8:string}",
            "    login_port: ${9:6379}",
            "    login_user: ${10:string}",
            "    non_existing: ${11|false,true|}",
            "    state: ${12|present,absent|}",
            "    tls: ${13|true,false|}",
            "    validate_certs: ${14|true,false|}",
            "    value: ${15:string}",
            "$0"
        ],
        "description": "Set key value pairs in Redis",
        "scope": "ansible"
    },
    "Increment keys in Redis": {
        "prefix": [
            "community.general.redis_data_incr",
            "redis_data_incr Increment keys in Redis"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.redis_data_incr:",
            "    ca_certs: ${2:string}",
            "    increment_int: ${4:int}",
            "    key: ${5:string}",
            "    login_host: ${6:localhost}",
            "    login_password: ${7:string}",
            "    login_port: ${8:6379}",
            "    login_user: ${9:string}",
            "    tls: ${10|true,false|}",
            "    validate_certs: ${11|true,false|}",
            "$0"
        ],
        "description": "Increment keys in Redis",
        "scope": "ansible"
    },
    "Get value of key in Redis database": {
        "prefix": [
            "community.general.redis_data_info",
            "redis_data_info Get value of key in Redis database"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.redis_data_info:",
            "    ca_certs: ${2:string}",
            "    key: ${3:string}",
            "    login_host: ${4:localhost}",
            "    login_password: ${5:string}",
            "    login_port: ${6:6379}",
            "    login_user: ${7:string}",
            "    tls: ${8|true,false|}",
            "    validate_certs: ${9|true,false|}",
            "$0"
        ],
        "description": "Get value of key in Redis database",
        "scope": "ansible"
    },
    "Gather information about Redis servers": {
        "prefix": [
            "community.general.redis_info",
            "redis_info Gather information about Redis servers"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.redis_info:",
            "    login_host: ${2:localhost}",
            "    login_password: ${3:string}",
            "    login_port: ${4:6379}",
            "$0"
        ],
        "description": "Gather information about Redis servers",
        "scope": "ansible"
    },
    "RHEV/oVirt automation": {
        "prefix": [
            "community.general.rhevm",
            "rhevm RHEV/oVirt automation"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rhevm:",
            "    boot_order:",
            "      - ${2:element}",
            "    cd_drive: ${3:string}",
            "    cluster: ${4:}",
            "    cpu_share: ${5:0}",
            "    datacenter: ${6:Default}",
            "    del_prot: ${7|true,false|}",
            "    disks:",
            "      - ${8:element}",
            "    ifaces:",
            "      - ${9:element}",
            "    image: ${10:string}",
            "    insecure_api: ${11|false,true|}",
            "    mempol: ${12:1}",
            "    name: ${13:string}",
            "    osver: ${14:rhel_6x64}",
            "    password: ${15:string}",
            "    port: ${16:443}",
            "    server: ${17:127.0.0.1}",
            "    state: ${18|present,absent,cd,down,info,ping,restarted,up|}",
            "    timeout: ${19:int}",
            "    type: ${20|server,desktop,host|}",
            "    user: ${21:admin@internal}",
            "    vm_ha: ${22|true,false|}",
            "    vmcpu: ${23:2}",
            "    vmhost: ${24:string}",
            "    vmmem: ${25:1}",
            "$0"
        ],
        "description": "RHEV/oVirt automation",
        "scope": "ansible"
    },
    "Adds or removes Red Hat software channels": {
        "prefix": [
            "community.general.rhn_channel",
            "rhn_channel Adds or removes Red Hat software channels"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rhn_channel:",
            "    name: ${2:string}",
            "    password: ${3:string}",
            "    state: ${4|present,absent|}",
            "    sysname: ${5:string}",
            "    url: ${6:string}",
            "    user: ${7:string}",
            "    validate_certs: ${8|true,false|}",
            "$0"
        ],
        "description": "Adds or removes Red Hat software channels",
        "scope": "ansible"
    },
    "Manage Red Hat Network registration using the C(rhnreg_ks) command": {
        "prefix": [
            "community.general.rhn_register",
            "rhn_register Manage Red Hat Network registration using the C(rhnreg_ks) command"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rhn_register:",
            "    activationkey: ${2:string}",
            "    ca_cert: ${3:/tmp/test}",
            "    channels:",
            "      - ${4:element}",
            "    enable_eus: ${5|false,true|}",
            "    force: ${6|false,true|}",
            "    nopackages: ${7|false,true|}",
            "    password: ${8:string}",
            "    profilename: ${9:string}",
            "    server_url: ${10:string}",
            "    state: ${11|present,absent|}",
            "    systemorgid: ${12:string}",
            "    username: ${13:string}",
            "$0"
        ],
        "description": "Manage Red Hat Network registration using the C(rhnreg_ks) command",
        "scope": "ansible"
    },
    "Set or Unset RHSM Release version": {
        "prefix": [
            "community.general.rhsm_release",
            "rhsm_release Set or Unset RHSM Release version"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rhsm_release:",
            "    release: ${2:string}",
            "$0"
        ],
        "description": "Set or Unset RHSM Release version",
        "scope": "ansible"
    },
    "Manage RHSM repositories using the subscription-manager command": {
        "prefix": [
            "community.general.rhsm_repository",
            "rhsm_repository Manage RHSM repositories using the subscription-manager command"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rhsm_repository:",
            "    name:",
            "      - ${2:element}",
            "    purge: ${3|false,true|}",
            "    state: ${4|enabled,present,absent,disabled|}",
            "$0"
        ],
        "description": "Manage RHSM repositories using the subscription-manager command",
        "scope": "ansible"
    },
    "This module handles some common Riak operations": {
        "prefix": [
            "community.general.riak",
            "riak This module handles some common Riak operations"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.riak:",
            "    command: ${2|ping,kv_test,join,plan,commit|}",
            "    config_dir: ${3:/tmp/test}",
            "    http_conn: ${4:127.0.0.1:8098}",
            "    target_node: ${5:riak@127.0.0.1}",
            "    validate_certs: ${6|true,false|}",
            "    wait_for_handoffs: ${7:0}",
            "    wait_for_ring: ${8:0}",
            "    wait_for_service: ${9|kv|}",
            "$0"
        ],
        "description": "This module handles some common Riak operations",
        "scope": "ansible"
    },
    "Send notifications to Rocket Chat": {
        "prefix": [
            "community.general.rocketchat",
            "rocketchat Send notifications to Rocket Chat"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rocketchat:",
            "    attachments:",
            "      - ${2:element}",
            "    channel: ${3:string}",
            "    color: ${4|normal,good,warning,danger|}",
            "    domain: ${5:string}",
            "    icon_emoji: ${6:string}",
            "    icon_url: ${7:https://docs.ansible.com/favicon.ico}",
            "    link_names: ${8|1,0|}",
            "    msg: ${9:string}",
            "    protocol: ${10|https,http|}",
            "    token: ${11:string}",
            "    username: ${12:Ansible}",
            "    validate_certs: ${13|true,false|}",
            "$0"
        ],
        "description": "Send notifications to Rocket Chat",
        "scope": "ansible"
    },
    "Notify Rollbar about app deployments": {
        "prefix": [
            "community.general.rollbar_deployment",
            "rollbar_deployment Notify Rollbar about app deployments"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rollbar_deployment:",
            "    comment: ${2:string}",
            "    environment: ${3:string}",
            "    revision: ${4:string}",
            "    rollbar_user: ${5:string}",
            "    token: ${6:string}",
            "    url: ${7:https://api.rollbar.com/api/1/deploy/}",
            "    user: ${8:string}",
            "    validate_certs: ${9|true,false|}",
            "$0"
        ],
        "description": "Notify Rollbar about app deployments",
        "scope": "ansible"
    },
    "Install or uninstall overlay additional packages": {
        "prefix": [
            "community.general.rpm_ostree_pkg",
            "rpm_ostree_pkg Install or uninstall overlay additional packages"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rpm_ostree_pkg:",
            "    name:",
            "      - ${2:element}",
            "    state: ${3|present,absent|}",
            "$0"
        ],
        "description": "Install or uninstall overlay additional packages",
        "scope": "ansible"
    },
    "Manage Rundeck ACL policies": {
        "prefix": [
            "community.general.rundeck_acl_policy",
            "rundeck_acl_policy Manage Rundeck ACL policies"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rundeck_acl_policy:",
            "    api_version: ${2:14}",
            "    client_cert: ${3:/tmp/test}",
            "    client_key: ${4:/tmp/test}",
            "    force: ${5|false,true|}",
            "    force_basic_auth: ${6|false,true|}",
            "    http_agent: ${7:ansible-httpget}",
            "    name: ${8:string}",
            "    policy: ${9:string}",
            "    project: ${10:string}",
            "    state: ${11|present,absent|}",
            "    token: ${12:string}",
            "    url: ${13:string}",
            "    url_password: ${14:string}",
            "    url_username: ${15:string}",
            "    use_gssapi: ${16|false,true|}",
            "    use_proxy: ${17|true,false|}",
            "    validate_certs: ${18|true,false|}",
            "$0"
        ],
        "description": "Manage Rundeck ACL policies",
        "scope": "ansible"
    },
    "Query executions for a Rundeck job": {
        "prefix": [
            "community.general.rundeck_job_executions_info",
            "rundeck_job_executions_info Query executions for a Rundeck job"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rundeck_job_executions_info:",
            "    api_token: ${2:string}",
            "    api_version: ${3:39}",
            "    client_cert: ${4:/tmp/test}",
            "    client_key: ${5:/tmp/test}",
            "    force: ${6|false,true|}",
            "    force_basic_auth: ${7|false,true|}",
            "    http_agent: ${8:ansible-httpget}",
            "    job_id: ${9:string}",
            "    max: ${10:20}",
            "    offset: ${11:0}",
            "    status: ${12|succeeded,failed,aborted,running|}",
            "    url: ${13:string}",
            "    url_password: ${14:string}",
            "    url_username: ${15:string}",
            "    use_gssapi: ${16|false,true|}",
            "    use_proxy: ${17|true,false|}",
            "    validate_certs: ${18|true,false|}",
            "$0"
        ],
        "description": "Query executions for a Rundeck job",
        "scope": "ansible"
    },
    "Run a Rundeck job": {
        "prefix": [
            "community.general.rundeck_job_run",
            "rundeck_job_run Run a Rundeck job"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rundeck_job_run:",
            "    abort_on_timeout: ${2|false,true|}",
            "    api_token: ${3:string}",
            "    api_version: ${4:39}",
            "    client_cert: ${5:/tmp/test}",
            "    client_key: ${6:/tmp/test}",
            "    filter_nodes: ${7:string}",
            "    force: ${8|false,true|}",
            "    force_basic_auth: ${9|false,true|}",
            "    http_agent: ${10:ansible-httpget}",
            "    job_id: ${11:string}",
            "    loglevel: ${13|info,debug,verbose,warn,error|}",
            "    run_at_time: ${14:string}",
            "    url: ${15:string}",
            "    url_password: ${16:string}",
            "    url_username: ${17:string}",
            "    use_gssapi: ${18|false,true|}",
            "    use_proxy: ${19|true,false|}",
            "    validate_certs: ${20|true,false|}",
            "    wait_execution: ${21|true,false|}",
            "    wait_execution_delay: ${22:5}",
            "    wait_execution_timeout: ${23:120}",
            "$0"
        ],
        "description": "Run a Rundeck job",
        "scope": "ansible"
    },
    "Manage Rundeck projects": {
        "prefix": [
            "community.general.rundeck_project",
            "rundeck_project Manage Rundeck projects"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.rundeck_project:",
            "    api_version: ${2:14}",
            "    client_cert: ${3:/tmp/test}",
            "    client_key: ${4:/tmp/test}",
            "    force: ${5|false,true|}",
            "    force_basic_auth: ${6|false,true|}",
            "    http_agent: ${7:ansible-httpget}",
            "    name: ${8:string}",
            "    state: ${9|present,absent|}",
            "    token: ${10:string}",
            "    url: ${11:string}",
            "    url_password: ${12:string}",
            "    url_username: ${13:string}",
            "    use_gssapi: ${14|false,true|}",
            "    use_proxy: ${15|true,false|}",
            "    validate_certs: ${16|true,false|}",
            "$0"
        ],
        "description": "Manage Rundeck projects",
        "scope": "ansible"
    },
    "Manage runit services": {
        "prefix": [
            "community.general.runit",
            "runit Manage runit services"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.runit:",
            "    enabled: ${2|false,true|}",
            "    name: ${3:string}",
            "    service_dir: ${4:/var/service}",
            "    service_src: ${5:/etc/sv}",
            "    state: ${6|killed,once,reloaded,restarted,started,stopped|}",
            "$0"
        ],
        "description": "Manage runit services",
        "scope": "ansible"
    },
    "Perform SAP Task list execution": {
        "prefix": [
            "community.general.sap_task_list_execute",
            "sap_task_list_execute Perform SAP Task list execution"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.sap_task_list_execute:",
            "    client: ${2:000}",
            "    conn_password: ${3:string}",
            "    conn_username: ${4:string}",
            "    host: ${5:string}",
            "    sysnr: ${6:00}",
            "    task_parameters:",
            "      - ${7:element}",
            "    task_settings:",
            "      - ${8:element}",
            "    task_skip: ${9|false,true|}",
            "    task_to_execute: ${10:string}",
            "$0"
        ],
        "description": "Perform SAP Task list execution",
        "scope": "ansible"
    },
    "Manages SAP SAPCAR archives": {
        "prefix": [
            "community.general.sapcar_extract",
            "sapcar_extract Manages SAP SAPCAR archives"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.sapcar_extract:",
            "    binary_path: ${2:/tmp/test}",
            "    dest: ${3:/tmp/test}",
            "    manifest: ${4:SIGNATURE.SMF}",
            "    path: ${5:/tmp/test}",
            "    remove: ${6|false,true|}",
            "    security_library: ${7:/tmp/test}",
            "    signature: ${8|false,true|}",
            "$0"
        ],
        "description": "Manages SAP SAPCAR archives",
        "scope": "ansible"
    },
    "Makes a computer to speak": {
        "prefix": [
            "community.general.say",
            "say Makes a computer to speak"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.say:",
            "    msg: ${2:string}",
            "    voice: ${3:string}",
            "$0"
        ],
        "description": "Makes a computer to speak",
        "scope": "ansible"
    },
    "Scaleway compute management module": {
        "prefix": [
            "community.general.scaleway_compute",
            "scaleway_compute Scaleway compute management module"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.scaleway_compute:",
            "    api_timeout: ${2:30}",
            "    api_token: ${3:string}",
            "    api_url: ${4:https://api.scaleway.com}",
            "    commercial_type: ${5:string}",
            "    enable_ipv6: ${6|false,true|}",
            "    image: ${7:string}",
            "    name: ${8:string}",
            "    organization: ${9:string}",
            "    project: ${10:string}",
            "    public_ip: ${11:absent}",
            "    region: ${13|ams1,EMEA-NL-EVS,par1,EMEA-FR-PAR1,par2,EMEA-FR-PAR2,waw1,EMEA-PL-WAW1|}",
            "    security_group: ${14:string}",
            "    state: ${15|present,absent,running,restarted,stopped|}",
            "    tags:",
            "      - ${16:element}",
            "    validate_certs: ${17|true,false|}",
            "    wait: ${18|false,true|}",
            "    wait_sleep_time: ${19:3}",
            "    wait_timeout: ${20:300}",
            "$0"
        ],
        "description": "Scaleway compute management module",
        "scope": "ansible"
    },
    "Scaleway compute - private network management": {
        "prefix": [
            "community.general.scaleway_compute_private_network",
            "scaleway_compute_private_network Scaleway compute - private network management"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.scaleway_compute_private_network:",
            "    api_timeout: ${2:30}",
            "    api_token: ${3:string}",
            "    api_url: ${4:https://api.scaleway.com}",
            "    compute_id: ${5:string}",
            "    private_network_id: ${6:string}",
            "    project: ${7:string}",
            "    region: ${9|ams1,EMEA-NL-EVS,par1,EMEA-FR-PAR1,par2,EMEA-FR-PAR2,waw1,EMEA-PL-WAW1|}",
            "    state: ${10|present,absent|}",
            "    validate_certs: ${11|true,false|}",
            "$0"
        ],
        "description": "Scaleway compute - private network management",
        "scope": "ansible"
    },
    "Scaleway Container management": {
        "prefix": [
            "community.general.scaleway_container",
            "scaleway_container Scaleway Container management"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.scaleway_container:",
            "    api_timeout: ${2:30}",
            "    api_token: ${3:string}",
            "    api_url: ${4:https://api.scaleway.com}",
            "    container_timeout: ${5:string}",
            "    description: ${6:}",
            "    max_concurrency: ${8:int}",
            "    max_scale: ${9:int}",
            "    memory_limit: ${10:int}",
            "    min_scale: ${11:int}",
            "    name: ${12:string}",
            "    namespace_id: ${13:string}",
            "    port: ${14:int}",
            "    privacy: ${15|public,private|}",
            "    protocol: ${16|http1,h2c|}",
            "    redeploy: ${18|false,true|}",
            "    region: ${19|fr-par,nl-ams,pl-waw|}",
            "    registry_image: ${20:string}",
            "    state: ${22|present,absent|}",
            "    validate_certs: ${23|true,false|}",
            "    wait: ${24|true,false|}",
            "    wait_sleep_time: ${25:3}",
            "    wait_timeout: ${26:300}",
            "$0"
        ],
        "description": "Scaleway Container management",
        "scope": "ansible"
    },
    "Retrieve information on Scaleway Container": {
        "prefix": [
            "community.general.scaleway_container_info",
            "scaleway_container_info Retrieve information on Scaleway Container"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.scaleway_container_info:",
            "    api_timeout: ${2:30}",
            "    api_token: ${3:string}",
            "    api_url: ${4:https://api.scaleway.com}",
            "    name: ${5:string}",
            "    namespace_id: ${6:string}",
            "    region: ${8|fr-par,nl-ams,pl-waw|}",
            "    validate_certs: ${9|true,false|}",
            "$0"
        ],
        "description": "Retrieve information on Scaleway Container",
        "scope": "ansible"
    },
    "Scaleway Container namespace management": {
        "prefix": [
            "community.general.scaleway_container_namespace",
            "scaleway_container_namespace Scaleway Container namespace management"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.scaleway_container_namespace:",
            "    api_timeout: ${2:30}",
            "    api_token: ${3:string}",
            "    api_url: ${4:https://api.scaleway.com}",
            "    description: ${5:}",
            "    name: ${7:string}",
            "    project_id: ${8:string}",
            "    region: ${10|fr-par,nl-ams,pl-waw|}",
            "    state: ${12|present,absent|}",
            "    validate_certs: ${13|true,false|}",
            "    wait: ${14|true,false|}",
            "    wait_sleep_time: ${15:3}",
            "    wait_timeout: ${16:300}",
            "$0"
        ],
        "description": "Scaleway Container namespace management",
        "scope": "ansible"
    },
    "Retrieve information on Scaleway Container namespace": {
        "prefix": [
            "community.general.scaleway_container_namespace_info",
            "scaleway_container_namespace_info Retrieve information on Scaleway Container namespace"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.scaleway_container_namespace_info:",
            "    api_timeout: ${2:30}",
            "    api_token: ${3:string}",
            "    api_url: ${4:https://api.scaleway.com}",
            "    name: ${5:string}",
            "    project_id: ${6:string}",
            "    region: ${8|fr-par,nl-ams,pl-waw|}",
            "    validate_certs: ${9|true,false|}",
            "$0"
        ],
        "description": "Retrieve information on Scaleway Container namespace",
        "scope": "ansible"
    },
    "Scaleway Container registry management module": {
        "prefix": [
            "community.general.scaleway_container_registry",
            "scaleway_container_registry Scaleway Container registry management module"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.scaleway_container_registry:",
            "    api_timeout: ${2:30}",
            "    api_token: ${3:string}",
            "    api_url: ${4:https://api.scaleway.com}",
            "    description: ${5:}",
            "    name: ${6:string}",
            "    privacy_policy: ${7|private,public|}",
            "    project_id: ${8:string}",
            "    region: ${10|fr-par,nl-ams,pl-waw|}",
            "    state: ${11|present,absent|}",
            "    validate_certs: ${12|true,false|}",
            "    wait: ${13|true,false|}",
            "    wait_sleep_time: ${14:3}",
            "    wait_timeout: ${15:300}",
            "$0"
        ],
        "description": "Scaleway Container registry management module",
        "scope": "ansible"
    },
    "Scaleway Container registry info module": {
        "prefix": [
            "community.general.scaleway_container_registry_info",
            "scaleway_container_registry_info Scaleway Container registry info module"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.scaleway_container_registry_info:",
            "    api_timeout: ${2:30}",
            "    api_token: ${3:string}",
            "    api_url: ${4:https://api.scaleway.com}",
            "    name: ${5:string}",
            "    project_id: ${6:string}",
            "    region: ${8|fr-par,nl-ams,pl-waw|}",
            "    validate_certs: ${9|true,false|}",
            "$0"
        ],
        "description": "Scaleway Container registry info module",
        "scope": "ansible"
    },
    "Scaleway database backups management module": {
        "prefix": [
            "community.general.scaleway_database_backup",
            "scaleway_database_backup Scaleway database backups management module"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.scaleway_database_backup:",
            "    api_timeout: ${2:30}",
            "    api_token: ${3:string}",
            "    api_url: ${4:https://api.scaleway.com}",
            "    database_name: ${5:string}",
            "    expires_at: ${6:string}",
            "    id: ${7:string}",
            "    instance_id: ${8:string}",
            "    name: ${9:string}",
            "    region: ${11|fr-par,nl-ams,pl-waw|}",
            "    state: ${12|present,absent,exported,restored|}",
            "    validate_certs: ${13|true,false|}",
            "    wait: ${14|false,true|}",
            "    wait_sleep_time: ${15:3}",
            "    wait_timeout: ${16:300}",
            "$0"
        ],
        "description": "Scaleway database backups management module",
        "scope": "ansible"
    },
    "Scaleway Function management": {
        "prefix": [
            "community.general.scaleway_function",
            "scaleway_function Scaleway Function management"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.scaleway_function:",
            "    api_timeout: ${2:30}",
            "    api_token: ${3:string}",
            "    api_url: ${4:https://api.scaleway.com}",
            "    description: ${5:}",
            "    function_timeout: ${7:string}",
            "    handler: ${8:string}",
            "    max_scale: ${9:int}",
            "    memory_limit: ${10:int}",
            "    min_scale: ${11:int}",
            "    name: ${12:string}",
            "    namespace_id: ${13:string}",
            "    privacy: ${14|public,private|}",
            "    redeploy: ${16|false,true|}",
            "    region: ${17|fr-par,nl-ams,pl-waw|}",
            "    runtime: ${18:string}",
            "    state: ${20|present,absent|}",
            "    validate_certs: ${21|true,false|}",
            "    wait: ${22|true,false|}",
            "    wait_sleep_time: ${23:3}",
            "    wait_timeout: ${24:300}",
            "$0"
        ],
        "description": "Scaleway Function management",
        "scope": "ansible"
    },
    "Retrieve information on Scaleway Function": {
        "prefix": [
            "community.general.scaleway_function_info",
            "scaleway_function_info Retrieve information on Scaleway Function"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.scaleway_function_info:",
            "    api_timeout: ${2:30}",
            "    api_token: ${3:string}",
            "    api_url: ${4:https://api.scaleway.com}",
            "    name: ${5:string}",
            "    namespace_id: ${6:string}",
            "    region: ${8|fr-par,nl-ams,pl-waw|}",
            "    validate_certs: ${9|true,false|}",
            "$0"
        ],
        "description": "Retrieve information on Scaleway Function",
        "scope": "ansible"
    },
    "Scaleway Function namespace management": {
        "prefix": [
            "community.general.scaleway_function_namespace",
            "scaleway_function_namespace Scaleway Function namespace management"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.scaleway_function_namespace:",
            "    api_timeout: ${2:30}",
            "    api_token: ${3:string}",
            "    api_url: ${4:https://api.scaleway.com}",
            "    description: ${5:}",
            "    name: ${7:string}",
            "    project_id: ${8:string}",
            "    region: ${10|fr-par,nl-ams,pl-waw|}",
            "    state: ${12|present,absent|}",
            "    validate_certs: ${13|true,false|}",
            "    wait: ${14|true,false|}",
            "    wait_sleep_time: ${15:3}",
            "    wait_timeout: ${16:300}",
            "$0"
        ],
        "description": "Scaleway Function namespace management",
        "scope": "ansible"
    },
    "Retrieve information on Scaleway Function namespace": {
        "prefix": [
            "community.general.scaleway_function_namespace_info",
            "scaleway_function_namespace_info Retrieve information on Scaleway Function namespace"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.scaleway_function_namespace_info:",
            "    api_timeout: ${2:30}",
            "    api_token: ${3:string}",
            "    api_url: ${4:https://api.scaleway.com}",
            "    name: ${5:string}",
            "    project_id: ${6:string}",
            "    region: ${8|fr-par,nl-ams,pl-waw|}",
            "    validate_certs: ${9|true,false|}",
            "$0"
        ],
        "description": "Retrieve information on Scaleway Function namespace",
        "scope": "ansible"
    },
    "Gather information about the Scaleway images available": {
        "prefix": [
            "community.general.scaleway_image_info",
            "scaleway_image_info Gather information about the Scaleway images available"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.scaleway_image_info:",
            "    api_timeout: ${2:30}",
            "    api_token: ${3:string}",
            "    api_url: ${4:https://api.scaleway.com}",
            "    region: ${6|ams1,EMEA-NL-EVS,par1,EMEA-FR-PAR1,par2,EMEA-FR-PAR2,waw1,EMEA-PL-WAW1|}",
            "    validate_certs: ${7|true,false|}",
            "$0"
        ],
        "description": "Gather information about the Scaleway images available",
        "scope": "ansible"
    },
    "Scaleway IP management module": {
        "prefix": [
            "community.general.scaleway_ip",
            "scaleway_ip Scaleway IP management module"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.scaleway_ip:",
            "    api_timeout: ${2:30}",
            "    api_token: ${3:string}",
            "    api_url: ${4:https://api.scaleway.com}",
            "    id: ${5:string}",
            "    organization: ${6:string}",
            "    region: ${8|ams1,EMEA-NL-EVS,par1,EMEA-FR-PAR1,par2,EMEA-FR-PAR2,waw1,EMEA-PL-WAW1|}",
            "    reverse: ${9:string}",
            "    server: ${10:string}",
            "    state: ${11|present,absent|}",
            "    validate_certs: ${12|true,false|}",
            "$0"
        ],
        "description": "Scaleway IP management module",
        "scope": "ansible"
    },
    "Gather information about the Scaleway ips available": {
        "prefix": [
            "community.general.scaleway_ip_info",
            "scaleway_ip_info Gather information about the Scaleway ips available"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.scaleway_ip_info:",
            "    api_timeout: ${2:30}",
            "    api_token: ${3:string}",
            "    api_url: ${4:https://api.scaleway.com}",
            "    region: ${6|ams1,EMEA-NL-EVS,par1,EMEA-FR-PAR1,par2,EMEA-FR-PAR2,waw1,EMEA-PL-WAW1|}",
            "    validate_certs: ${7|true,false|}",
            "$0"
        ],
        "description": "Gather information about the Scaleway ips available",
        "scope": "ansible"
    },
    "Scaleway load-balancer management module": {
        "prefix": [
            "community.general.scaleway_lb",
            "scaleway_lb Scaleway load-balancer management module"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.scaleway_lb:",
            "    api_timeout: ${2:30}",
            "    api_token: ${3:string}",
            "    api_url: ${4:https://api.scaleway.com}",
            "    description: ${5:string}",
            "    name: ${6:string}",
            "    organization_id: ${7:string}",
            "    region: ${9|nl-ams,fr-par,pl-waw|}",
            "    state: ${10|present,absent|}",
            "    tags:",
            "      - ${11:element}",
            "    validate_certs: ${12|true,false|}",
            "    wait: ${13|false,true|}",
            "    wait_sleep_time: ${14:3}",
            "    wait_timeout: ${15:300}",
            "$0"
        ],
        "description": "Scaleway load-balancer management module",
        "scope": "ansible"
    },
    "Gather information about the Scaleway organizations available": {
        "prefix": [
            "community.general.scaleway_organization_info",
            "scaleway_organization_info Gather information about the Scaleway organizations available"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.scaleway_organization_info:",
            "    api_timeout: ${2:30}",
            "    api_token: ${3:string}",
            "    api_url: ${4:https://account.scaleway.com}",
            "    validate_certs: ${6|true,false|}",
            "$0"
        ],
        "description": "Gather information about the Scaleway organizations available",
        "scope": "ansible"
    },
    "Scaleway private network management": {
        "prefix": [
            "community.general.scaleway_private_network",
            "scaleway_private_network Scaleway private network management"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.scaleway_private_network:",
            "    api_timeout: ${2:30}",
            "    api_token: ${3:string}",
            "    api_url: ${4:https://api.scaleway.com}",
            "    name: ${5:string}",
            "    project: ${6:string}",
            "    region: ${8|ams1,EMEA-NL-EVS,par1,EMEA-FR-PAR1,par2,EMEA-FR-PAR2,waw1,EMEA-PL-WAW1|}",
            "    state: ${9|present,absent|}",
            "    tags:",
            "      - ${10:element}",
            "    validate_certs: ${11|true,false|}",
            "$0"
        ],
        "description": "Scaleway private network management",
        "scope": "ansible"
    },
    "Scaleway Security Group management module": {
        "prefix": [
            "community.general.scaleway_security_group",
            "scaleway_security_group Scaleway Security Group management module"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.scaleway_security_group:",
            "    api_timeout: ${2:30}",
            "    api_token: ${3:string}",
            "    api_url: ${4:https://api.scaleway.com}",
            "    description: ${5:string}",
            "    inbound_default_policy: ${6|accept,drop|}",
            "    name: ${7:string}",
            "    organization: ${8:string}",
            "    organization_default: ${9|false,true|}",
            "    outbound_default_policy: ${10|accept,drop|}",
            "    region: ${12|ams1,EMEA-NL-EVS,par1,EMEA-FR-PAR1,par2,EMEA-FR-PAR2,waw1,EMEA-PL-WAW1|}",
            "    state: ${13|present,absent|}",
            "    stateful: ${14|false,true|}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "Scaleway Security Group management module",
        "scope": "ansible"
    },
    "Gather information about the Scaleway security groups available": {
        "prefix": [
            "community.general.scaleway_security_group_info",
            "scaleway_security_group_info Gather information about the Scaleway security groups available"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.scaleway_security_group_info:",
            "    api_timeout: ${2:30}",
            "    api_token: ${3:string}",
            "    api_url: ${4:https://api.scaleway.com}",
            "    region: ${6|ams1,EMEA-NL-EVS,par1,EMEA-FR-PAR1,par2,EMEA-FR-PAR2,waw1,EMEA-PL-WAW1|}",
            "    validate_certs: ${7|true,false|}",
            "$0"
        ],
        "description": "Gather information about the Scaleway security groups available",
        "scope": "ansible"
    },
    "Scaleway Security Group Rule management module": {
        "prefix": [
            "community.general.scaleway_security_group_rule",
            "scaleway_security_group_rule Scaleway Security Group Rule management module"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.scaleway_security_group_rule:",
            "    action: ${2|accept,drop|}",
            "    api_timeout: ${3:30}",
            "    api_token: ${4:string}",
            "    api_url: ${5:https://api.scaleway.com}",
            "    direction: ${6|inbound,outbound|}",
            "    ip_range: ${7:0.0.0.0/0}",
            "    port: ${8:int}",
            "    protocol: ${9|TCP,UDP,ICMP|}",
            "    region: ${11|ams1,EMEA-NL-EVS,par1,EMEA-FR-PAR1,par2,EMEA-FR-PAR2,waw1,EMEA-PL-WAW1|}",
            "    security_group: ${12:string}",
            "    state: ${13|present,absent|}",
            "    validate_certs: ${14|true,false|}",
            "$0"
        ],
        "description": "Scaleway Security Group Rule management module",
        "scope": "ansible"
    },
    "Gather information about the Scaleway servers available": {
        "prefix": [
            "community.general.scaleway_server_info",
            "scaleway_server_info Gather information about the Scaleway servers available"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.scaleway_server_info:",
            "    api_timeout: ${2:30}",
            "    api_token: ${3:string}",
            "    api_url: ${4:https://api.scaleway.com}",
            "    region: ${6|ams1,EMEA-NL-EVS,par1,EMEA-FR-PAR1,par2,EMEA-FR-PAR2,waw1,EMEA-PL-WAW1|}",
            "    validate_certs: ${7|true,false|}",
            "$0"
        ],
        "description": "Gather information about the Scaleway servers available",
        "scope": "ansible"
    },
    "Gather information about the Scaleway snapshots available": {
        "prefix": [
            "community.general.scaleway_snapshot_info",
            "scaleway_snapshot_info Gather information about the Scaleway snapshots available"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.scaleway_snapshot_info:",
            "    api_timeout: ${2:30}",
            "    api_token: ${3:string}",
            "    api_url: ${4:https://api.scaleway.com}",
            "    region: ${6|ams1,EMEA-NL-EVS,par1,EMEA-FR-PAR1,par2,EMEA-FR-PAR2,waw1,EMEA-PL-WAW1|}",
            "    validate_certs: ${7|true,false|}",
            "$0"
        ],
        "description": "Gather information about the Scaleway snapshots available",
        "scope": "ansible"
    },
    "Scaleway SSH keys management module": {
        "prefix": [
            "community.general.scaleway_sshkey",
            "scaleway_sshkey Scaleway SSH keys management module"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.scaleway_sshkey:",
            "    api_timeout: ${2:30}",
            "    api_token: ${3:string}",
            "    api_url: ${4:https://account.scaleway.com}",
            "    ssh_pub_key: ${6:string}",
            "    state: ${7|present,absent|}",
            "    validate_certs: ${8|true,false|}",
            "$0"
        ],
        "description": "Scaleway SSH keys management module",
        "scope": "ansible"
    },
    "Scaleway user_data management module": {
        "prefix": [
            "community.general.scaleway_user_data",
            "scaleway_user_data Scaleway user_data management module"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.scaleway_user_data:",
            "    api_timeout: ${2:30}",
            "    api_token: ${3:string}",
            "    api_url: ${4:https://api.scaleway.com}",
            "    region: ${6|ams1,EMEA-NL-EVS,par1,EMEA-FR-PAR1,par2,EMEA-FR-PAR2,waw1,EMEA-PL-WAW1|}",
            "    server_id: ${7:string}",
            "    validate_certs: ${9|true,false|}",
            "$0"
        ],
        "description": "Scaleway user_data management module",
        "scope": "ansible"
    },
    "Scaleway volumes management module": {
        "prefix": [
            "community.general.scaleway_volume",
            "scaleway_volume Scaleway volumes management module"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.scaleway_volume:",
            "    api_timeout: ${2:30}",
            "    api_token: ${3:string}",
            "    api_url: ${4:https://api.scaleway.com}",
            "    name: ${5:string}",
            "    organization: ${6:string}",
            "    project: ${7:string}",
            "    region: ${9|ams1,EMEA-NL-EVS,par1,EMEA-FR-PAR1,par2,EMEA-FR-PAR2,waw1,EMEA-PL-WAW1|}",
            "    size: ${10:int}",
            "    state: ${11|present,absent|}",
            "    validate_certs: ${12|true,false|}",
            "    volume_type: ${13:string}",
            "$0"
        ],
        "description": "Scaleway volumes management module",
        "scope": "ansible"
    },
    "Gather information about the Scaleway volumes available": {
        "prefix": [
            "community.general.scaleway_volume_info",
            "scaleway_volume_info Gather information about the Scaleway volumes available"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.scaleway_volume_info:",
            "    api_timeout: ${2:30}",
            "    api_token: ${3:string}",
            "    api_url: ${4:https://api.scaleway.com}",
            "    region: ${6|ams1,EMEA-NL-EVS,par1,EMEA-FR-PAR1,par2,EMEA-FR-PAR2,waw1,EMEA-PL-WAW1|}",
            "    validate_certs: ${7|true,false|}",
            "$0"
        ],
        "description": "Gather information about the Scaleway volumes available",
        "scope": "ansible"
    },
    "Manages SELinux file context mapping definitions": {
        "prefix": [
            "community.general.sefcontext",
            "sefcontext Manages SELinux file context mapping definitions"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.sefcontext:",
            "    ftype: ${2|a,b,c,d,f,l,p,s|}",
            "    ignore_selinux_state: ${3|false,true|}",
            "    reload: ${4|true,false|}",
            "    selevel: ${5:string}",
            "    setype: ${6:string}",
            "    seuser: ${7:string}",
            "    state: ${8|present,absent|}",
            "    substitute: ${9:string}",
            "    target: ${10:string}",
            "$0"
        ],
        "description": "Manages SELinux file context mapping definitions",
        "scope": "ansible"
    },
    "Change permissive domain in SELinux policy": {
        "prefix": [
            "community.general.selinux_permissive",
            "selinux_permissive Change permissive domain in SELinux policy"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.selinux_permissive:",
            "    domain: ${2:string}",
            "    no_reload: ${3|false,true|}",
            "    permissive: ${4|false,true|}",
            "    store: ${5:}",
            "$0"
        ],
        "description": "Change permissive domain in SELinux policy",
        "scope": "ansible"
    },
    "Manages linux user to SELinux user mapping": {
        "prefix": [
            "community.general.selogin",
            "selogin Manages linux user to SELinux user mapping"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.selogin:",
            "    ignore_selinux_state: ${2|false,true|}",
            "    login: ${3:string}",
            "    reload: ${4|true,false|}",
            "    selevel: ${5:s0}",
            "    seuser: ${6:string}",
            "    state: ${7|present,absent|}",
            "$0"
        ],
        "description": "Manages linux user to SELinux user mapping",
        "scope": "ansible"
    },
    "Sends an email with the SendGrid API": {
        "prefix": [
            "community.general.sendgrid",
            "sendgrid Sends an email with the SendGrid API"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.sendgrid:",
            "    api_key: ${2:string}",
            "    attachments:",
            "      - ${3:element}",
            "    bcc:",
            "      - ${4:element}",
            "    body: ${5:string}",
            "    cc:",
            "      - ${6:element}",
            "    from_address: ${7:string}",
            "    from_name: ${8:string}",
            "    html_body: ${10|false,true|}",
            "    password: ${11:string}",
            "    subject: ${12:string}",
            "    to_addresses:",
            "      - ${13:element}",
            "    username: ${14:string}",
            "$0"
        ],
        "description": "Sends an email with the SendGrid API",
        "scope": "ansible"
    },
    "Manage Sensu checks": {
        "prefix": [
            "community.general.sensu_check",
            "sensu_check Manage Sensu checks"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.sensu_check:",
            "    aggregate: ${2|false,true|}",
            "    backup: ${3|false,true|}",
            "    command: ${4:string}",
            "    dependencies:",
            "      - ${6:element}",
            "    handle: ${7|false,true|}",
            "    handlers:",
            "      - ${8:element}",
            "    high_flap_threshold: ${9:int}",
            "    interval: ${10:int}",
            "    low_flap_threshold: ${11:int}",
            "    metric: ${12|false,true|}",
            "    name: ${13:string}",
            "    occurrences: ${14:int}",
            "    path: ${15:/etc/sensu/conf.d/checks.json}",
            "    publish: ${16|false,true|}",
            "    refresh: ${17:int}",
            "    source: ${18:string}",
            "    standalone: ${19|false,true|}",
            "    state: ${20|present,absent|}",
            "    subdue_begin: ${21:string}",
            "    subdue_end: ${22:string}",
            "    subscribers:",
            "      - ${23:element}",
            "    timeout: ${24:int}",
            "    ttl: ${25:int}",
            "$0"
        ],
        "description": "Manage Sensu checks",
        "scope": "ansible"
    },
    "Manages Sensu client configuration": {
        "prefix": [
            "community.general.sensu_client",
            "sensu_client Manages Sensu client configuration"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.sensu_client:",
            "    address: ${2:string}",
            "    deregister: ${4|false,true|}",
            "    keepalives: ${8|true,false|}",
            "    name: ${9:string}",
            "    redact:",
            "      - ${11:element}",
            "    safe_mode: ${13|false,true|}",
            "    state: ${16|present,absent|}",
            "    subscriptions:",
            "      - ${17:element}",
            "$0"
        ],
        "description": "Manages Sensu client configuration",
        "scope": "ansible"
    },
    "Manages Sensu handler configuration": {
        "prefix": [
            "community.general.sensu_handler",
            "sensu_handler Manages Sensu handler configuration"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.sensu_handler:",
            "    command: ${2:string}",
            "    filter: ${3:string}",
            "    filters:",
            "      - ${4:element}",
            "    handle_flapping: ${5|false,true|}",
            "    handle_silenced: ${6|false,true|}",
            "    handlers:",
            "      - ${7:element}",
            "    mutator: ${8:string}",
            "    name: ${9:string}",
            "    severities:",
            "      - ${11:element}",
            "    state: ${13|present,absent|}",
            "    timeout: ${14:10}",
            "    type: ${15|pipe,tcp,udp,transport,set|}",
            "$0"
        ],
        "description": "Manages Sensu handler configuration",
        "scope": "ansible"
    },
    "Manage Sensu silence entries": {
        "prefix": [
            "community.general.sensu_silence",
            "sensu_silence Manage Sensu silence entries"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.sensu_silence:",
            "    check: ${2:string}",
            "    creator: ${3:string}",
            "    expire: ${4:int}",
            "    expire_on_resolve: ${5|false,true|}",
            "    reason: ${6:string}",
            "    state: ${7|present,absent|}",
            "    subscription: ${8:string}",
            "    url: ${9:http://127.0.01:4567}",
            "$0"
        ],
        "description": "Manage Sensu silence entries",
        "scope": "ansible"
    },
    "Manage Sensu subscriptions": {
        "prefix": [
            "community.general.sensu_subscription",
            "sensu_subscription Manage Sensu subscriptions"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.sensu_subscription:",
            "    backup: ${2|false,true|}",
            "    name: ${3:string}",
            "    path: ${4:/etc/sensu/conf.d/subscriptions.json}",
            "    state: ${5|present,absent|}",
            "$0"
        ],
        "description": "Manage Sensu subscriptions",
        "scope": "ansible"
    },
    "Manages SELinux network port type definitions": {
        "prefix": [
            "community.general.seport",
            "seport Manages SELinux network port type definitions"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.seport:",
            "    ignore_selinux_state: ${2|false,true|}",
            "    local: ${3|false,true|}",
            "    ports:",
            "      - ${4:element}",
            "    proto: ${5|tcp,udp|}",
            "    reload: ${6|true,false|}",
            "    setype: ${7:string}",
            "    state: ${8|present,absent|}",
            "$0"
        ],
        "description": "Manages SELinux network port type definitions",
        "scope": "ansible"
    },
    "Manages a Serverless Framework project": {
        "prefix": [
            "community.general.serverless",
            "serverless Manages a Serverless Framework project"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.serverless:",
            "    deploy: ${2|true,false|}",
            "    force: ${3|false,true|}",
            "    region: ${4:}",
            "    serverless_bin_path: ${5:/tmp/test}",
            "    service_path: ${6:/tmp/test}",
            "    stage: ${7:}",
            "    state: ${8|present,absent|}",
            "    verbose: ${9|false,true|}",
            "$0"
        ],
        "description": "Manages a Serverless Framework project",
        "scope": "ansible"
    },
    "Shut down a machine": {
        "prefix": [
            "community.general.shutdown",
            "shutdown Shut down a machine"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.shutdown:",
            "    delay: ${2:0}",
            "    msg: ${3:Shut down initiated by Ansible}",
            "    search_paths:",
            "      - ${4:element}",
            "$0"
        ],
        "description": "Shut down a machine",
        "scope": "ansible"
    },
    "Create or cancel a virtual instance in SoftLayer": {
        "prefix": [
            "community.general.sl_vm",
            "sl_vm Create or cancel a virtual instance in SoftLayer"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.sl_vm:",
            "    cpus: ${2|1,2,4,8,16,32,56|}",
            "    datacenter: ${3|ams01,ams03,che01,dal01,dal05,dal06,dal09,dal10,dal12,dal13,fra02,fra04,fra05,hkg02,hou02,lon02,lon04,lon06,mel01,mex01,mil01,mon01,osl01,par01,sao01,sea01,seo01,sjc01,sjc03,sjc04,sng01,syd01,syd04,tok02,tor01,wdc01,wdc04,wdc06,wdc07|}",
            "    dedicated: ${4|false,true|}",
            "    disks:",
            "      - ${5:element}",
            "    domain: ${6:string}",
            "    flavor: ${7:string}",
            "    hostname: ${8:string}",
            "    hourly: ${9|true,false|}",
            "    image_id: ${10:string}",
            "    instance_id: ${11:string}",
            "    local_disk: ${12|true,false|}",
            "    memory: ${13|1024,2048,4096,6144,8192,12288,16384,32768,49152,65536,131072,247808|}",
            "    nic_speed: ${14|10,100,1000|}",
            "    os_code: ${15:string}",
            "    post_uri: ${16:string}",
            "    private: ${17|false,true|}",
            "    private_vlan: ${18:string}",
            "    public_vlan: ${19:string}",
            "    ssh_keys:",
            "      - ${20:element}",
            "    state: ${21|present,absent|}",
            "    tags: ${22:string}",
            "    wait: ${23|true,false|}",
            "    wait_time: ${24:600}",
            "$0"
        ],
        "description": "Create or cancel a virtual instance in SoftLayer",
        "scope": "ansible"
    },
    "Send Slack notifications": {
        "prefix": [
            "community.general.slack",
            "slack Send Slack notifications"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.slack:",
            "    attachments:",
            "      - ${2:element}",
            "    blocks:",
            "      - ${3:element}",
            "    channel: ${4:string}",
            "    color: ${5:normal}",
            "    domain: ${6:string}",
            "    icon_emoji: ${7:string}",
            "    icon_url: ${8:https://docs.ansible.com/favicon.ico}",
            "    link_names: ${9|1,0|}",
            "    message_id: ${10:string}",
            "    msg: ${11:string}",
            "    parse: ${12|full,none|}",
            "    prepend_hash: ${13|auto,always,never|}",
            "    thread_id: ${14:string}",
            "    token: ${15:string}",
            "    username: ${16:Ansible}",
            "    validate_certs: ${17|true,false|}",
            "$0"
        ],
        "description": "Send Slack notifications",
        "scope": "ansible"
    },
    "Package manager for Slackware >= 12.2": {
        "prefix": [
            "community.general.slackpkg",
            "slackpkg Package manager for Slackware >= 12.2"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.slackpkg:",
            "    name:",
            "      - ${2:element}",
            "    state: ${3|present,absent,latest,installed,removed|}",
            "    update_cache: ${4|false,true|}",
            "$0"
        ],
        "description": "Package manager for Slackware >= 12.2",
        "scope": "ansible"
    },
    "Get SmartOS image details": {
        "prefix": [
            "community.general.smartos_image_info",
            "smartos_image_info Get SmartOS image details"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.smartos_image_info:",
            "    filters: ${2:string}",
            "$0"
        ],
        "description": "Get SmartOS image details",
        "scope": "ansible"
    },
    "Manages snaps": {
        "prefix": [
            "community.general.snap",
            "snap Manages snaps"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.snap:",
            "    channel: ${2:stable}",
            "    classic: ${3|false,true|}",
            "    name:",
            "      - ${4:element}",
            "    options:",
            "      - ${5:element}",
            "    state: ${6|present,absent,enabled,disabled|}",
            "$0"
        ],
        "description": "Manages snaps",
        "scope": "ansible"
    },
    "Manages snap aliases": {
        "prefix": [
            "community.general.snap_alias",
            "snap_alias Manages snap aliases"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.snap_alias:",
            "    alias:",
            "      - ${2:element}",
            "    name: ${3:string}",
            "    state: ${4|present,absent|}",
            "$0"
        ],
        "description": "Manages snap aliases",
        "scope": "ansible"
    },
    "Retrieve facts for a device using SNMP": {
        "prefix": [
            "community.general.snmp_facts",
            "snmp_facts Retrieve facts for a device using SNMP"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.snmp_facts:",
            "    authkey: ${2:string}",
            "    community: ${3:string}",
            "    host: ${4:string}",
            "    integrity: ${5|md5,sha|}",
            "    level: ${6|authNoPriv,authPriv|}",
            "    privacy: ${7|aes,des|}",
            "    privkey: ${8:string}",
            "    retries: ${9:int}",
            "    timeout: ${10:int}",
            "    username: ${11:string}",
            "    version: ${12|v2,v2c,v3|}",
            "$0"
        ],
        "description": "Retrieve facts for a device using SNMP",
        "scope": "ansible"
    },
    "Manage Solaris zones": {
        "prefix": [
            "community.general.solaris_zone",
            "solaris_zone Manage Solaris zones"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.solaris_zone:",
            "    attach_options: ${2:}",
            "    config: ${3:}",
            "    create_options: ${4:}",
            "    install_options: ${5:}",
            "    name: ${6:string}",
            "    path: ${7:string}",
            "    root_password: ${8:string}",
            "    sparse: ${9|false,true|}",
            "    state: ${10|present,absent,attached,configured,detached,installed,running,started,stopped|}",
            "    timeout: ${11:600}",
            "$0"
        ],
        "description": "Manage Solaris zones",
        "scope": "ansible"
    },
    "Package manager for Source Mage GNU/Linux": {
        "prefix": [
            "community.general.sorcery",
            "sorcery Package manager for Source Mage GNU/Linux"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.sorcery:",
            "    cache_valid_time: ${2:0}",
            "    depends: ${3:string}",
            "    name:",
            "      - ${4:element}",
            "    state: ${5|present,latest,absent,cast,dispelled,rebuild|}",
            "    update: ${6|false,true|}",
            "    update_cache: ${7|false,true|}",
            "$0"
        ],
        "description": "Package manager for Source Mage GNU/Linux",
        "scope": "ansible"
    },
    "Creates/deletes devices in CA Spectrum": {
        "prefix": [
            "community.general.spectrum_device",
            "spectrum_device Creates/deletes devices in CA Spectrum"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.spectrum_device:",
            "    agentport: ${2:161}",
            "    community: ${3:string}",
            "    device: ${4:string}",
            "    landscape: ${5:string}",
            "    state: ${6|present,absent|}",
            "    url: ${7:string}",
            "    url_password: ${8:string}",
            "    url_username: ${9:string}",
            "    use_proxy: ${10|true,false|}",
            "    validate_certs: ${11|true,false|}",
            "$0"
        ],
        "description": "Creates/deletes devices in CA Spectrum",
        "scope": "ansible"
    },
    "Enforce a model's attributes in CA Spectrum": {
        "prefix": [
            "community.general.spectrum_model_attrs",
            "spectrum_model_attrs Enforce a model's attributes in CA Spectrum"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.spectrum_model_attrs:",
            "    attributes:",
            "      - ${2:element}",
            "    name: ${3:string}",
            "    type: ${4:string}",
            "    url: ${5:string}",
            "    url_password: ${6:string}",
            "    url_username: ${7:string}",
            "    use_proxy: ${8|true,false|}",
            "    validate_certs: ${9|true,false|}",
            "$0"
        ],
        "description": "Enforce a model's attributes in CA Spectrum",
        "scope": "ansible"
    },
    "Create, update or delete Spotinst AWS Elastigroups": {
        "prefix": [
            "community.general.spotinst_aws_elastigroup",
            "spotinst_aws_elastigroup Create, update or delete Spotinst AWS Elastigroups"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.spotinst_aws_elastigroup:",
            "    account_id: ${2:string}",
            "    availability_vs_cost: ${3:string}",
            "    availability_zones:",
            "      - ${4:element}",
            "    block_device_mappings:",
            "      - ${5:element}",
            "    credentials_path: ${7:/tmp/test}",
            "    do_not_update:",
            "      - ${8:element}",
            "    down_scaling_policies:",
            "      - ${9:element}",
            "    draining_timeout: ${10:int}",
            "    ebs_optimized: ${11|false,true|}",
            "    ebs_volume_pool:",
            "      - ${12:element}",
            "    elastic_ips:",
            "      - ${15:element}",
            "    fallback_to_od: ${16|false,true|}",
            "    health_check_grace_period: ${17:int}",
            "    health_check_type: ${18:string}",
            "    health_check_unhealthy_duration_before_replacement: ${19:int}",
            "    iam_role_arn: ${20:string}",
            "    iam_role_name: ${21:string}",
            "    id: ${22:string}",
            "    image_id: ${23:string}",
            "    key_pair: ${24:string}",
            "    lifetime_period: ${26:int}",
            "    load_balancers:",
            "      - ${27:element}",
            "    max_size: ${28:int}",
            "    min_size: ${30:int}",
            "    monitoring: ${31:string}",
            "    multai_load_balancers:",
            "      - ${32:element}",
            "    multai_token: ${33:string}",
            "    name: ${34:string}",
            "    network_interfaces:",
            "      - ${35:element}",
            "    on_demand_count: ${36:int}",
            "    on_demand_instance_type: ${37:string}",
            "    product: ${40:string}",
            "    risk: ${43:int}",
            "    scheduled_tasks:",
            "      - ${45:element}",
            "    security_group_ids:",
            "      - ${46:element}",
            "    shutdown_script: ${47:string}",
            "    signals:",
            "      - ${48:element}",
            "    spin_up_time: ${49:int}",
            "    spot_instance_types:",
            "      - ${50:element}",
            "    state: ${51|present,absent|}",
            "    tags:",
            "      - ${52:element}",
            "    target: ${53:int}",
            "    target_group_arns:",
            "      - ${54:element}",
            "    target_tracking_policies:",
            "      - ${55:element}",
            "    tenancy: ${56:string}",
            "    terminate_at_end_of_billing_hour: ${57|false,true|}",
            "    token: ${58:string}",
            "    uniqueness_by: ${59|name,id|}",
            "    unit: ${60:string}",
            "    up_scaling_policies:",
            "      - ${61:element}",
            "    user_data: ${62:string}",
            "    utilize_reserved_instances: ${63|false,true|}",
            "    wait_for_instances: ${64|false,true|}",
            "    wait_timeout: ${65:int}",
            "$0"
        ],
        "description": "Create, update or delete Spotinst AWS Elastigroups",
        "scope": "ansible"
    },
    "Manage HPE StoreServ 3PAR CPG": {
        "prefix": [
            "community.general.ss_3par_cpg",
            "ss_3par_cpg Manage HPE StoreServ 3PAR CPG"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ss_3par_cpg:",
            "    cpg_name: ${2:string}",
            "    disk_type: ${3|FC,NL,SSD|}",
            "    domain: ${4:string}",
            "    growth_increment: ${5:string}",
            "    growth_limit: ${6:string}",
            "    growth_warning: ${7:string}",
            "    high_availability: ${8|PORT,CAGE,MAG|}",
            "    raid_type: ${9|R0,R1,R5,R6|}",
            "    secure: ${10|false,true|}",
            "    set_size: ${11:int}",
            "    state: ${12|present,absent|}",
            "    storage_system_ip: ${13:string}",
            "    storage_system_password: ${14:string}",
            "    storage_system_username: ${15:string}",
            "$0"
        ],
        "description": "Manage HPE StoreServ 3PAR CPG",
        "scope": "ansible"
    },
    "Manage SSH config for user": {
        "prefix": [
            "community.general.ssh_config",
            "ssh_config Manage SSH config for user"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ssh_config:",
            "    forward_agent: ${2|false,true|}",
            "    group: ${3:string}",
            "    host: ${4:string}",
            "    host_key_algorithms: ${5:string}",
            "    hostname: ${6:string}",
            "    identity_file: ${7:/tmp/test}",
            "    port: ${8:string}",
            "    proxycommand: ${9:string}",
            "    proxyjump: ${10:string}",
            "    remote_user: ${11:string}",
            "    ssh_config_file: ${12:/tmp/test}",
            "    state: ${13|present,absent|}",
            "    strict_host_key_checking: ${14|yes,no,ask|}",
            "    user: ${15:string}",
            "    user_known_hosts_file: ${16:string}",
            "$0"
        ],
        "description": "Manage SSH config for user",
        "scope": "ansible"
    },
    "Send code deploy and annotation events to stackdriver": {
        "prefix": [
            "community.general.stackdriver",
            "stackdriver Send code deploy and annotation events to stackdriver"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.stackdriver:",
            "    annotated_by: ${2:Ansible}",
            "    deployed_by: ${3:Ansible}",
            "    deployed_to: ${4:string}",
            "    event: ${5|annotation,deploy|}",
            "    event_epoch: ${6:string}",
            "    instance_id: ${7:string}",
            "    key: ${8:string}",
            "    level: ${9|INFO,WARN,ERROR|}",
            "    msg: ${10:string}",
            "    repository: ${11:string}",
            "    revision_id: ${12:string}",
            "$0"
        ],
        "description": "Send code deploy and annotation events to stackdriver",
        "scope": "ansible"
    },
    "Add or remove host to stacki front-end": {
        "prefix": [
            "community.general.stacki_host",
            "stacki_host Add or remove host to stacki front-end"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.stacki_host:",
            "    appliance: ${2:backend}",
            "    force_install: ${3|false,true|}",
            "    name: ${4:string}",
            "    network: ${5:private}",
            "    prim_intf: ${6:string}",
            "    prim_intf_ip: ${7:string}",
            "    prim_intf_mac: ${8:string}",
            "    rack: ${9:0}",
            "    rank: ${10:0}",
            "    stacki_endpoint: ${11:string}",
            "    stacki_password: ${12:string}",
            "    stacki_user: ${13:string}",
            "    state: ${14|present,absent|}",
            "$0"
        ],
        "description": "Add or remove host to stacki front-end",
        "scope": "ansible"
    },
    "Send metrics to StatsD": {
        "prefix": [
            "community.general.statsd",
            "statsd Send metrics to StatsD"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.statsd:",
            "    delta: ${2|false,true|}",
            "    host: ${3:localhost}",
            "    metric: ${4:string}",
            "    metric_prefix: ${5:}",
            "    metric_type: ${6|counter,gauge|}",
            "    port: ${7:8125}",
            "    protocol: ${8|udp,tcp|}",
            "    state: ${9|present|}",
            "    value: ${11:int}",
            "$0"
        ],
        "description": "Send metrics to StatsD",
        "scope": "ansible"
    },
    "Create maintenance windows for your status.io dashboard": {
        "prefix": [
            "community.general.statusio_maintenance",
            "statusio_maintenance Create maintenance windows for your status.io dashboard"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.statusio_maintenance:",
            "    all_infrastructure_affected: ${2|false,true|}",
            "    api_id: ${3:string}",
            "    api_key: ${4:string}",
            "    automation: ${5|false,true|}",
            "    components:",
            "      - ${6:element}",
            "    containers:",
            "      - ${7:element}",
            "    desc: ${8:Created by Ansible}",
            "    maintenance_id: ${9:string}",
            "    maintenance_notify_1_hr: ${10|false,true|}",
            "    maintenance_notify_24_hr: ${11|false,true|}",
            "    maintenance_notify_72_hr: ${12|false,true|}",
            "    maintenance_notify_now: ${13|false,true|}",
            "    minutes: ${14:10}",
            "    start_date: ${15:string}",
            "    start_time: ${16:string}",
            "    state: ${17|present,absent|}",
            "    statuspage: ${18:string}",
            "    title: ${19:A new maintenance window}",
            "    url: ${20:https://api.status.io}",
            "$0"
        ],
        "description": "Create maintenance windows for your status.io dashboard",
        "scope": "ansible"
    },
    "Manage sudoers files": {
        "prefix": [
            "community.general.sudoers",
            "sudoers Manage sudoers files"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.sudoers:",
            "    commands:",
            "      - ${2:element}",
            "    group: ${3:string}",
            "    host: ${4:ALL}",
            "    name: ${5:string}",
            "    nopassword: ${6|true,false|}",
            "    runas: ${7:string}",
            "    setenv: ${8|false,true|}",
            "    state: ${9|present,absent|}",
            "    sudoers_path: ${10:/etc/sudoers.d}",
            "    user: ${11:string}",
            "    validation: ${12|detect,absent,required|}",
            "$0"
        ],
        "description": "Manage sudoers files",
        "scope": "ansible"
    },
    "Manage the state of a program or group of programs running via supervisord": {
        "prefix": [
            "community.general.supervisorctl",
            "supervisorctl Manage the state of a program or group of programs running via supervisord"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.supervisorctl:",
            "    config: ${2:/tmp/test}",
            "    name: ${3:string}",
            "    password: ${4:string}",
            "    server_url: ${5:string}",
            "    signal: ${6:string}",
            "    state: ${7|present,started,stopped,restarted,absent,signalled|}",
            "    supervisorctl_path: ${8:/tmp/test}",
            "    username: ${9:string}",
            "$0"
        ],
        "description": "Manage the state of a program or group of programs running via supervisord",
        "scope": "ansible"
    },
    "Manage daemontools services": {
        "prefix": [
            "community.general.svc",
            "svc Manage daemontools services"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.svc:",
            "    downed: ${2|false,true|}",
            "    enabled: ${3|false,true|}",
            "    name: ${4:string}",
            "    service_dir: ${5:/service}",
            "    service_src: ${6:/etc/service}",
            "    state: ${7|killed,once,reloaded,restarted,started,stopped|}",
            "$0"
        ],
        "description": "Manage daemontools services",
        "scope": "ansible"
    },
    "Manage Solaris SVR4 packages": {
        "prefix": [
            "community.general.svr4pkg",
            "svr4pkg Manage Solaris SVR4 packages"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.svr4pkg:",
            "    category: ${2|false,true|}",
            "    name: ${3:string}",
            "    proxy: ${4:string}",
            "    response_file: ${5:string}",
            "    src: ${6:string}",
            "    state: ${7|present,absent|}",
            "    zone: ${8|all,current|}",
            "$0"
        ],
        "description": "Manage Solaris SVR4 packages",
        "scope": "ansible"
    },
    "Manage packages with swdepot package manager (HP-UX)": {
        "prefix": [
            "community.general.swdepot",
            "swdepot Manage packages with swdepot package manager (HP-UX)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.swdepot:",
            "    depot: ${2:string}",
            "    name: ${3:string}",
            "    state: ${4|present,latest,absent|}",
            "$0"
        ],
        "description": "Manage packages with swdepot package manager (HP-UX)",
        "scope": "ansible"
    },
    "Manages updates and bundles in ClearLinux systems": {
        "prefix": [
            "community.general.swupd",
            "swupd Manages updates and bundles in ClearLinux systems"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.swupd:",
            "    contenturl: ${2:string}",
            "    format: ${3:string}",
            "    manifest: ${4:int}",
            "    name: ${5:string}",
            "    state: ${6|present,absent|}",
            "    update: ${7|false,true|}",
            "    url: ${8:string}",
            "    verify: ${9|false,true|}",
            "    versionurl: ${10:string}",
            "$0"
        ],
        "description": "Manages updates and bundles in ClearLinux systems",
        "scope": "ansible"
    },
    "Log messages in the syslog": {
        "prefix": [
            "community.general.syslogger",
            "syslogger Log messages in the syslog"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.syslogger:",
            "    facility: ${2|daemon,kern,user,mail,auth,lpr,news,uucp,cron,syslog,local0,local1,local2,local3,local4,local5,local6,local7|}",
            "    ident: ${3:ansible_syslogger}",
            "    log_pid: ${4|false,true|}",
            "    msg: ${5:string}",
            "    priority: ${6|info,emerg,alert,crit,err,warning,notice,debug|}",
            "$0"
        ],
        "description": "Log messages in the syslog",
        "scope": "ansible"
    },
    "Manage OpenBSD system patches": {
        "prefix": [
            "community.general.syspatch",
            "syspatch Manage OpenBSD system patches"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.syspatch:",
            "    revert: ${2|all,one|}",
            "$0"
        ],
        "description": "Manage OpenBSD system patches",
        "scope": "ansible"
    },
    "Manage FreeBSD using sysrc": {
        "prefix": [
            "community.general.sysrc",
            "sysrc Manage FreeBSD using sysrc"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.sysrc:",
            "    delim: ${2: }",
            "    jail: ${3:string}",
            "    name: ${4:string}",
            "    path: ${5:/etc/rc.conf}",
            "    state: ${6|present,absent,value_present,value_absent|}",
            "    value: ${7:string}",
            "$0"
        ],
        "description": "Manage FreeBSD using sysrc",
        "scope": "ansible"
    },
    "Manage OpenBSD system upgrades": {
        "prefix": [
            "community.general.sysupgrade",
            "sysupgrade Manage OpenBSD system upgrades"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.sysupgrade:",
            "    fetch_only: ${2|true,false|}",
            "    force: ${3|false,true|}",
            "    installurl: ${4:string}",
            "    keep_files: ${5|false,true|}",
            "    snapshot: ${6|false,true|}",
            "$0"
        ],
        "description": "Manage OpenBSD system upgrades",
        "scope": "ansible"
    },
    "Creates/deletes an issue in a Taiga Project Management Platform": {
        "prefix": [
            "community.general.taiga_issue",
            "taiga_issue Creates/deletes an issue in a Taiga Project Management Platform"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.taiga_issue:",
            "    attachment: ${2:/tmp/test}",
            "    attachment_description: ${3:}",
            "    description: ${4:}",
            "    issue_type: ${5:string}",
            "    priority: ${6:Normal}",
            "    project: ${7:string}",
            "    severity: ${8:Normal}",
            "    state: ${9|present,absent|}",
            "    status: ${10:New}",
            "    subject: ${11:string}",
            "    tags:",
            "      - ${12:element}",
            "    taiga_host: ${13:https://api.taiga.io}",
            "$0"
        ],
        "description": "Creates/deletes an issue in a Taiga Project Management Platform",
        "scope": "ansible"
    },
    "Send notifications via telegram": {
        "prefix": [
            "community.general.telegram",
            "telegram Send notifications via telegram"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.telegram:",
            "    api_method: ${3:SendMessage}",
            "    token: ${4:string}",
            "$0"
        ],
        "description": "Send notifications via telegram",
        "scope": "ansible"
    },
    "Manages a Terraform deployment (and plans)": {
        "prefix": [
            "community.general.terraform",
            "terraform Manages a Terraform deployment (and plans)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.terraform:",
            "    backend_config_files:",
            "      - ${3:element}",
            "    binary_path: ${4:/tmp/test}",
            "    check_destroy: ${5|false,true|}",
            "    complex_vars: ${6|false,true|}",
            "    force_init: ${7|false,true|}",
            "    init_reconfigure: ${8|false,true|}",
            "    lock: ${9|true,false|}",
            "    lock_timeout: ${10:int}",
            "    overwrite_init: ${11|true,false|}",
            "    parallelism: ${12:int}",
            "    plan_file: ${13:/tmp/test}",
            "    plugin_paths:",
            "      - ${14:element}",
            "    project_path: ${15:/tmp/test}",
            "    provider_upgrade: ${16|false,true|}",
            "    purge_workspace: ${17|false,true|}",
            "    state: ${18|present,planned,absent|}",
            "    state_file: ${19:/tmp/test}",
            "    targets:",
            "      - ${20:element}",
            "    variables_files:",
            "      - ${22:element}",
            "    workspace: ${23:default}",
            "$0"
        ],
        "description": "Manages a Terraform deployment (and plans)",
        "scope": "ansible"
    },
    "Configure timezone setting": {
        "prefix": [
            "community.general.timezone",
            "timezone Configure timezone setting"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.timezone:",
            "    hwclock: ${2|local,UTC|}",
            "    name: ${3:string}",
            "$0"
        ],
        "description": "Configure timezone setting",
        "scope": "ansible"
    },
    "Sends a text message to a mobile phone through Twilio": {
        "prefix": [
            "community.general.twilio",
            "twilio Sends a text message to a mobile phone through Twilio"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.twilio:",
            "    account_sid: ${2:string}",
            "    auth_token: ${3:string}",
            "    from_number: ${4:string}",
            "    media_url: ${5:string}",
            "    msg: ${6:string}",
            "    to_numbers:",
            "      - ${7:element}",
            "$0"
        ],
        "description": "Sends a text message to a mobile phone through Twilio",
        "scope": "ansible"
    },
    "Send a message to typetalk": {
        "prefix": [
            "community.general.typetalk",
            "typetalk Send a message to typetalk"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.typetalk:",
            "    client_id: ${2:string}",
            "    client_secret: ${3:string}",
            "    msg: ${4:string}",
            "    topic: ${5:int}",
            "$0"
        ],
        "description": "Send a message to typetalk",
        "scope": "ansible"
    },
    "Manage dns entries on a univention corporate server": {
        "prefix": [
            "community.general.udm_dns_record",
            "udm_dns_record Manage dns entries on a univention corporate server"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.udm_dns_record:",
            "    name: ${3:string}",
            "    state: ${4|present,absent|}",
            "    type: ${5:string}",
            "    zone: ${6:string}",
            "$0"
        ],
        "description": "Manage dns entries on a univention corporate server",
        "scope": "ansible"
    },
    "Manage dns zones on a univention corporate server": {
        "prefix": [
            "community.general.udm_dns_zone",
            "udm_dns_zone Manage dns zones on a univention corporate server"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.udm_dns_zone:",
            "    contact: ${2:}",
            "    expire: ${3:604800}",
            "    interfaces:",
            "      - ${4:element}",
            "    mx:",
            "      - ${5:element}",
            "    nameserver:",
            "      - ${6:element}",
            "    refresh: ${7:3600}",
            "    retry: ${8:1800}",
            "    state: ${9|present,absent|}",
            "    ttl: ${10:600}",
            "    type: ${11:string}",
            "    zone: ${12:string}",
            "$0"
        ],
        "description": "Manage dns zones on a univention corporate server",
        "scope": "ansible"
    },
    "Manage of the posix group": {
        "prefix": [
            "community.general.udm_group",
            "udm_group Manage of the posix group"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.udm_group:",
            "    description: ${2:string}",
            "    name: ${3:string}",
            "    ou: ${4:}",
            "    position: ${5:}",
            "    state: ${6|present,absent|}",
            "    subpath: ${7:cn=groups}",
            "$0"
        ],
        "description": "Manage of the posix group",
        "scope": "ansible"
    },
    "Manage samba shares on a univention corporate server": {
        "prefix": [
            "community.general.udm_share",
            "udm_share Manage samba shares on a univention corporate server"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.udm_share:",
            "    directorymode: ${2:00755}",
            "    group: ${3:0}",
            "    host: ${4:string}",
            "    name: ${5:string}",
            "    nfsCustomSettings:",
            "      - ${6:element}",
            "    nfs_hosts:",
            "      - ${7:element}",
            "    ou: ${8:string}",
            "    owner: ${9:0}",
            "    path: ${10:/tmp/test}",
            "    root_squash: ${11|true,false|}",
            "    sambaBlockSize: ${12:string}",
            "    sambaBlockingLocks: ${13|true,false|}",
            "    sambaBrowseable: ${14|true,false|}",
            "    sambaCreateMode: ${15:0744}",
            "    sambaCscPolicy: ${16:manual}",
            "    sambaCustomSettings:",
            "      - ${17:element}",
            "    sambaDirectoryMode: ${18:0755}",
            "    sambaDirectorySecurityMode: ${19:0777}",
            "    sambaDosFilemode: ${20|false,true|}",
            "    sambaFakeOplocks: ${21|false,true|}",
            "    sambaForceCreateMode: ${22|false,true|}",
            "    sambaForceDirectoryMode: ${23|false,true|}",
            "    sambaForceDirectorySecurityMode: ${24|false,true|}",
            "    sambaForceGroup: ${25:string}",
            "    sambaForceSecurityMode: ${26|false,true|}",
            "    sambaForceUser: ${27:string}",
            "    sambaHideFiles: ${28:string}",
            "    sambaHideUnreadable: ${29|false,true|}",
            "    sambaHostsAllow:",
            "      - ${30:element}",
            "    sambaHostsDeny:",
            "      - ${31:element}",
            "    sambaInheritAcls: ${32|true,false|}",
            "    sambaInheritOwner: ${33|false,true|}",
            "    sambaInheritPermissions: ${34|false,true|}",
            "    sambaInvalidUsers: ${35:string}",
            "    sambaLevel2Oplocks: ${36|true,false|}",
            "    sambaLocking: ${37|true,false|}",
            "    sambaMSDFSRoot: ${38|false,true|}",
            "    sambaName: ${39:string}",
            "    sambaNtAclSupport: ${40|true,false|}",
            "    sambaOplocks: ${41|true,false|}",
            "    sambaPostexec: ${42:string}",
            "    sambaPreexec: ${43:string}",
            "    sambaPublic: ${44|false,true|}",
            "    sambaSecurityMode: ${45:0777}",
            "    sambaStrictLocking: ${46:Auto}",
            "    sambaVFSObjects: ${47:string}",
            "    sambaValidUsers: ${48:string}",
            "    sambaWriteList: ${49:string}",
            "    sambaWriteable: ${50|true,false|}",
            "    state: ${51|present,absent|}",
            "    subtree_checking: ${52|true,false|}",
            "    sync: ${53:sync}",
            "    writeable: ${54|true,false|}",
            "$0"
        ],
        "description": "Manage samba shares on a univention corporate server",
        "scope": "ansible"
    },
    "Manage posix users on a univention corporate server": {
        "prefix": [
            "community.general.udm_user",
            "udm_user Manage posix users on a univention corporate server"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.udm_user:",
            "    birthday: ${2:string}",
            "    city: ${3:string}",
            "    country: ${4:string}",
            "    department_number: ${5:string}",
            "    description: ${6:string}",
            "    display_name: ${7:string}",
            "    email:",
            "      - ${8:element}",
            "    employee_number: ${9:string}",
            "    employee_type: ${10:string}",
            "    firstname: ${11:string}",
            "    gecos: ${12:string}",
            "    groups:",
            "      - ${13:element}",
            "    home_share: ${14:string}",
            "    home_share_path: ${15:string}",
            "    home_telephone_number:",
            "      - ${16:element}",
            "    homedrive: ${17:string}",
            "    lastname: ${18:string}",
            "    mail_alternative_address:",
            "      - ${19:element}",
            "    mail_home_server: ${20:string}",
            "    mail_primary_address: ${21:string}",
            "    mobile_telephone_number:",
            "      - ${22:element}",
            "    organisation: ${23:string}",
            "    ou: ${24:}",
            "    overridePWHistory: ${25|false,true|}",
            "    overridePWLength: ${26|false,true|}",
            "    pager_telephonenumber:",
            "      - ${27:element}",
            "    password: ${28:string}",
            "    phone:",
            "      - ${29:element}",
            "    position: ${30:}",
            "    postcode: ${31:string}",
            "    primary_group: ${32:string}",
            "    profilepath: ${33:string}",
            "    pwd_change_next_login: ${34|0,1|}",
            "    room_number: ${35:string}",
            "    samba_privileges:",
            "      - ${36:element}",
            "    samba_user_workstations:",
            "      - ${37:element}",
            "    sambahome: ${38:string}",
            "    scriptpath: ${39:string}",
            "    secretary:",
            "      - ${40:element}",
            "    serviceprovider:",
            "      - ${41:element}",
            "    shell: ${42:/bin/bash}",
            "    state: ${43|present,absent|}",
            "    street: ${44:string}",
            "    subpath: ${45:cn=users}",
            "    title: ${46:string}",
            "    unixhome: ${47:string}",
            "    update_password: ${48|always,on_create|}",
            "    userexpiry: ${49:string}",
            "    username: ${50:string}",
            "$0"
        ],
        "description": "Manage posix users on a univention corporate server",
        "scope": "ansible"
    },
    "Manage firewall with UFW": {
        "prefix": [
            "community.general.ufw",
            "ufw Manage firewall with UFW"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.ufw:",
            "    comment: ${2:string}",
            "    default: ${3|allow,deny,reject|}",
            "    delete: ${4|false,true|}",
            "    direction: ${5|in,incoming,out,outgoing,routed|}",
            "    from_ip: ${6:any}",
            "    from_port: ${7:string}",
            "    insert: ${8:int}",
            "    insert_relative_to: ${9|zero,first-ipv4,first-ipv6,last-ipv4,last-ipv6|}",
            "    interface: ${10:string}",
            "    interface_in: ${11:string}",
            "    interface_out: ${12:string}",
            "    log: ${13|false,true|}",
            "    logging: ${14|on,off,low,medium,high,full|}",
            "    name: ${15:string}",
            "    proto: ${16|any,tcp,udp,ipv6,esp,ah,gre,igmp|}",
            "    route: ${17|false,true|}",
            "    rule: ${18|allow,deny,limit,reject|}",
            "    state: ${19|disabled,enabled,reloaded,reset|}",
            "    to_ip: ${20:any}",
            "    to_port: ${21:string}",
            "$0"
        ],
        "description": "Manage firewall with UFW",
        "scope": "ansible"
    },
    "Pause and start Uptime Robot monitoring": {
        "prefix": [
            "community.general.uptimerobot",
            "uptimerobot Pause and start Uptime Robot monitoring"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.uptimerobot:",
            "    apikey: ${2:string}",
            "    monitorid: ${3:string}",
            "    state: ${4|started,paused|}",
            "$0"
        ],
        "description": "Pause and start Uptime Robot monitoring",
        "scope": "ansible"
    },
    "Urpmi manager": {
        "prefix": [
            "community.general.urpmi",
            "urpmi Urpmi manager"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.urpmi:",
            "    force: ${2|true,false|}",
            "    name:",
            "      - ${3:element}",
            "    no_recommends: ${4|true,false|}",
            "    root: ${5:string}",
            "    state: ${6|present,absent,installed,removed|}",
            "    update_cache: ${7|false,true|}",
            "$0"
        ],
        "description": "Urpmi manager",
        "scope": "ansible"
    },
    "Create, update or destroy an aaa group object in Sophos UTM": {
        "prefix": [
            "community.general.utm_aaa_group",
            "utm_aaa_group Create, update or destroy an aaa group object in Sophos UTM"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.utm_aaa_group:",
            "    adirectory_groups:",
            "      - ${2:element}",
            "    backend_match: ${4|none,adirectory,edirectory,radius,tacacs,ldap|}",
            "    comment: ${5:}",
            "    dynamic: ${6|none,ipsec_dn,directory_groups|}",
            "    edirectory_groups:",
            "      - ${7:element}",
            "    ipsec_dn: ${9:}",
            "    ldap_attribute: ${10:}",
            "    ldap_attribute_value: ${11:}",
            "    members:",
            "      - ${12:element}",
            "    name: ${13:string}",
            "    network: ${14:}",
            "    radius_groups:",
            "      - ${15:element}",
            "    state: ${16|present,absent|}",
            "    tacacs_groups:",
            "      - ${17:element}",
            "    utm_host: ${18:string}",
            "    utm_port: ${19:4444}",
            "    utm_protocol: ${20|https,http|}",
            "    utm_token: ${21:string}",
            "    validate_certs: ${22|true,false|}",
            "$0"
        ],
        "description": "Create, update or destroy an aaa group object in Sophos UTM",
        "scope": "ansible"
    },
    "Get info for reverse_proxy frontend entry in Sophos UTM": {
        "prefix": [
            "community.general.utm_aaa_group_info",
            "utm_aaa_group_info Get info for reverse_proxy frontend entry in Sophos UTM"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.utm_aaa_group_info:",
            "    name: ${3:string}",
            "    state: ${4|present,absent|}",
            "    utm_host: ${5:string}",
            "    utm_port: ${6:4444}",
            "    utm_protocol: ${7|https,http|}",
            "    utm_token: ${8:string}",
            "    validate_certs: ${9|true,false|}",
            "$0"
        ],
        "description": "Get info for reverse_proxy frontend entry in Sophos UTM",
        "scope": "ansible"
    },
    "Create, update or destroy ca host_key_cert entry in Sophos UTM": {
        "prefix": [
            "community.general.utm_ca_host_key_cert",
            "utm_ca_host_key_cert Create, update or destroy ca host_key_cert entry in Sophos UTM"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.utm_ca_host_key_cert:",
            "    ca: ${2:string}",
            "    certificate: ${3:string}",
            "    comment: ${4:string}",
            "    encrypted: ${5|false,true|}",
            "    key: ${7:string}",
            "    meta: ${8:string}",
            "    name: ${9:string}",
            "    state: ${10|present,absent|}",
            "    utm_host: ${11:string}",
            "    utm_port: ${12:4444}",
            "    utm_protocol: ${13|https,http|}",
            "    utm_token: ${14:string}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "Create, update or destroy ca host_key_cert entry in Sophos UTM",
        "scope": "ansible"
    },
    "Get info for a ca host_key_cert entry in Sophos UTM": {
        "prefix": [
            "community.general.utm_ca_host_key_cert_info",
            "utm_ca_host_key_cert_info Get info for a ca host_key_cert entry in Sophos UTM"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.utm_ca_host_key_cert_info:",
            "    name: ${3:string}",
            "    state: ${4|present,absent|}",
            "    utm_host: ${5:string}",
            "    utm_port: ${6:4444}",
            "    utm_protocol: ${7|https,http|}",
            "    utm_token: ${8:string}",
            "    validate_certs: ${9|true,false|}",
            "$0"
        ],
        "description": "Get info for a ca host_key_cert entry in Sophos UTM",
        "scope": "ansible"
    },
    "Create, update or destroy dns entry in Sophos UTM": {
        "prefix": [
            "community.general.utm_dns_host",
            "utm_dns_host Create, update or destroy dns entry in Sophos UTM"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.utm_dns_host:",
            "    address: ${2:0.0.0.0}",
            "    address6: ${3:::}",
            "    comment: ${4:}",
            "    hostname: ${6:string}",
            "    interface: ${7:}",
            "    name: ${8:string}",
            "    resolved: ${9|false,true|}",
            "    resolved6: ${10|false,true|}",
            "    state: ${11|present,absent|}",
            "    timeout: ${12:0}",
            "    utm_host: ${13:string}",
            "    utm_port: ${14:4444}",
            "    utm_protocol: ${15|https,http|}",
            "    utm_token: ${16:string}",
            "    validate_certs: ${17|true,false|}",
            "$0"
        ],
        "description": "Create, update or destroy dns entry in Sophos UTM",
        "scope": "ansible"
    },
    "Create, update or destroy network/interface_address object": {
        "prefix": [
            "community.general.utm_network_interface_address",
            "utm_network_interface_address Create, update or destroy network/interface_address object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.utm_network_interface_address:",
            "    address: ${2:string}",
            "    address6: ${3:string}",
            "    comment: ${4:}",
            "    name: ${6:string}",
            "    resolved: ${7|false,true|}",
            "    resolved6: ${8|false,true|}",
            "    state: ${9|present,absent|}",
            "    utm_host: ${10:string}",
            "    utm_port: ${11:4444}",
            "    utm_protocol: ${12|https,http|}",
            "    utm_token: ${13:string}",
            "    validate_certs: ${14|true,false|}",
            "$0"
        ],
        "description": "Create, update or destroy network/interface_address object",
        "scope": "ansible"
    },
    "Get info for a network/interface_address object": {
        "prefix": [
            "community.general.utm_network_interface_address_info",
            "utm_network_interface_address_info Get info for a network/interface_address object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.utm_network_interface_address_info:",
            "    name: ${3:string}",
            "    state: ${4|present,absent|}",
            "    utm_host: ${5:string}",
            "    utm_port: ${6:4444}",
            "    utm_protocol: ${7|https,http|}",
            "    utm_token: ${8:string}",
            "    validate_certs: ${9|true,false|}",
            "$0"
        ],
        "description": "Get info for a network/interface_address object",
        "scope": "ansible"
    },
    "Create, update or destroy reverse_proxy auth_profile entry in Sophos UTM": {
        "prefix": [
            "community.general.utm_proxy_auth_profile",
            "utm_proxy_auth_profile Create, update or destroy reverse_proxy auth_profile entry in Sophos UTM"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.utm_proxy_auth_profile:",
            "    aaa:",
            "      - ${2:element}",
            "    backend_mode: ${3|None,Basic|}",
            "    backend_strip_basic_auth: ${4|true,false|}",
            "    backend_user_prefix: ${5:}",
            "    backend_user_suffix: ${6:}",
            "    basic_prompt: ${7:string}",
            "    comment: ${8:}",
            "    frontend_cookie: ${9:string}",
            "    frontend_cookie_secret: ${10:string}",
            "    frontend_form: ${11:string}",
            "    frontend_form_template: ${12:}",
            "    frontend_login: ${13:string}",
            "    frontend_logout: ${14:string}",
            "    frontend_mode: ${15|Basic,Form|}",
            "    frontend_realm: ${16:string}",
            "    frontend_session_allow_persistency: ${17|false,true|}",
            "    frontend_session_lifetime: ${18:int}",
            "    frontend_session_lifetime_limited: ${19|true,false|}",
            "    frontend_session_lifetime_scope: ${20|hours,days,minutes|}",
            "    frontend_session_timeout: ${21:int}",
            "    frontend_session_timeout_enabled: ${22|true,false|}",
            "    frontend_session_timeout_scope: ${23|minutes,days,hours|}",
            "    logout_delegation_urls:",
            "      - ${25:element}",
            "    logout_mode: ${26|None,Delegation|}",
            "    name: ${27:string}",
            "    redirect_to_requested_url: ${28|false,true|}",
            "    state: ${29|present,absent|}",
            "    utm_host: ${30:string}",
            "    utm_port: ${31:4444}",
            "    utm_protocol: ${32|https,http|}",
            "    utm_token: ${33:string}",
            "    validate_certs: ${34|true,false|}",
            "$0"
        ],
        "description": "Create, update or destroy reverse_proxy auth_profile entry in Sophos UTM",
        "scope": "ansible"
    },
    "Create, update or destroy reverse_proxy exception entry in Sophos UTM": {
        "prefix": [
            "community.general.utm_proxy_exception",
            "utm_proxy_exception Create, update or destroy reverse_proxy exception entry in Sophos UTM"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.utm_proxy_exception:",
            "    name: ${3:string}",
            "    op: ${4|AND,OR|}",
            "    path:",
            "      - ${5:element}",
            "    skip_custom_threats_filters:",
            "      - ${6:element}",
            "    skip_threats_filter_categories:",
            "      - ${7:element}",
            "    skipav: ${8|false,true|}",
            "    skipbadclients: ${9|false,true|}",
            "    skipcookie: ${10|false,true|}",
            "    skipform: ${11|false,true|}",
            "    skipform_missingtoken: ${12|false,true|}",
            "    skiphtmlrewrite: ${13|false,true|}",
            "    skiptft: ${14|false,true|}",
            "    skipurl: ${15|false,true|}",
            "    source:",
            "      - ${16:element}",
            "    state: ${17|present,absent|}",
            "    status: ${18|true,false|}",
            "    utm_host: ${19:string}",
            "    utm_port: ${20:4444}",
            "    utm_protocol: ${21|https,http|}",
            "    utm_token: ${22:string}",
            "    validate_certs: ${23|true,false|}",
            "$0"
        ],
        "description": "Create, update or destroy reverse_proxy exception entry in Sophos UTM",
        "scope": "ansible"
    },
    "Create, update or destroy reverse_proxy frontend entry in Sophos UTM": {
        "prefix": [
            "community.general.utm_proxy_frontend_info",
            "utm_proxy_frontend_info Create, update or destroy reverse_proxy frontend entry in Sophos UTM"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.utm_proxy_frontend_info:",
            "    name: ${3:string}",
            "    state: ${4|present,absent|}",
            "    utm_host: ${5:string}",
            "    utm_port: ${6:4444}",
            "    utm_protocol: ${7|https,http|}",
            "    utm_token: ${8:string}",
            "    validate_certs: ${9|true,false|}",
            "$0"
        ],
        "description": "Create, update or destroy reverse_proxy frontend entry in Sophos UTM",
        "scope": "ansible"
    },
    "Create, update or destroy reverse_proxy location entry in Sophos UTM": {
        "prefix": [
            "community.general.utm_proxy_location_info",
            "utm_proxy_location_info Create, update or destroy reverse_proxy location entry in Sophos UTM"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.utm_proxy_location_info:",
            "    name: ${3:string}",
            "    state: ${4|present,absent|}",
            "    utm_host: ${5:string}",
            "    utm_port: ${6:4444}",
            "    utm_protocol: ${7|https,http|}",
            "    utm_token: ${8:string}",
            "    validate_certs: ${9|true,false|}",
            "$0"
        ],
        "description": "Create, update or destroy reverse_proxy location entry in Sophos UTM",
        "scope": "ansible"
    },
    "Module to control VDO": {
        "prefix": [
            "community.general.vdo",
            "vdo Module to control VDO"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.vdo:",
            "    ackthreads: ${2:string}",
            "    activated: ${3|false,true|}",
            "    biothreads: ${4:string}",
            "    blockmapcachesize: ${5:string}",
            "    compression: ${6|disabled,enabled|}",
            "    cputhreads: ${7:string}",
            "    deduplication: ${8|disabled,enabled|}",
            "    device: ${9:string}",
            "    emulate512: ${10|false,true|}",
            "    force: ${11|false,true|}",
            "    growphysical: ${12|false,true|}",
            "    indexmem: ${13:string}",
            "    indexmode: ${14|dense,sparse|}",
            "    logicalsize: ${15:string}",
            "    logicalthreads: ${16:string}",
            "    name: ${17:string}",
            "    physicalthreads: ${18:string}",
            "    readcache: ${19|disabled,enabled|}",
            "    readcachesize: ${20:string}",
            "    running: ${21|false,true|}",
            "    slabsize: ${22:string}",
            "    state: ${23|present,absent|}",
            "    writepolicy: ${24|async,auto,sync|}",
            "$0"
        ],
        "description": "Module to control VDO",
        "scope": "ansible"
    },
    "Updates Vertica configuration parameters": {
        "prefix": [
            "community.general.vertica_configuration",
            "vertica_configuration Updates Vertica configuration parameters"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.vertica_configuration:",
            "    cluster: ${2:localhost}",
            "    db: ${3:string}",
            "    login_password: ${4:string}",
            "    login_user: ${5:dbadmin}",
            "    parameter: ${6:string}",
            "    port: ${7:5433}",
            "    value: ${8:string}",
            "$0"
        ],
        "description": "Updates Vertica configuration parameters",
        "scope": "ansible"
    },
    "Gathers Vertica database facts": {
        "prefix": [
            "community.general.vertica_info",
            "vertica_info Gathers Vertica database facts"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.vertica_info:",
            "    cluster: ${2:localhost}",
            "    db: ${3:string}",
            "    login_password: ${4:string}",
            "    login_user: ${5:dbadmin}",
            "    port: ${6:5433}",
            "$0"
        ],
        "description": "Gathers Vertica database facts",
        "scope": "ansible"
    },
    "Adds or removes Vertica database roles and assigns roles to them": {
        "prefix": [
            "community.general.vertica_role",
            "vertica_role Adds or removes Vertica database roles and assigns roles to them"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.vertica_role:",
            "    assigned_roles: ${2:string}",
            "    cluster: ${3:localhost}",
            "    db: ${4:string}",
            "    login_password: ${5:string}",
            "    login_user: ${6:dbadmin}",
            "    port: ${7:5433}",
            "    role: ${8:string}",
            "    state: ${9|present,absent|}",
            "$0"
        ],
        "description": "Adds or removes Vertica database roles and assigns roles to them",
        "scope": "ansible"
    },
    "Adds or removes Vertica database schema and roles": {
        "prefix": [
            "community.general.vertica_schema",
            "vertica_schema Adds or removes Vertica database schema and roles"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.vertica_schema:",
            "    cluster: ${2:localhost}",
            "    create_roles: ${3:string}",
            "    db: ${4:string}",
            "    login_password: ${5:string}",
            "    login_user: ${6:dbadmin}",
            "    owner: ${7:string}",
            "    port: ${8:5433}",
            "    schema: ${9:string}",
            "    state: ${10|present,absent|}",
            "    usage_roles: ${11:string}",
            "$0"
        ],
        "description": "Adds or removes Vertica database schema and roles",
        "scope": "ansible"
    },
    "Adds or removes Vertica database users and assigns roles": {
        "prefix": [
            "community.general.vertica_user",
            "vertica_user Adds or removes Vertica database users and assigns roles"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.vertica_user:",
            "    cluster: ${2:localhost}",
            "    db: ${3:string}",
            "    expired: ${4|false,true|}",
            "    ldap: ${5|false,true|}",
            "    login_password: ${6:string}",
            "    login_user: ${7:dbadmin}",
            "    password: ${8:string}",
            "    port: ${9:5433}",
            "    profile: ${10:string}",
            "    resource_pool: ${11:string}",
            "    roles: ${12:string}",
            "    state: ${13|present,absent,locked|}",
            "    user: ${14:string}",
            "$0"
        ],
        "description": "Adds or removes Vertica database users and assigns roles",
        "scope": "ansible"
    },
    "Manage export groups on Vexata VX100 storage arrays": {
        "prefix": [
            "community.general.vexata_eg",
            "vexata_eg Manage export groups on Vexata VX100 storage arrays"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.vexata_eg:",
            "    array: ${2:string}",
            "    ig: ${3:string}",
            "    name: ${4:string}",
            "    password: ${5:string}",
            "    pg: ${6:string}",
            "    state: ${7|present,absent|}",
            "    user: ${8:string}",
            "    validate_certs: ${9|false,true|}",
            "    vg: ${10:string}",
            "$0"
        ],
        "description": "Manage export groups on Vexata VX100 storage arrays",
        "scope": "ansible"
    },
    "Manage volumes on Vexata VX100 storage arrays": {
        "prefix": [
            "community.general.vexata_volume",
            "vexata_volume Manage volumes on Vexata VX100 storage arrays"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.vexata_volume:",
            "    array: ${2:string}",
            "    name: ${3:string}",
            "    password: ${4:string}",
            "    size: ${5:string}",
            "    state: ${6|present,absent|}",
            "    user: ${7:string}",
            "    validate_certs: ${8|false,true|}",
            "$0"
        ],
        "description": "Manage volumes on Vexata VX100 storage arrays",
        "scope": "ansible"
    },
    "Manage SmartOS virtual machines and zones": {
        "prefix": [
            "community.general.vmadm",
            "vmadm Manage SmartOS virtual machines and zones"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.vmadm:",
            "    archive_on_delete: ${2|false,true|}",
            "    autoboot: ${3|false,true|}",
            "    boot: ${4:string}",
            "    brand: ${5|joyent,joyent-minimal,lx,kvm,bhyve|}",
            "    cpu_cap: ${6:int}",
            "    cpu_shares: ${7:int}",
            "    cpu_type: ${8|qemu64,host|}",
            "    delegate_dataset: ${10|false,true|}",
            "    disk_driver: ${11:string}",
            "    disks:",
            "      - ${12:element}",
            "    dns_domain: ${13:string}",
            "    docker: ${14|false,true|}",
            "    filesystems:",
            "      - ${15:element}",
            "    firewall_enabled: ${16|false,true|}",
            "    force: ${17|false,true|}",
            "    fs_allowed: ${18:string}",
            "    hostname: ${19:string}",
            "    image_uuid: ${20:string}",
            "    indestructible_delegated: ${21|false,true|}",
            "    indestructible_zoneroot: ${22|false,true|}",
            "    internal_metadata_namespace: ${24:string}",
            "    kernel_version: ${25:string}",
            "    limit_priv: ${26:string}",
            "    maintain_resolvers: ${27|false,true|}",
            "    max_locked_memory: ${28:int}",
            "    max_lwps: ${29:int}",
            "    max_physical_memory: ${30:int}",
            "    max_swap: ${31:int}",
            "    mdata_exec_timeout: ${32:int}",
            "    name: ${33:string}",
            "    nic_driver: ${34:string}",
            "    nics:",
            "      - ${35:element}",
            "    nowait: ${36|false,true|}",
            "    qemu_extra_opts: ${37:string}",
            "    qemu_opts: ${38:string}",
            "    quota: ${39:int}",
            "    ram: ${40:int}",
            "    resolvers:",
            "      - ${41:element}",
            "    spice_opts: ${43:string}",
            "    spice_password: ${44:string}",
            "    state: ${45|running,present,absent,deleted,stopped,created,restarted,rebooted|}",
            "    tmpfs: ${46:int}",
            "    uuid: ${47:string}",
            "    vcpus: ${48:int}",
            "    vga: ${49:string}",
            "    virtio_txburst: ${50:int}",
            "    virtio_txtimer: ${51:int}",
            "    vnc_password: ${52:string}",
            "    vnc_port: ${53:int}",
            "    zfs_data_compression: ${54:string}",
            "    zfs_data_recsize: ${55:int}",
            "    zfs_filesystem_limit: ${56:int}",
            "    zfs_io_priority: ${57:int}",
            "    zfs_root_compression: ${58:string}",
            "    zfs_root_recsize: ${59:int}",
            "    zfs_snapshot_limit: ${60:int}",
            "    zpool: ${61:string}",
            "$0"
        ],
        "description": "Manage SmartOS virtual machines and zones",
        "scope": "ansible"
    },
    "Send a magic Wake-on-LAN (WoL) broadcast packet": {
        "prefix": [
            "community.general.wakeonlan",
            "wakeonlan Send a magic Wake-on-LAN (WoL) broadcast packet"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.wakeonlan:",
            "    broadcast: ${2:255.255.255.255}",
            "    mac: ${3:string}",
            "    port: ${4:7}",
            "$0"
        ],
        "description": "Send a magic Wake-on-LAN (WoL) broadcast packet",
        "scope": "ansible"
    },
    "Manages WDC UltraStar Data102 Out-Of-Band controllers using Redfish APIs": {
        "prefix": [
            "community.general.wdc_redfish_info",
            "wdc_redfish_info Manages WDC UltraStar Data102 Out-Of-Band controllers using Redfish APIs"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.wdc_redfish_info:",
            "    auth_token: ${2:string}",
            "    baseuri: ${3:string}",
            "    category: ${4:string}",
            "    command:",
            "      - ${5:element}",
            "    ioms:",
            "      - ${6:element}",
            "    password: ${7:string}",
            "    timeout: ${8:10}",
            "    username: ${9:string}",
            "$0"
        ],
        "description": "Manages WDC UltraStar Data102 Out-Of-Band controllers using Redfish APIs",
        "scope": "ansible"
    },
    "Add or remove applications on a Webfaction host": {
        "prefix": [
            "community.general.webfaction_app",
            "webfaction_app Add or remove applications on a Webfaction host"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.webfaction_app:",
            "    autostart: ${2|false,true|}",
            "    extra_info: ${3:}",
            "    login_name: ${4:string}",
            "    login_password: ${5:string}",
            "    machine: ${6:string}",
            "    name: ${7:string}",
            "    port_open: ${8|false,true|}",
            "    state: ${9|present,absent|}",
            "    type: ${10:string}",
            "$0"
        ],
        "description": "Add or remove applications on a Webfaction host",
        "scope": "ansible"
    },
    "Add or remove a database on Webfaction": {
        "prefix": [
            "community.general.webfaction_db",
            "webfaction_db Add or remove a database on Webfaction"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.webfaction_db:",
            "    login_name: ${2:string}",
            "    login_password: ${3:string}",
            "    machine: ${4:string}",
            "    name: ${5:string}",
            "    password: ${6:string}",
            "    state: ${7|present,absent|}",
            "    type: ${8|mysql,postgresql|}",
            "$0"
        ],
        "description": "Add or remove a database on Webfaction",
        "scope": "ansible"
    },
    "Add or remove domains and subdomains on Webfaction": {
        "prefix": [
            "community.general.webfaction_domain",
            "webfaction_domain Add or remove domains and subdomains on Webfaction"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.webfaction_domain:",
            "    login_name: ${2:string}",
            "    login_password: ${3:string}",
            "    name: ${4:string}",
            "    state: ${5|present,absent|}",
            "    subdomains:",
            "      - ${6:element}",
            "$0"
        ],
        "description": "Add or remove domains and subdomains on Webfaction",
        "scope": "ansible"
    },
    "Add or remove mailboxes on Webfaction": {
        "prefix": [
            "community.general.webfaction_mailbox",
            "webfaction_mailbox Add or remove mailboxes on Webfaction"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.webfaction_mailbox:",
            "    login_name: ${2:string}",
            "    login_password: ${3:string}",
            "    mailbox_name: ${4:string}",
            "    mailbox_password: ${5:string}",
            "    state: ${6|present,absent|}",
            "$0"
        ],
        "description": "Add or remove mailboxes on Webfaction",
        "scope": "ansible"
    },
    "Add or remove a website on a Webfaction host": {
        "prefix": [
            "community.general.webfaction_site",
            "webfaction_site Add or remove a website on a Webfaction host"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.webfaction_site:",
            "    host: ${2:string}",
            "    https: ${3|false,true|}",
            "    login_name: ${4:string}",
            "    login_password: ${5:string}",
            "    name: ${6:string}",
            "    site_apps:",
            "      - ${7:element}",
            "    state: ${8|present,absent|}",
            "    subdomains:",
            "      - ${9:element}",
            "$0"
        ],
        "description": "Add or remove a website on a Webfaction host",
        "scope": "ansible"
    },
    "Manage user defined extended attributes": {
        "prefix": [
            "community.general.xattr",
            "xattr Manage user defined extended attributes"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.xattr:",
            "    follow: ${2|true,false|}",
            "    key: ${3:string}",
            "    namespace: ${4:user}",
            "    path: ${5:/tmp/test}",
            "    state: ${6|read,absent,all,keys,present|}",
            "    value: ${7:string}",
            "$0"
        ],
        "description": "Manage user defined extended attributes",
        "scope": "ansible"
    },
    "Manage packages with XBPS": {
        "prefix": [
            "community.general.xbps",
            "xbps Manage packages with XBPS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.xbps:",
            "    name:",
            "      - ${2:element}",
            "    recurse: ${3|false,true|}",
            "    state: ${4|present,absent,latest,installed,removed|}",
            "    update_cache: ${5|true,false|}",
            "    upgrade: ${6|false,true|}",
            "    upgrade_xbps: ${7|true,false|}",
            "$0"
        ],
        "description": "Manage packages with XBPS",
        "scope": "ansible"
    },
    "Manages Lenovo Out-Of-Band controllers using Redfish APIs": {
        "prefix": [
            "community.general.xcc_redfish_command",
            "xcc_redfish_command Manages Lenovo Out-Of-Band controllers using Redfish APIs"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.xcc_redfish_command:",
            "    auth_token: ${2:string}",
            "    baseuri: ${3:string}",
            "    category: ${4:string}",
            "    command:",
            "      - ${5:element}",
            "    password: ${6:string}",
            "    resource_id: ${8:string}",
            "    resource_uri: ${9:string}",
            "    timeout: ${10:10}",
            "    username: ${11:string}",
            "$0"
        ],
        "description": "Manages Lenovo Out-Of-Band controllers using Redfish APIs",
        "scope": "ansible"
    },
    "Get facts reported on xenserver": {
        "prefix": [
            "community.general.xenserver_facts",
            "xenserver_facts Get facts reported on xenserver"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.xenserver_facts:",
            "$0"
        ],
        "description": "Get facts reported on xenserver",
        "scope": "ansible"
    },
    "Manages virtual machines running on Citrix Hypervisor/XenServer host or pool": {
        "prefix": [
            "community.general.xenserver_guest",
            "xenserver_guest Manages virtual machines running on Citrix Hypervisor/XenServer host or pool"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.xenserver_guest:",
            "    custom_params:",
            "      - ${3:element}",
            "    disks:",
            "      - ${4:element}",
            "    folder: ${5:string}",
            "    force: ${6|false,true|}",
            "    home_server: ${8:string}",
            "    hostname: ${9:localhost}",
            "    is_template: ${10|false,true|}",
            "    linked_clone: ${11|false,true|}",
            "    name: ${12:string}",
            "    name_desc: ${13:string}",
            "    networks:",
            "      - ${14:element}",
            "    password: ${15:string}",
            "    state: ${16|present,absent,poweredon|}",
            "    state_change_timeout: ${17:0}",
            "    template: ${18:string}",
            "    template_uuid: ${19:string}",
            "    username: ${20:root}",
            "    uuid: ${21:string}",
            "    validate_certs: ${22|true,false|}",
            "    wait_for_ip_address: ${23|false,true|}",
            "$0"
        ],
        "description": "Manages virtual machines running on Citrix Hypervisor/XenServer host or pool",
        "scope": "ansible"
    },
    "Gathers information for virtual machines running on Citrix Hypervisor/XenServer host or pool": {
        "prefix": [
            "community.general.xenserver_guest_info",
            "xenserver_guest_info Gathers information for virtual machines running on Citrix Hypervisor/XenServer host or pool"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.xenserver_guest_info:",
            "    hostname: ${2:localhost}",
            "    name: ${3:string}",
            "    password: ${4:string}",
            "    username: ${5:root}",
            "    uuid: ${6:string}",
            "    validate_certs: ${7|true,false|}",
            "$0"
        ],
        "description": "Gathers information for virtual machines running on Citrix Hypervisor/XenServer host or pool",
        "scope": "ansible"
    },
    "Manages power states of virtual machines running on Citrix Hypervisor/XenServer host or pool": {
        "prefix": [
            "community.general.xenserver_guest_powerstate",
            "xenserver_guest_powerstate Manages power states of virtual machines running on Citrix Hypervisor/XenServer host or pool"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.xenserver_guest_powerstate:",
            "    hostname: ${2:localhost}",
            "    name: ${3:string}",
            "    password: ${4:string}",
            "    state: ${5|present,powered-on,powered-off,restarted,shutdown-guest,reboot-guest,suspended|}",
            "    state_change_timeout: ${6:0}",
            "    username: ${7:root}",
            "    uuid: ${8:string}",
            "    validate_certs: ${9|true,false|}",
            "    wait_for_ip_address: ${10|false,true|}",
            "$0"
        ],
        "description": "Manages power states of virtual machines running on Citrix Hypervisor/XenServer host or pool",
        "scope": "ansible"
    },
    "Edit XFCE4 Configurations": {
        "prefix": [
            "community.general.xfconf",
            "xfconf Edit XFCE4 Configurations"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.xfconf:",
            "    channel: ${2:string}",
            "    disable_facts: ${3|true,false|}",
            "    force_array: ${4|false,true|}",
            "    property: ${5:string}",
            "    state: ${6|present,absent|}",
            "    value:",
            "      - ${7:element}",
            "    value_type: ${8|string,int,double,bool,uint,uchar,char,uint64,int64,float|}",
            "$0"
        ],
        "description": "Edit XFCE4 Configurations",
        "scope": "ansible"
    },
    "Retrieve XFCE4 configurations": {
        "prefix": [
            "community.general.xfconf_info",
            "xfconf_info Retrieve XFCE4 configurations"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.xfconf_info:",
            "    channel: ${2:string}",
            "    property: ${3:string}",
            "$0"
        ],
        "description": "Retrieve XFCE4 configurations",
        "scope": "ansible"
    },
    "Manage quotas on XFS filesystems": {
        "prefix": [
            "community.general.xfs_quota",
            "xfs_quota Manage quotas on XFS filesystems"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.xfs_quota:",
            "    bhard: ${2:string}",
            "    bsoft: ${3:string}",
            "    ihard: ${4:int}",
            "    isoft: ${5:int}",
            "    mountpoint: ${6:string}",
            "    name: ${7:string}",
            "    rtbhard: ${8:string}",
            "    rtbsoft: ${9:string}",
            "    state: ${10|present,absent|}",
            "    type: ${11|user,group,project|}",
            "$0"
        ],
        "description": "Manage quotas on XFS filesystems",
        "scope": "ansible"
    },
    "Manage bits and pieces of XML files or strings": {
        "prefix": [
            "community.general.xml",
            "xml Manage bits and pieces of XML files or strings"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.xml:",
            "    add_children:",
            "      - ${2:element}",
            "    attribute: ${3:\"raw\"}",
            "    backup: ${4|false,true|}",
            "    content: ${5|attribute,text|}",
            "    count: ${6|false,true|}",
            "    input_type: ${7|yaml,xml|}",
            "    insertafter: ${8|false,true|}",
            "    insertbefore: ${9|false,true|}",
            "    path: ${11:/tmp/test}",
            "    pretty_print: ${12|false,true|}",
            "    print_match: ${13|false,true|}",
            "    set_children:",
            "      - ${14:element}",
            "    state: ${15|present,absent|}",
            "    strip_cdata_tags: ${16|false,true|}",
            "    value: ${17:\"raw\"}",
            "    xmlstring: ${18:string}",
            "    xpath: ${19:string}",
            "$0"
        ],
        "description": "Manage bits and pieces of XML files or strings",
        "scope": "ansible"
    },
    "Manage node.js packages with Yarn": {
        "prefix": [
            "community.general.yarn",
            "yarn Manage node.js packages with Yarn"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.yarn:",
            "    executable: ${2:/tmp/test}",
            "    global: ${3|false,true|}",
            "    ignore_scripts: ${4|false,true|}",
            "    name: ${5:string}",
            "    path: ${6:/tmp/test}",
            "    production: ${7|false,true|}",
            "    registry: ${8:string}",
            "    state: ${9|present,absent,latest|}",
            "    version: ${10:string}",
            "$0"
        ],
        "description": "Manage node.js packages with Yarn",
        "scope": "ansible"
    },
    "Locks / unlocks a installed package(s) from being updated by yum package manager": {
        "prefix": [
            "community.general.yum_versionlock",
            "yum_versionlock Locks / unlocks a installed package(s) from being updated by yum package manager"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.yum_versionlock:",
            "    name:",
            "      - ${2:element}",
            "    state: ${3|present,absent|}",
            "$0"
        ],
        "description": "Locks / unlocks a installed package(s) from being updated by yum package manager",
        "scope": "ansible"
    },
    "Manage zfs": {
        "prefix": [
            "community.general.zfs",
            "zfs Manage zfs"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.zfs:",
            "    name: ${3:string}",
            "    origin: ${4:string}",
            "    state: ${5|absent,present|}",
            "$0"
        ],
        "description": "Manage zfs",
        "scope": "ansible"
    },
    "Manage ZFS delegated administration (user admin privileges)": {
        "prefix": [
            "community.general.zfs_delegate_admin",
            "zfs_delegate_admin Manage ZFS delegated administration (user admin privileges)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.zfs_delegate_admin:",
            "    descendents: ${2|false,true|}",
            "    everyone: ${3|false,true|}",
            "    groups:",
            "      - ${4:element}",
            "    local: ${5|false,true|}",
            "    name: ${6:string}",
            "    permissions:",
            "      - ${7:element}",
            "    recursive: ${8|false,true|}",
            "    state: ${9|present,absent|}",
            "    users:",
            "      - ${10:element}",
            "$0"
        ],
        "description": "Manage ZFS delegated administration (user admin privileges)",
        "scope": "ansible"
    },
    "Gather facts about ZFS datasets": {
        "prefix": [
            "community.general.zfs_facts",
            "zfs_facts Gather facts about ZFS datasets"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.zfs_facts:",
            "    depth: ${2:0}",
            "    name: ${3:string}",
            "    parsable: ${4|false,true|}",
            "    properties: ${5:all}",
            "    recurse: ${6|false,true|}",
            "    type: ${7|all,filesystem,volume,snapshot,bookmark|}",
            "$0"
        ],
        "description": "Gather facts about ZFS datasets",
        "scope": "ansible"
    },
    "Create, delete, retrieve, and update znodes using ZooKeeper": {
        "prefix": [
            "community.general.znode",
            "znode Create, delete, retrieve, and update znodes using ZooKeeper"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.znode:",
            "    auth_credential: ${2:string}",
            "    auth_scheme: ${3|digest,sasl|}",
            "    hosts: ${4:string}",
            "    name: ${5:string}",
            "    op: ${6|get,wait,list|}",
            "    recursive: ${7|false,true|}",
            "    state: ${8|present,absent|}",
            "    timeout: ${9:300}",
            "    use_tls: ${10|false,true|}",
            "    value: ${11:string}",
            "$0"
        ],
        "description": "Create, delete, retrieve, and update znodes using ZooKeeper",
        "scope": "ansible"
    },
    "Gather facts about ZFS pools": {
        "prefix": [
            "community.general.zpool_facts",
            "zpool_facts Gather facts about ZFS pools"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.zpool_facts:",
            "    name: ${2:string}",
            "    parsable: ${3|false,true|}",
            "    properties: ${4:all}",
            "$0"
        ],
        "description": "Gather facts about ZFS pools",
        "scope": "ansible"
    },
    "Manage packages on SUSE and openSUSE": {
        "prefix": [
            "community.general.zypper",
            "zypper Manage packages on SUSE and openSUSE"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.zypper:",
            "    allow_vendor_change: ${2|false,true|}",
            "    clean_deps: ${3|false,true|}",
            "    disable_gpg_check: ${4|false,true|}",
            "    disable_recommends: ${5|true,false|}",
            "    extra_args: ${6:string}",
            "    extra_args_precommand: ${7:string}",
            "    force: ${8|false,true|}",
            "    force_resolution: ${9|false,true|}",
            "    name:",
            "      - ${10:element}",
            "    oldpackage: ${11|false,true|}",
            "    replacefiles: ${12|false,true|}",
            "    state: ${13|present,latest,absent,dist-upgrade,installed,removed|}",
            "    type: ${14|package,patch,pattern,product,srcpackage,application|}",
            "    update_cache: ${15|false,true|}",
            "$0"
        ],
        "description": "Manage packages on SUSE and openSUSE",
        "scope": "ansible"
    },
    "Add and remove Zypper repositories": {
        "prefix": [
            "community.general.zypper_repository",
            "zypper_repository Add and remove Zypper repositories"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.general.zypper_repository:",
            "    auto_import_keys: ${2|false,true|}",
            "    autorefresh: ${3|true,false|}",
            "    description: ${4:string}",
            "    disable_gpg_check: ${5|false,true|}",
            "    enabled: ${6|true,false|}",
            "    name: ${7:string}",
            "    overwrite_multiple: ${8|false,true|}",
            "    priority: ${9:int}",
            "    repo: ${10:string}",
            "    runrefresh: ${11|false,true|}",
            "    state: ${12|present,absent|}",
            "$0"
        ],
        "description": "Add and remove Zypper repositories",
        "scope": "ansible"
    }
}