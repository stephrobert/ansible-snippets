{
    "Return facts about whether the module runs in a container": {
        "prefix": [
            "community.docker.current_container_facts",
            "current_container_facts Return facts about whether the module runs in a container"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.docker.current_container_facts:",
            "$0"
        ],
        "description": "Return facts about whether the module runs in a container",
        "scope": "ansible"
    },
    "Manage multi-container Docker applications with Docker Compose.": {
        "prefix": [
            "community.docker.docker_compose",
            "docker_compose Manage multi-container Docker applications with Docker Compose."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.docker.docker_compose:",
            "    api_version: ${2:auto}",
            "    build: ${3|false,true|}",
            "    ca_cert: ${4:/tmp/test}",
            "    client_cert: ${5:/tmp/test}",
            "    client_key: ${6:/tmp/test}",
            "    debug: ${7|false,true|}",
            "    dependencies: ${9|true,false|}",
            "    docker_host: ${10:unix://var/run/docker.sock}",
            "    env_file: ${11:/tmp/test}",
            "    files:",
            "      - ${12:element}",
            "    hostname_check: ${13|false,true|}",
            "    nocache: ${14|false,true|}",
            "    profiles:",
            "      - ${15:element}",
            "    project_name: ${16:string}",
            "    project_src: ${17:/tmp/test}",
            "    pull: ${18|false,true|}",
            "    recreate: ${19|smart,always,never|}",
            "    remove_images: ${20|all,local|}",
            "    remove_orphans: ${21|false,true|}",
            "    remove_volumes: ${22|false,true|}",
            "    restarted: ${23|false,true|}",
            "    services:",
            "      - ${25:element}",
            "    ssl_version: ${26:string}",
            "    state: ${27|present,absent|}",
            "    stopped: ${28|false,true|}",
            "    timeout: ${29:None}",
            "    tls: ${30|false,true|}",
            "    tls_hostname: ${31:string}",
            "    use_ssh_client: ${32|false,true|}",
            "    validate_certs: ${33|false,true|}",
            "$0"
        ],
        "description": "Manage multi-container Docker applications with Docker Compose.",
        "scope": "ansible"
    },
    "Manage docker configs.": {
        "prefix": [
            "community.docker.docker_config",
            "docker_config Manage docker configs."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.docker.docker_config:",
            "    api_version: ${2:auto}",
            "    ca_cert: ${3:/tmp/test}",
            "    client_cert: ${4:/tmp/test}",
            "    client_key: ${5:/tmp/test}",
            "    data: ${6:string}",
            "    data_is_b64: ${7|false,true|}",
            "    data_src: ${8:/tmp/test}",
            "    debug: ${9|false,true|}",
            "    docker_host: ${10:unix://var/run/docker.sock}",
            "    force: ${11|false,true|}",
            "    name: ${13:string}",
            "    rolling_versions: ${14|false,true|}",
            "    ssl_version: ${15:string}",
            "    state: ${16|present,absent|}",
            "    template_driver: ${17|golang|}",
            "    timeout: ${18:60}",
            "    tls: ${19|false,true|}",
            "    tls_hostname: ${20:string}",
            "    use_ssh_client: ${21|false,true|}",
            "    validate_certs: ${22|false,true|}",
            "    versions_to_keep: ${23:5}",
            "$0"
        ],
        "description": "Manage docker configs.",
        "scope": "ansible"
    },
    "manage Docker containers": {
        "prefix": [
            "community.docker.docker_container",
            "docker_container manage Docker containers"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.docker.docker_container:",
            "    api_version: ${2:auto}",
            "    auto_remove: ${3|false,true|}",
            "    blkio_weight: ${4:int}",
            "    ca_cert: ${5:/tmp/test}",
            "    cap_drop:",
            "      - ${6:element}",
            "    capabilities:",
            "      - ${7:element}",
            "    cgroup_parent: ${8:string}",
            "    cgroupns_mode: ${9|host,private|}",
            "    cleanup: ${10|false,true|}",
            "    client_cert: ${11:/tmp/test}",
            "    client_key: ${12:/tmp/test}",
            "    command: ${13:\"raw\"}",
            "    command_handling: ${14|correct,compatibility|}",
            "    container_default_behavior: ${16|no_defaults,compatibility|}",
            "    cpu_period: ${17:int}",
            "    cpu_quota: ${18:int}",
            "    cpu_shares: ${19:int}",
            "    cpuset_cpus: ${21:string}",
            "    cpuset_mems: ${22:string}",
            "    debug: ${23|false,true|}",
            "    default_host_ip: ${24:string}",
            "    detach: ${25|false,true|}",
            "    device_read_bps:",
            "      - ${26:element}",
            "    device_read_iops:",
            "      - ${27:element}",
            "    device_requests:",
            "      - ${28:element}",
            "    device_write_bps:",
            "      - ${29:element}",
            "    device_write_iops:",
            "      - ${30:element}",
            "    devices:",
            "      - ${31:element}",
            "    dns_opts:",
            "      - ${32:element}",
            "    dns_search_domains:",
            "      - ${33:element}",
            "    dns_servers:",
            "      - ${34:element}",
            "    docker_host: ${35:unix://var/run/docker.sock}",
            "    domainname: ${36:string}",
            "    entrypoint:",
            "      - ${37:element}",
            "    env_file: ${39:/tmp/test}",
            "    exposed_ports:",
            "      - ${41:element}",
            "    force_kill: ${42|false,true|}",
            "    groups:",
            "      - ${43:element}",
            "    hostname: ${45:string}",
            "    ignore_image: ${46|false,true|}",
            "    image: ${47:string}",
            "    image_comparison: ${48|desired-image,current-image|}",
            "    image_label_mismatch: ${49|ignore,fail|}",
            "    image_name_mismatch: ${50|ignore,recreate|}",
            "    init: ${51|false,true|}",
            "    interactive: ${52|false,true|}",
            "    ipc_mode: ${53:string}",
            "    keep_volumes: ${54|true,false|}",
            "    kernel_memory: ${55:string}",
            "    kill_signal: ${56:string}",
            "    links:",
            "      - ${58:element}",
            "    log_driver: ${59:string}",
            "    mac_address: ${61:string}",
            "    memory: ${62:string}",
            "    memory_reservation: ${63:string}",
            "    memory_swap: ${64:string}",
            "    memory_swappiness: ${65:int}",
            "    mounts:",
            "      - ${66:element}",
            "    name: ${67:string}",
            "    network_mode: ${68:string}",
            "    networks:",
            "      - ${69:element}",
            "    networks_cli_compatible: ${70|true,false|}",
            "    oom_killer: ${71|false,true|}",
            "    oom_score_adj: ${72:int}",
            "    output_logs: ${73|false,true|}",
            "    paused: ${74|false,true|}",
            "    pid_mode: ${75:string}",
            "    pids_limit: ${76:int}",
            "    platform: ${77:string}",
            "    privileged: ${78|false,true|}",
            "    publish_all_ports: ${79|false,true|}",
            "    published_ports:",
            "      - ${80:element}",
            "    pull: ${81|false,true|}",
            "    purge_networks: ${82|false,true|}",
            "    read_only: ${83|false,true|}",
            "    recreate: ${84|false,true|}",
            "    restart: ${86|false,true|}",
            "    restart_policy: ${87|no,on-failure,always,unless-stopped|}",
            "    restart_retries: ${88:int}",
            "    runtime: ${89:string}",
            "    security_opts:",
            "      - ${90:element}",
            "    shm_size: ${91:string}",
            "    ssl_version: ${92:string}",
            "    state: ${93|started,absent,present,stopped|}",
            "    stop_signal: ${94:string}",
            "    stop_timeout: ${95:int}",
            "    timeout: ${98:60}",
            "    tls: ${99|false,true|}",
            "    tls_hostname: ${100:string}",
            "    tmpfs:",
            "      - ${101:element}",
            "    tty: ${102|false,true|}",
            "    ulimits:",
            "      - ${103:element}",
            "    use_ssh_client: ${104|false,true|}",
            "    user: ${105:string}",
            "    userns_mode: ${106:string}",
            "    uts: ${107:string}",
            "    validate_certs: ${108|false,true|}",
            "    volume_driver: ${109:string}",
            "    volumes:",
            "      - ${110:element}",
            "    volumes_from:",
            "      - ${111:element}",
            "    working_dir: ${112:string}",
            "$0"
        ],
        "description": "manage Docker containers",
        "scope": "ansible"
    },
    "Copy a file into a Docker container": {
        "prefix": [
            "community.docker.docker_container_copy_into",
            "docker_container_copy_into Copy a file into a Docker container"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.docker.docker_container_copy_into:",
            "    api_version: ${2:auto}",
            "    ca_cert: ${3:/tmp/test}",
            "    client_cert: ${4:/tmp/test}",
            "    client_key: ${5:/tmp/test}",
            "    container: ${6:string}",
            "    container_path: ${7:string}",
            "    content: ${8:string}",
            "    content_is_b64: ${9|false,true|}",
            "    debug: ${10|false,true|}",
            "    docker_host: ${11:unix://var/run/docker.sock}",
            "    follow: ${12|false,true|}",
            "    force: ${13|false,true|}",
            "    group_id: ${14:int}",
            "    local_follow: ${15|true,false|}",
            "    mode: ${16:int}",
            "    owner_id: ${17:int}",
            "    path: ${18:/tmp/test}",
            "    ssl_version: ${19:string}",
            "    timeout: ${20:60}",
            "    tls: ${21|false,true|}",
            "    tls_hostname: ${22:string}",
            "    use_ssh_client: ${23|false,true|}",
            "    validate_certs: ${24|false,true|}",
            "$0"
        ],
        "description": "Copy a file into a Docker container",
        "scope": "ansible"
    },
    "Execute command in a docker container": {
        "prefix": [
            "community.docker.docker_container_exec",
            "docker_container_exec Execute command in a docker container"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.docker.docker_container_exec:",
            "    api_version: ${2:auto}",
            "    argv:",
            "      - ${3:element}",
            "    ca_cert: ${4:/tmp/test}",
            "    chdir: ${5:string}",
            "    client_cert: ${6:/tmp/test}",
            "    client_key: ${7:/tmp/test}",
            "    command: ${8:string}",
            "    container: ${9:string}",
            "    debug: ${10|false,true|}",
            "    detach: ${11|false,true|}",
            "    docker_host: ${12:unix://var/run/docker.sock}",
            "    ssl_version: ${14:string}",
            "    stdin: ${15:string}",
            "    stdin_add_newline: ${16|true,false|}",
            "    strip_empty_ends: ${17|true,false|}",
            "    timeout: ${18:60}",
            "    tls: ${19|false,true|}",
            "    tls_hostname: ${20:string}",
            "    tty: ${21|false,true|}",
            "    use_ssh_client: ${22|false,true|}",
            "    user: ${23:string}",
            "    validate_certs: ${24|false,true|}",
            "$0"
        ],
        "description": "Execute command in a docker container",
        "scope": "ansible"
    },
    "Retrieves facts about docker container": {
        "prefix": [
            "community.docker.docker_container_info",
            "docker_container_info Retrieves facts about docker container"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.docker.docker_container_info:",
            "    api_version: ${2:auto}",
            "    ca_cert: ${3:/tmp/test}",
            "    client_cert: ${4:/tmp/test}",
            "    client_key: ${5:/tmp/test}",
            "    debug: ${6|false,true|}",
            "    docker_host: ${7:unix://var/run/docker.sock}",
            "    name: ${8:string}",
            "    ssl_version: ${9:string}",
            "    timeout: ${10:60}",
            "    tls: ${11|false,true|}",
            "    tls_hostname: ${12:string}",
            "    use_ssh_client: ${13|false,true|}",
            "    validate_certs: ${14|false,true|}",
            "$0"
        ],
        "description": "Retrieves facts about docker container",
        "scope": "ansible"
    },
    "Retrieves facts about docker host and lists of objects of the services.": {
        "prefix": [
            "community.docker.docker_host_info",
            "docker_host_info Retrieves facts about docker host and lists of objects of the services."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.docker.docker_host_info:",
            "    api_version: ${2:auto}",
            "    ca_cert: ${3:/tmp/test}",
            "    client_cert: ${4:/tmp/test}",
            "    client_key: ${5:/tmp/test}",
            "    containers: ${6|false,true|}",
            "    containers_all: ${7|false,true|}",
            "    debug: ${9|false,true|}",
            "    disk_usage: ${10|false,true|}",
            "    docker_host: ${11:unix://var/run/docker.sock}",
            "    images: ${12|false,true|}",
            "    networks: ${14|false,true|}",
            "    ssl_version: ${16:string}",
            "    timeout: ${17:60}",
            "    tls: ${18|false,true|}",
            "    tls_hostname: ${19:string}",
            "    use_ssh_client: ${20|false,true|}",
            "    validate_certs: ${21|false,true|}",
            "    verbose_output: ${22|false,true|}",
            "    volumes: ${23|false,true|}",
            "$0"
        ],
        "description": "Retrieves facts about docker host and lists of objects of the services.",
        "scope": "ansible"
    },
    "Manage docker images": {
        "prefix": [
            "community.docker.docker_image",
            "docker_image Manage docker images"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.docker.docker_image:",
            "    api_version: ${2:auto}",
            "    archive_path: ${3:/tmp/test}",
            "    ca_cert: ${5:/tmp/test}",
            "    client_cert: ${6:/tmp/test}",
            "    client_key: ${7:/tmp/test}",
            "    debug: ${8|false,true|}",
            "    docker_host: ${9:unix://var/run/docker.sock}",
            "    force_absent: ${10|false,true|}",
            "    force_source: ${11|false,true|}",
            "    force_tag: ${12|false,true|}",
            "    load_path: ${13:/tmp/test}",
            "    name: ${14:string}",
            "    push: ${16|false,true|}",
            "    repository: ${17:string}",
            "    source: ${18|build,load,pull,local|}",
            "    ssl_version: ${19:string}",
            "    state: ${20|present,absent|}",
            "    tag: ${21:latest}",
            "    timeout: ${22:60}",
            "    tls: ${23|false,true|}",
            "    tls_hostname: ${24:string}",
            "    use_ssh_client: ${25|false,true|}",
            "    validate_certs: ${26|false,true|}",
            "$0"
        ],
        "description": "Manage docker images",
        "scope": "ansible"
    },
    "Inspect docker images": {
        "prefix": [
            "community.docker.docker_image_info",
            "docker_image_info Inspect docker images"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.docker.docker_image_info:",
            "    api_version: ${2:auto}",
            "    ca_cert: ${3:/tmp/test}",
            "    client_cert: ${4:/tmp/test}",
            "    client_key: ${5:/tmp/test}",
            "    debug: ${6|false,true|}",
            "    docker_host: ${7:unix://var/run/docker.sock}",
            "    name:",
            "      - ${8:element}",
            "    ssl_version: ${9:string}",
            "    timeout: ${10:60}",
            "    tls: ${11|false,true|}",
            "    tls_hostname: ${12:string}",
            "    use_ssh_client: ${13|false,true|}",
            "    validate_certs: ${14|false,true|}",
            "$0"
        ],
        "description": "Inspect docker images",
        "scope": "ansible"
    },
    "Load docker image(s) from archives": {
        "prefix": [
            "community.docker.docker_image_load",
            "docker_image_load Load docker image(s) from archives"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.docker.docker_image_load:",
            "    api_version: ${2:auto}",
            "    ca_cert: ${3:/tmp/test}",
            "    client_cert: ${4:/tmp/test}",
            "    client_key: ${5:/tmp/test}",
            "    debug: ${6|false,true|}",
            "    docker_host: ${7:unix://var/run/docker.sock}",
            "    path: ${8:/tmp/test}",
            "    ssl_version: ${9:string}",
            "    timeout: ${10:60}",
            "    tls: ${11|false,true|}",
            "    tls_hostname: ${12:string}",
            "    use_ssh_client: ${13|false,true|}",
            "    validate_certs: ${14|false,true|}",
            "$0"
        ],
        "description": "Load docker image(s) from archives",
        "scope": "ansible"
    },
    "Log into a Docker registry.": {
        "prefix": [
            "community.docker.docker_login",
            "docker_login Log into a Docker registry."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.docker.docker_login:",
            "    api_version: ${2:auto}",
            "    ca_cert: ${3:/tmp/test}",
            "    client_cert: ${4:/tmp/test}",
            "    client_key: ${5:/tmp/test}",
            "    config_path: ${6:/tmp/test}",
            "    debug: ${7|false,true|}",
            "    docker_host: ${8:unix://var/run/docker.sock}",
            "    password: ${9:string}",
            "    reauthorize: ${10|false,true|}",
            "    registry_url: ${11:https://index.docker.io/v1/}",
            "    ssl_version: ${12:string}",
            "    state: ${13|present,absent|}",
            "    timeout: ${14:60}",
            "    tls: ${15|false,true|}",
            "    tls_hostname: ${16:string}",
            "    use_ssh_client: ${17|false,true|}",
            "    username: ${18:string}",
            "    validate_certs: ${19|false,true|}",
            "$0"
        ],
        "description": "Log into a Docker registry.",
        "scope": "ansible"
    },
    "Manage Docker networks": {
        "prefix": [
            "community.docker.docker_network",
            "docker_network Manage Docker networks"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.docker.docker_network:",
            "    api_version: ${2:auto}",
            "    appends: ${3|false,true|}",
            "    attachable: ${4|false,true|}",
            "    ca_cert: ${5:/tmp/test}",
            "    client_cert: ${6:/tmp/test}",
            "    client_key: ${7:/tmp/test}",
            "    connected:",
            "      - ${8:element}",
            "    debug: ${9|false,true|}",
            "    docker_host: ${10:unix://var/run/docker.sock}",
            "    driver: ${11:bridge}",
            "    enable_ipv6: ${13|false,true|}",
            "    force: ${14|false,true|}",
            "    internal: ${15|false,true|}",
            "    ipam_config:",
            "      - ${16:element}",
            "    ipam_driver: ${17:string}",
            "    name: ${20:string}",
            "    scope: ${21|local,global,swarm|}",
            "    ssl_version: ${22:string}",
            "    state: ${23|present,absent|}",
            "    timeout: ${24:60}",
            "    tls: ${25|false,true|}",
            "    tls_hostname: ${26:string}",
            "    use_ssh_client: ${27|false,true|}",
            "    validate_certs: ${28|false,true|}",
            "$0"
        ],
        "description": "Manage Docker networks",
        "scope": "ansible"
    },
    "Retrieves facts about docker network": {
        "prefix": [
            "community.docker.docker_network_info",
            "docker_network_info Retrieves facts about docker network"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.docker.docker_network_info:",
            "    api_version: ${2:auto}",
            "    ca_cert: ${3:/tmp/test}",
            "    client_cert: ${4:/tmp/test}",
            "    client_key: ${5:/tmp/test}",
            "    debug: ${6|false,true|}",
            "    docker_host: ${7:unix://var/run/docker.sock}",
            "    name: ${8:string}",
            "    ssl_version: ${9:string}",
            "    timeout: ${10:60}",
            "    tls: ${11|false,true|}",
            "    tls_hostname: ${12:string}",
            "    use_ssh_client: ${13|false,true|}",
            "    validate_certs: ${14|false,true|}",
            "$0"
        ],
        "description": "Retrieves facts about docker network",
        "scope": "ansible"
    },
    "Manage Docker Swarm node": {
        "prefix": [
            "community.docker.docker_node",
            "docker_node Manage Docker Swarm node"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.docker.docker_node:",
            "    api_version: ${2:auto}",
            "    availability: ${3|active,pause,drain|}",
            "    ca_cert: ${4:/tmp/test}",
            "    client_cert: ${5:/tmp/test}",
            "    client_key: ${6:/tmp/test}",
            "    debug: ${7|false,true|}",
            "    docker_host: ${8:unix://var/run/docker.sock}",
            "    hostname: ${9:string}",
            "    labels_state: ${11|merge,replace|}",
            "    labels_to_remove:",
            "      - ${12:element}",
            "    role: ${13|manager,worker|}",
            "    ssl_version: ${14:string}",
            "    timeout: ${15:60}",
            "    tls: ${16|false,true|}",
            "    tls_hostname: ${17:string}",
            "    use_ssh_client: ${18|false,true|}",
            "    validate_certs: ${19|false,true|}",
            "$0"
        ],
        "description": "Manage Docker Swarm node",
        "scope": "ansible"
    },
    "Retrieves facts about docker swarm node from Swarm Manager": {
        "prefix": [
            "community.docker.docker_node_info",
            "docker_node_info Retrieves facts about docker swarm node from Swarm Manager"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.docker.docker_node_info:",
            "    api_version: ${2:auto}",
            "    ca_cert: ${3:/tmp/test}",
            "    client_cert: ${4:/tmp/test}",
            "    client_key: ${5:/tmp/test}",
            "    debug: ${6|false,true|}",
            "    docker_host: ${7:unix://var/run/docker.sock}",
            "    name:",
            "      - ${8:element}",
            "    self: ${9|false,true|}",
            "    ssl_version: ${10:string}",
            "    timeout: ${11:60}",
            "    tls: ${12|false,true|}",
            "    tls_hostname: ${13:string}",
            "    use_ssh_client: ${14|false,true|}",
            "    validate_certs: ${15|false,true|}",
            "$0"
        ],
        "description": "Retrieves facts about docker swarm node from Swarm Manager",
        "scope": "ansible"
    },
    "Manage Docker plugins": {
        "prefix": [
            "community.docker.docker_plugin",
            "docker_plugin Manage Docker plugins"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.docker.docker_plugin:",
            "    alias: ${2:string}",
            "    api_version: ${3:auto}",
            "    ca_cert: ${4:/tmp/test}",
            "    client_cert: ${5:/tmp/test}",
            "    client_key: ${6:/tmp/test}",
            "    debug: ${7|false,true|}",
            "    docker_host: ${8:unix://var/run/docker.sock}",
            "    enable_timeout: ${9:0}",
            "    force_remove: ${10|false,true|}",
            "    plugin_name: ${11:string}",
            "    ssl_version: ${13:string}",
            "    state: ${14|present,absent,enable,disable|}",
            "    timeout: ${15:60}",
            "    tls: ${16|false,true|}",
            "    tls_hostname: ${17:string}",
            "    use_ssh_client: ${18|false,true|}",
            "    validate_certs: ${19|false,true|}",
            "$0"
        ],
        "description": "Manage Docker plugins",
        "scope": "ansible"
    },
    "Allows to prune various docker objects": {
        "prefix": [
            "community.docker.docker_prune",
            "docker_prune Allows to prune various docker objects"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.docker.docker_prune:",
            "    api_version: ${2:auto}",
            "    builder_cache: ${3|false,true|}",
            "    ca_cert: ${4:/tmp/test}",
            "    client_cert: ${5:/tmp/test}",
            "    client_key: ${6:/tmp/test}",
            "    containers: ${7|false,true|}",
            "    debug: ${9|false,true|}",
            "    docker_host: ${10:unix://var/run/docker.sock}",
            "    images: ${11|false,true|}",
            "    networks: ${13|false,true|}",
            "    ssl_version: ${15:string}",
            "    timeout: ${16:60}",
            "    tls: ${17|false,true|}",
            "    tls_hostname: ${18:string}",
            "    use_ssh_client: ${19|false,true|}",
            "    validate_certs: ${20|false,true|}",
            "    volumes: ${21|false,true|}",
            "$0"
        ],
        "description": "Allows to prune various docker objects",
        "scope": "ansible"
    },
    "Manage docker secrets.": {
        "prefix": [
            "community.docker.docker_secret",
            "docker_secret Manage docker secrets."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.docker.docker_secret:",
            "    api_version: ${2:auto}",
            "    ca_cert: ${3:/tmp/test}",
            "    client_cert: ${4:/tmp/test}",
            "    client_key: ${5:/tmp/test}",
            "    data: ${6:string}",
            "    data_is_b64: ${7|false,true|}",
            "    data_src: ${8:/tmp/test}",
            "    debug: ${9|false,true|}",
            "    docker_host: ${10:unix://var/run/docker.sock}",
            "    force: ${11|false,true|}",
            "    name: ${13:string}",
            "    rolling_versions: ${14|false,true|}",
            "    ssl_version: ${15:string}",
            "    state: ${16|present,absent|}",
            "    timeout: ${17:60}",
            "    tls: ${18|false,true|}",
            "    tls_hostname: ${19:string}",
            "    use_ssh_client: ${20|false,true|}",
            "    validate_certs: ${21|false,true|}",
            "    versions_to_keep: ${22:5}",
            "$0"
        ],
        "description": "Manage docker secrets.",
        "scope": "ansible"
    },
    "docker stack module": {
        "prefix": [
            "community.docker.docker_stack",
            "docker_stack docker stack module"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.docker.docker_stack:",
            "    absent_retries: ${2:0}",
            "    absent_retries_interval: ${3:1}",
            "    compose:",
            "      - ${4:element}",
            "    name: ${5:string}",
            "    prune: ${6|false,true|}",
            "    resolve_image: ${7|always,changed,never|}",
            "    state: ${8|present,absent|}",
            "    with_registry_auth: ${9|false,true|}",
            "$0"
        ],
        "description": "docker stack module",
        "scope": "ansible"
    },
    "Return information on a docker stack": {
        "prefix": [
            "community.docker.docker_stack_info",
            "docker_stack_info Return information on a docker stack"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.docker.docker_stack_info:",
            "$0"
        ],
        "description": "Return information on a docker stack",
        "scope": "ansible"
    },
    "Return information of the tasks on a docker stack": {
        "prefix": [
            "community.docker.docker_stack_task_info",
            "docker_stack_task_info Return information of the tasks on a docker stack"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.docker.docker_stack_task_info:",
            "    name: ${2:string}",
            "$0"
        ],
        "description": "Return information of the tasks on a docker stack",
        "scope": "ansible"
    },
    "Manage Swarm cluster": {
        "prefix": [
            "community.docker.docker_swarm",
            "docker_swarm Manage Swarm cluster"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.docker.docker_swarm:",
            "    advertise_addr: ${2:string}",
            "    api_version: ${3:auto}",
            "    autolock_managers: ${4|false,true|}",
            "    ca_cert: ${5:/tmp/test}",
            "    ca_force_rotate: ${6:int}",
            "    client_cert: ${7:/tmp/test}",
            "    client_key: ${8:/tmp/test}",
            "    data_path_addr: ${9:string}",
            "    data_path_port: ${10:int}",
            "    debug: ${11|false,true|}",
            "    default_addr_pool:",
            "      - ${12:element}",
            "    dispatcher_heartbeat_period: ${13:int}",
            "    docker_host: ${14:unix://var/run/docker.sock}",
            "    election_tick: ${15:int}",
            "    force: ${16|false,true|}",
            "    heartbeat_tick: ${17:int}",
            "    join_token: ${18:string}",
            "    keep_old_snapshots: ${19:int}",
            "    listen_addr: ${21:0.0.0.0:2377}",
            "    log_entries_for_slow_followers: ${22:int}",
            "    name: ${23:string}",
            "    node_cert_expiry: ${24:int}",
            "    node_id: ${25:string}",
            "    remote_addrs:",
            "      - ${26:element}",
            "    rotate_manager_token: ${27|false,true|}",
            "    rotate_worker_token: ${28|false,true|}",
            "    signing_ca_cert: ${29:string}",
            "    signing_ca_key: ${30:string}",
            "    snapshot_interval: ${31:int}",
            "    ssl_version: ${32:string}",
            "    state: ${33|present,join,absent,remove|}",
            "    subnet_size: ${34:int}",
            "    task_history_retention_limit: ${35:int}",
            "    timeout: ${36:60}",
            "    tls: ${37|false,true|}",
            "    tls_hostname: ${38:string}",
            "    use_ssh_client: ${39|false,true|}",
            "    validate_certs: ${40|false,true|}",
            "$0"
        ],
        "description": "Manage Swarm cluster",
        "scope": "ansible"
    },
    "Retrieves facts about Docker Swarm cluster.": {
        "prefix": [
            "community.docker.docker_swarm_info",
            "docker_swarm_info Retrieves facts about Docker Swarm cluster."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.docker.docker_swarm_info:",
            "    api_version: ${2:auto}",
            "    ca_cert: ${3:/tmp/test}",
            "    client_cert: ${4:/tmp/test}",
            "    client_key: ${5:/tmp/test}",
            "    debug: ${6|false,true|}",
            "    docker_host: ${7:unix://var/run/docker.sock}",
            "    nodes: ${8|false,true|}",
            "    services: ${10|false,true|}",
            "    ssl_version: ${12:string}",
            "    tasks: ${13|false,true|}",
            "    timeout: ${15:60}",
            "    tls: ${16|false,true|}",
            "    tls_hostname: ${17:string}",
            "    unlock_key: ${18|false,true|}",
            "    use_ssh_client: ${19|false,true|}",
            "    validate_certs: ${20|false,true|}",
            "    verbose_output: ${21|false,true|}",
            "$0"
        ],
        "description": "Retrieves facts about Docker Swarm cluster.",
        "scope": "ansible"
    },
    "docker swarm service": {
        "prefix": [
            "community.docker.docker_swarm_service",
            "docker_swarm_service docker swarm service"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.docker.docker_swarm_service:",
            "    api_version: ${2:auto}",
            "    args:",
            "      - ${3:element}",
            "    ca_cert: ${4:/tmp/test}",
            "    cap_add:",
            "      - ${5:element}",
            "    cap_drop:",
            "      - ${6:element}",
            "    client_cert: ${7:/tmp/test}",
            "    client_key: ${8:/tmp/test}",
            "    command: ${9:\"raw\"}",
            "    configs:",
            "      - ${10:element}",
            "    debug: ${12|false,true|}",
            "    dns:",
            "      - ${13:element}",
            "    dns_options:",
            "      - ${14:element}",
            "    dns_search:",
            "      - ${15:element}",
            "    docker_host: ${16:unix://var/run/docker.sock}",
            "    endpoint_mode: ${17|vip,dnsrr|}",
            "    env: ${18:\"raw\"}",
            "    env_files:",
            "      - ${19:element}",
            "    force_update: ${20|false,true|}",
            "    groups:",
            "      - ${21:element}",
            "    hostname: ${23:string}",
            "    image: ${25:string}",
            "    init: ${26|false,true|}",
            "    mode: ${30|replicated,global|}",
            "    mounts:",
            "      - ${31:element}",
            "    name: ${32:string}",
            "    networks:",
            "      - ${33:element}",
            "    publish:",
            "      - ${35:element}",
            "    read_only: ${36|false,true|}",
            "    replicas: ${37:-1}",
            "    resolve_image: ${39|false,true|}",
            "    secrets:",
            "      - ${42:element}",
            "    ssl_version: ${43:string}",
            "    state: ${44|present,absent|}",
            "    stop_grace_period: ${45:string}",
            "    stop_signal: ${46:string}",
            "    timeout: ${47:60}",
            "    tls: ${48|false,true|}",
            "    tls_hostname: ${49:string}",
            "    tty: ${50|false,true|}",
            "    use_ssh_client: ${52|false,true|}",
            "    user: ${53:string}",
            "    validate_certs: ${54|false,true|}",
            "    working_dir: ${55:string}",
            "$0"
        ],
        "description": "docker swarm service",
        "scope": "ansible"
    },
    "Retrieves information about docker services from a Swarm Manager": {
        "prefix": [
            "community.docker.docker_swarm_service_info",
            "docker_swarm_service_info Retrieves information about docker services from a Swarm Manager"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.docker.docker_swarm_service_info:",
            "    api_version: ${2:auto}",
            "    ca_cert: ${3:/tmp/test}",
            "    client_cert: ${4:/tmp/test}",
            "    client_key: ${5:/tmp/test}",
            "    debug: ${6|false,true|}",
            "    docker_host: ${7:unix://var/run/docker.sock}",
            "    name: ${8:string}",
            "    ssl_version: ${9:string}",
            "    timeout: ${10:60}",
            "    tls: ${11|false,true|}",
            "    tls_hostname: ${12:string}",
            "    use_ssh_client: ${13|false,true|}",
            "    validate_certs: ${14|false,true|}",
            "$0"
        ],
        "description": "Retrieves information about docker services from a Swarm Manager",
        "scope": "ansible"
    },
    "Manage Docker volumes": {
        "prefix": [
            "community.docker.docker_volume",
            "docker_volume Manage Docker volumes"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.docker.docker_volume:",
            "    api_version: ${2:auto}",
            "    ca_cert: ${3:/tmp/test}",
            "    client_cert: ${4:/tmp/test}",
            "    client_key: ${5:/tmp/test}",
            "    debug: ${6|false,true|}",
            "    docker_host: ${7:unix://var/run/docker.sock}",
            "    driver: ${8:local}",
            "    recreate: ${11|never,always,options-changed|}",
            "    ssl_version: ${12:string}",
            "    state: ${13|present,absent|}",
            "    timeout: ${14:60}",
            "    tls: ${15|false,true|}",
            "    tls_hostname: ${16:string}",
            "    use_ssh_client: ${17|false,true|}",
            "    validate_certs: ${18|false,true|}",
            "    volume_name: ${19:string}",
            "$0"
        ],
        "description": "Manage Docker volumes",
        "scope": "ansible"
    },
    "Retrieve facts about Docker volumes": {
        "prefix": [
            "community.docker.docker_volume_info",
            "docker_volume_info Retrieve facts about Docker volumes"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.docker.docker_volume_info:",
            "    api_version: ${2:auto}",
            "    ca_cert: ${3:/tmp/test}",
            "    client_cert: ${4:/tmp/test}",
            "    client_key: ${5:/tmp/test}",
            "    debug: ${6|false,true|}",
            "    docker_host: ${7:unix://var/run/docker.sock}",
            "    name: ${8:string}",
            "    ssl_version: ${9:string}",
            "    timeout: ${10:60}",
            "    tls: ${11|false,true|}",
            "    tls_hostname: ${12:string}",
            "    use_ssh_client: ${13|false,true|}",
            "    validate_certs: ${14|false,true|}",
            "$0"
        ],
        "description": "Retrieve facts about Docker volumes",
        "scope": "ansible"
    }
}