{
    "Manage AAA RBAC Custom Privileges (aaa:RbacClassPriv)": {
        "prefix": [
            "cisco.aci.aci_aaa_custom_privilege",
            "Manage AAA RBAC Custom Privileges (aaa:RbacClassPriv)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_aaa_custom_privilege:",
            "    certificate_name: ${2:string}",
            "    description: ${3:string}",
            "    host: ${4:string}",
            "    name: ${5:string}",
            "    name_alias: ${6:string}",
            "    output_level: ${7|normal,debug,info|}",
            "    output_path: ${8:string}",
            "    password: ${9:string}",
            "    port: ${10:int}",
            "    private_key: ${11:string}",
            "    read_privilege: ${12:string}",
            "    state: ${13|present,absent,query|}",
            "    timeout: ${14:30}",
            "    use_proxy: ${15|true,false|}",
            "    use_ssl: ${16|true,false|}",
            "    username: ${17:admin}",
            "    validate_certs: ${18|true,false|}",
            "    write_privilege: ${19:string}",
            "$0"
        ],
        "description": "Manage AAA RBAC Custom Privileges (aaa:RbacClassPriv)",
        "scope": "ansible"
    },
    "Manage AAA domains (aaa:Domain)": {
        "prefix": [
            "cisco.aci.aci_aaa_domain",
            "Manage AAA domains (aaa:Domain)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_aaa_domain:",
            "    certificate_name: ${2:string}",
            "    description: ${3:string}",
            "    host: ${4:string}",
            "    name: ${5:string}",
            "    name_alias: ${6:string}",
            "    output_level: ${7|normal,debug,info|}",
            "    output_path: ${8:string}",
            "    password: ${9:string}",
            "    port: ${10:int}",
            "    private_key: ${11:string}",
            "    restricted_rbac_domain: ${12|false,true|}",
            "    state: ${13|present,absent,query|}",
            "    timeout: ${14:30}",
            "    use_proxy: ${15|true,false|}",
            "    use_ssl: ${16|true,false|}",
            "    username: ${17:admin}",
            "    validate_certs: ${18|true,false|}",
            "$0"
        ],
        "description": "Manage AAA domains (aaa:Domain)",
        "scope": "ansible"
    },
    "Manage AAA roles (aaa:Role)": {
        "prefix": [
            "cisco.aci.aci_aaa_role",
            "Manage AAA roles (aaa:Role)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_aaa_role:",
            "    certificate_name: ${2:string}",
            "    description: ${3:string}",
            "    host: ${4:string}",
            "    name: ${5:string}",
            "    name_alias: ${6:string}",
            "    output_level: ${7|normal,debug,info|}",
            "    output_path: ${8:string}",
            "    password: ${9:string}",
            "    port: ${10:int}",
            "    private_key: ${11:string}",
            "    privileges:",
            "      - ${12:element}",
            "    state: ${13|present,absent,query|}",
            "    timeout: ${14:30}",
            "    use_proxy: ${15|true,false|}",
            "    use_ssl: ${16|true,false|}",
            "    username: ${17:admin}",
            "    validate_certs: ${18|true,false|}",
            "$0"
        ],
        "description": "Manage AAA roles (aaa:Role)",
        "scope": "ansible"
    },
    "Manage AAA SSH auth (aaaSshAuth) objects.": {
        "prefix": [
            "cisco.aci.aci_aaa_ssh_auth",
            "Manage AAA SSH auth (aaaSshAuth) objects."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_aaa_ssh_auth:",
            "    aaa_user: ${2:string}",
            "    annotation: ${3:orchestrator:ansible}",
            "    auth_name: ${4:string}",
            "    certificate_name: ${5:string}",
            "    data: ${6:string}",
            "    host: ${7:string}",
            "    output_level: ${8|normal,debug,info|}",
            "    output_path: ${9:string}",
            "    owner_key: ${10:string}",
            "    owner_tag: ${11:string}",
            "    password: ${12:string}",
            "    port: ${13:int}",
            "    private_key: ${14:string}",
            "    state: ${15|present,absent,query|}",
            "    timeout: ${16:30}",
            "    use_proxy: ${17|true,false|}",
            "    use_ssl: ${18|true,false|}",
            "    username: ${19:admin}",
            "    validate_certs: ${20|true,false|}",
            "$0"
        ],
        "description": "Manage AAA SSH auth (aaaSshAuth) objects.",
        "scope": "ansible"
    },
    "Manage AAA users (aaa:User)": {
        "prefix": [
            "cisco.aci.aci_aaa_user",
            "Manage AAA users (aaa:User)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_aaa_user:",
            "    aaa_password: ${2:string}",
            "    aaa_password_lifetime: ${3:int}",
            "    aaa_password_update_required: ${4|false,true|}",
            "    aaa_user: ${5:string}",
            "    annotation: ${6:orchestrator:ansible}",
            "    certificate_name: ${7:string}",
            "    clear_password_history: ${8|false,true|}",
            "    description: ${9:string}",
            "    email: ${10:string}",
            "    enabled: ${11|false,true|}",
            "    expiration: ${12:string}",
            "    expires: ${13|false,true|}",
            "    first_name: ${14:string}",
            "    host: ${15:string}",
            "    last_name: ${16:string}",
            "    name_alias: ${17:string}",
            "    output_level: ${18|normal,debug,info|}",
            "    output_path: ${19:string}",
            "    owner_key: ${20:string}",
            "    owner_tag: ${21:string}",
            "    password: ${22:string}",
            "    phone: ${23:string}",
            "    port: ${24:int}",
            "    private_key: ${25:string}",
            "    state: ${26|present,absent,query|}",
            "    timeout: ${27:30}",
            "    use_proxy: ${28|true,false|}",
            "    use_ssl: ${29|true,false|}",
            "    username: ${30:admin}",
            "    validate_certs: ${31|true,false|}",
            "$0"
        ],
        "description": "Manage AAA users (aaa:User)",
        "scope": "ansible"
    },
    "Manage AAA user certificates (aaa:UserCert)": {
        "prefix": [
            "cisco.aci.aci_aaa_user_certificate",
            "Manage AAA user certificates (aaa:UserCert)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_aaa_user_certificate:",
            "    aaa_user: ${2:string}",
            "    aaa_user_type: ${3|user,appuser|}",
            "    annotation: ${4:orchestrator:ansible}",
            "    certificate: ${5:string}",
            "    certificate_name: ${6:string}",
            "    host: ${7:string}",
            "    name: ${8:string}",
            "    name_alias: ${9:string}",
            "    output_level: ${10|normal,debug,info|}",
            "    output_path: ${11:string}",
            "    owner_key: ${12:string}",
            "    owner_tag: ${13:string}",
            "    password: ${14:string}",
            "    port: ${15:int}",
            "    private_key: ${16:string}",
            "    state: ${17|present,absent,query|}",
            "    timeout: ${18:30}",
            "    use_proxy: ${19|true,false|}",
            "    use_ssl: ${20|true,false|}",
            "    username: ${21:admin}",
            "    validate_certs: ${22|true,false|}",
            "$0"
        ],
        "description": "Manage AAA user certificates (aaa:UserCert)",
        "scope": "ansible"
    },
    "Manage AAA user domains (aaa:UserDomain)": {
        "prefix": [
            "cisco.aci.aci_aaa_user_domain",
            "Manage AAA user domains (aaa:UserDomain)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_aaa_user_domain:",
            "    aaa_user: ${2:string}",
            "    aaa_user_type: ${3|user,appuser|}",
            "    annotation: ${4:orchestrator:ansible}",
            "    certificate_name: ${5:string}",
            "    host: ${6:string}",
            "    name: ${7:string}",
            "    name_alias: ${8:string}",
            "    output_level: ${9|normal,debug,info|}",
            "    output_path: ${10:string}",
            "    owner_key: ${11:string}",
            "    owner_tag: ${12:string}",
            "    password: ${13:string}",
            "    port: ${14:int}",
            "    private_key: ${15:string}",
            "    state: ${16|present,absent,query|}",
            "    timeout: ${17:30}",
            "    use_proxy: ${18|true,false|}",
            "    use_ssl: ${19|true,false|}",
            "    username: ${20:admin}",
            "    validate_certs: ${21|true,false|}",
            "$0"
        ],
        "description": "Manage AAA user domains (aaa:UserDomain)",
        "scope": "ansible"
    },
    "Manage AAA user roles (aaa:UserRole)": {
        "prefix": [
            "cisco.aci.aci_aaa_user_role",
            "Manage AAA user roles (aaa:UserRole)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_aaa_user_role:",
            "    aaa_user: ${2:string}",
            "    aaa_user_type: ${3|user,appuser|}",
            "    annotation: ${4:orchestrator:ansible}",
            "    certificate_name: ${5:string}",
            "    domain_name: ${6:string}",
            "    host: ${7:string}",
            "    name: ${8:string}",
            "    name_alias: ${9:string}",
            "    output_level: ${10|normal,debug,info|}",
            "    output_path: ${11:string}",
            "    owner_key: ${12:string}",
            "    owner_tag: ${13:string}",
            "    password: ${14:string}",
            "    port: ${15:int}",
            "    private_key: ${16:string}",
            "    privilege_type: ${17:string}",
            "    state: ${18|present,absent,query|}",
            "    timeout: ${19:30}",
            "    use_proxy: ${20|true,false|}",
            "    use_ssl: ${21|true,false|}",
            "    username: ${22:admin}",
            "    validate_certs: ${23|true,false|}",
            "$0"
        ],
        "description": "Manage AAA user roles (aaa:UserRole)",
        "scope": "ansible"
    },
    "Manage port blocks of Fabric interface policy leaf profile interface selectors (infra:HPortS, infra:PortBlk)": {
        "prefix": [
            "cisco.aci.aci_access_port_block_to_access_port",
            "Manage port blocks of Fabric interface policy leaf profile interface selectors (infra:HPortS, infra:PortBlk)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_access_port_block_to_access_port:",
            "    access_port_selector: ${2:string}",
            "    annotation: ${3:orchestrator:ansible}",
            "    certificate_name: ${4:string}",
            "    from_card: ${5:string}",
            "    from_port: ${6:string}",
            "    host: ${7:string}",
            "    interface_profile: ${8:string}",
            "    output_level: ${9|normal,debug,info|}",
            "    output_path: ${10:string}",
            "    password: ${11:string}",
            "    port: ${12:int}",
            "    port_blk: ${13:string}",
            "    port_blk_description: ${14:string}",
            "    private_key: ${15:string}",
            "    state: ${16|present,absent,query|}",
            "    timeout: ${17:30}",
            "    to_card: ${18:string}",
            "    to_port: ${19:string}",
            "    type: ${20|leaf,fex|}",
            "    use_proxy: ${21|true,false|}",
            "    use_ssl: ${22|true,false|}",
            "    username: ${23:admin}",
            "    validate_certs: ${24|true,false|}",
            "$0"
        ],
        "description": "Manage port blocks of Fabric interface policy leaf profile interface selectors (infra:HPortS, infra:PortBlk)",
        "scope": "ansible"
    },
    "Manage Fabric interface policy leaf profile interface selectors (infra:HPortS, infra:RsAccBaseGrp, infra:PortBlk)": {
        "prefix": [
            "cisco.aci.aci_access_port_to_interface_policy_leaf_profile",
            "Manage Fabric interface policy leaf profile interface selectors (infra:HPortS, infra:RsAccBaseGrp, infra:PortBlk)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_access_port_to_interface_policy_leaf_profile:",
            "    access_port_selector: ${2:string}",
            "    annotation: ${3:orchestrator:ansible}",
            "    certificate_name: ${4:string}",
            "    description: ${5:string}",
            "    fex_id: ${6:int}",
            "    fex_profile: ${7:string}",
            "    from_card: ${8:string}",
            "    from_port: ${9:string}",
            "    host: ${10:string}",
            "    interface_profile: ${11:string}",
            "    interface_type: ${12|switch_port,breakout,fex,port_channel,vpc,fex_port_channel,fex_vpc,fex_profile|}",
            "    leaf_port_blk_description: ${13:string}",
            "    output_level: ${14|normal,debug,info|}",
            "    output_path: ${15:string}",
            "    owner_key: ${16:string}",
            "    owner_tag: ${17:string}",
            "    password: ${18:string}",
            "    policy_group: ${19:string}",
            "    port: ${20:int}",
            "    port_blk: ${21:string}",
            "    private_key: ${22:string}",
            "    state: ${23|present,absent,query|}",
            "    timeout: ${24:30}",
            "    to_card: ${25:string}",
            "    to_port: ${26:string}",
            "    type: ${27|leaf,fex|}",
            "    use_proxy: ${28|true,false|}",
            "    use_ssl: ${29|true,false|}",
            "    username: ${30:admin}",
            "    validate_certs: ${31|true,false|}",
            "$0"
        ],
        "description": "Manage Fabric interface policy leaf profile interface selectors (infra:HPortS, infra:RsAccBaseGrp, infra:PortBlk)",
        "scope": "ansible"
    },
    "Manage sub port blocks of Fabric interface policy leaf profile interface selectors (infra:HPortS, infra:SubPortBlk)": {
        "prefix": [
            "cisco.aci.aci_access_sub_port_block_to_access_port",
            "Manage sub port blocks of Fabric interface policy leaf profile interface selectors (infra:HPortS, infra:SubPortBlk)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_access_sub_port_block_to_access_port:",
            "    access_port_selector: ${2:string}",
            "    annotation: ${3:orchestrator:ansible}",
            "    certificate_name: ${4:string}",
            "    from_card: ${5:string}",
            "    from_port: ${6:string}",
            "    from_sub_port: ${7:string}",
            "    host: ${8:string}",
            "    leaf_interface_profile: ${9:string}",
            "    leaf_port_blk: ${10:string}",
            "    leaf_port_blk_description: ${11:string}",
            "    output_level: ${12|normal,debug,info|}",
            "    output_path: ${13:string}",
            "    password: ${14:string}",
            "    port: ${15:int}",
            "    private_key: ${16:string}",
            "    state: ${17|present,absent,query|}",
            "    timeout: ${18:30}",
            "    to_card: ${19:string}",
            "    to_port: ${20:string}",
            "    to_sub_port: ${21:string}",
            "    use_proxy: ${22|true,false|}",
            "    use_ssl: ${23|true,false|}",
            "    username: ${24:admin}",
            "    validate_certs: ${25|true,false|}",
            "$0"
        ],
        "description": "Manage sub port blocks of Fabric interface policy leaf profile interface selectors (infra:HPortS, infra:SubPortBlk)",
        "scope": "ansible"
    },
    "Manage attachable Access Entity Profile (AEP) objects (infra:AttEntityP, infra:ProvAcc)": {
        "prefix": [
            "cisco.aci.aci_aep",
            "Manage attachable Access Entity Profile (AEP) objects (infra:AttEntityP, infra:ProvAcc)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_aep:",
            "    aep: ${2:string}",
            "    annotation: ${3:orchestrator:ansible}",
            "    certificate_name: ${4:string}",
            "    description: ${5:string}",
            "    host: ${6:string}",
            "    infra_vlan: ${7|false,true|}",
            "    name_alias: ${8:string}",
            "    output_level: ${9|normal,debug,info|}",
            "    output_path: ${10:string}",
            "    owner_key: ${11:string}",
            "    owner_tag: ${12:string}",
            "    password: ${13:string}",
            "    port: ${14:int}",
            "    private_key: ${15:string}",
            "    state: ${16|present,absent,query|}",
            "    timeout: ${17:30}",
            "    use_proxy: ${18|true,false|}",
            "    use_ssl: ${19|true,false|}",
            "    username: ${20:admin}",
            "    validate_certs: ${21|true,false|}",
            "$0"
        ],
        "description": "Manage attachable Access Entity Profile (AEP) objects (infra:AttEntityP, infra:ProvAcc)",
        "scope": "ansible"
    },
    "Bind AEPs to Physical or Virtual Domains (infra:RsDomP)": {
        "prefix": [
            "cisco.aci.aci_aep_to_domain",
            "Bind AEPs to Physical or Virtual Domains (infra:RsDomP)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_aep_to_domain:",
            "    aep: ${2:string}",
            "    annotation: ${3:orchestrator:ansible}",
            "    certificate_name: ${4:string}",
            "    domain: ${5:string}",
            "    domain_type: ${6:string}",
            "    host: ${7:string}",
            "    output_level: ${8|normal,debug,info|}",
            "    output_path: ${9:string}",
            "    password: ${10:string}",
            "    port: ${11:int}",
            "    private_key: ${12:string}",
            "    state: ${13|present,absent,query|}",
            "    timeout: ${14:30}",
            "    use_proxy: ${15|true,false|}",
            "    use_ssl: ${16|true,false|}",
            "    username: ${17:admin}",
            "    validate_certs: ${18|true,false|}",
            "    vm_provider: ${19:string}",
            "$0"
        ],
        "description": "Bind AEPs to Physical or Virtual Domains (infra:RsDomP)",
        "scope": "ansible"
    },
    "Bind EPG to AEP (infra:RsFuncToEpg).": {
        "prefix": [
            "cisco.aci.aci_aep_to_epg",
            "Bind EPG to AEP (infra:RsFuncToEpg)."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_aep_to_epg:",
            "    aep: ${2:string}",
            "    annotation: ${3:orchestrator:ansible}",
            "    ap: ${4:string}",
            "    certificate_name: ${5:string}",
            "    encap: ${6:int}",
            "    epg: ${7:string}",
            "    host: ${8:string}",
            "    interface_mode: ${9:string}",
            "    output_level: ${10|normal,debug,info|}",
            "    output_path: ${11:string}",
            "    password: ${12:string}",
            "    port: ${13:int}",
            "    primary_encap: ${14:int}",
            "    private_key: ${15:string}",
            "    state: ${16|present,absent,query|}",
            "    tenant: ${17:string}",
            "    timeout: ${18:30}",
            "    use_proxy: ${19|true,false|}",
            "    use_ssl: ${20|true,false|}",
            "    username: ${21:admin}",
            "    validate_certs: ${22|true,false|}",
            "$0"
        ],
        "description": "Bind EPG to AEP (infra:RsFuncToEpg).",
        "scope": "ansible"
    },
    "Manage top level Application Profile (AP) objects (fv:Ap)": {
        "prefix": [
            "cisco.aci.aci_ap",
            "Manage top level Application Profile (AP) objects (fv:Ap)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_ap:",
            "    annotation: ${2:orchestrator:ansible}",
            "    ap: ${3:string}",
            "    certificate_name: ${4:string}",
            "    description: ${5:string}",
            "    host: ${6:string}",
            "    monitoring_policy: ${7:string}",
            "    name_alias: ${8:string}",
            "    output_level: ${9|normal,debug,info|}",
            "    output_path: ${10:string}",
            "    owner_key: ${11:string}",
            "    owner_tag: ${12:string}",
            "    password: ${13:string}",
            "    port: ${14:int}",
            "    private_key: ${15:string}",
            "    state: ${16|present,absent,query|}",
            "    tenant: ${17:string}",
            "    timeout: ${18:30}",
            "    use_proxy: ${19|true,false|}",
            "    use_ssl: ${20|true,false|}",
            "    username: ${21:admin}",
            "    validate_certs: ${22|true,false|}",
            "$0"
        ],
        "description": "Manage top level Application Profile (AP) objects (fv:Ap)",
        "scope": "ansible"
    },
    "Manage Bridge Domains (BD) objects (fv:BD)": {
        "prefix": [
            "cisco.aci.aci_bd",
            "Manage Bridge Domains (BD) objects (fv:BD)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_bd:",
            "    annotation: ${2:orchestrator:ansible}",
            "    arp_flooding: ${3|false,true|}",
            "    bd: ${4:string}",
            "    bd_type: ${5:string}",
            "    certificate_name: ${6:string}",
            "    description: ${7:string}",
            "    enable_multicast: ${8|false,true|}",
            "    enable_routing: ${9|false,true|}",
            "    endpoint_clear: ${10|false,true|}",
            "    endpoint_move_detect: ${11:string}",
            "    endpoint_retention_action: ${12:string}",
            "    endpoint_retention_policy: ${13:string}",
            "    host: ${14:string}",
            "    igmp_snoop_policy: ${15:string}",
            "    ip_learning: ${16|false,true|}",
            "    ipv6_l3_unknown_multicast: ${17:string}",
            "    ipv6_nd_policy: ${18:string}",
            "    l2_unknown_unicast: ${19:string}",
            "    l3_unknown_multicast: ${20:string}",
            "    limit_ip_learn: ${21|false,true|}",
            "    mac_address: ${22:string}",
            "    multi_dest: ${23:string}",
            "    name_alias: ${24:string}",
            "    output_level: ${25|normal,debug,info|}",
            "    output_path: ${26:string}",
            "    owner_key: ${27:string}",
            "    owner_tag: ${28:string}",
            "    password: ${29:string}",
            "    port: ${30:int}",
            "    private_key: ${31:string}",
            "    route_profile: ${32:string}",
            "    route_profile_l3out: ${33:string}",
            "    state: ${34|present,absent,query|}",
            "    tenant: ${35:string}",
            "    timeout: ${36:30}",
            "    use_proxy: ${37|true,false|}",
            "    use_ssl: ${38|true,false|}",
            "    username: ${39:admin}",
            "    validate_certs: ${40|true,false|}",
            "    vrf: ${41:string}",
            "$0"
        ],
        "description": "Manage Bridge Domains (BD) objects (fv:BD)",
        "scope": "ansible"
    },
    "Manage DHCP Labels (dhcp:Lbl)": {
        "prefix": [
            "cisco.aci.aci_bd_dhcp_label",
            "Manage DHCP Labels (dhcp:Lbl)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_bd_dhcp_label:",
            "    annotation: ${2:orchestrator:ansible}",
            "    bd: ${3:string}",
            "    certificate_name: ${4:string}",
            "    description: ${5:string}",
            "    dhcp_label: ${6:string}",
            "    dhcp_option: ${7:string}",
            "    host: ${8:string}",
            "    output_level: ${9|normal,debug,info|}",
            "    output_path: ${10:string}",
            "    owner_key: ${11:string}",
            "    owner_tag: ${12:string}",
            "    password: ${13:string}",
            "    port: ${14:int}",
            "    private_key: ${15:string}",
            "    scope: ${16|infra,tenant|}",
            "    state: ${17|present,absent,query|}",
            "    tenant: ${18:string}",
            "    timeout: ${19:30}",
            "    use_proxy: ${20|true,false|}",
            "    use_ssl: ${21|true,false|}",
            "    username: ${22:admin}",
            "    validate_certs: ${23|true,false|}",
            "$0"
        ],
        "description": "Manage DHCP Labels (dhcp:Lbl)",
        "scope": "ansible"
    },
    "Manage Subnets (fv:Subnet)": {
        "prefix": [
            "cisco.aci.aci_bd_subnet",
            "Manage Subnets (fv:Subnet)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_bd_subnet:",
            "    annotation: ${2:orchestrator:ansible}",
            "    bd: ${3:string}",
            "    certificate_name: ${4:string}",
            "    description: ${5:string}",
            "    enable_vip: ${6|false,true|}",
            "    gateway: ${7:string}",
            "    host: ${8:string}",
            "    mask: ${9:int}",
            "    name_alias: ${10:string}",
            "    nd_prefix_policy: ${11:string}",
            "    output_level: ${12|normal,debug,info|}",
            "    output_path: ${13:string}",
            "    password: ${14:string}",
            "    port: ${15:int}",
            "    preferred: ${16|false,true|}",
            "    private_key: ${17:string}",
            "    route_profile: ${18:string}",
            "    route_profile_l3_out: ${19:string}",
            "    scope:",
            "      - ${20:element}",
            "    state: ${21|present,absent,query|}",
            "    subnet_control: ${22:string}",
            "    subnet_name: ${23:string}",
            "    tenant: ${24:string}",
            "    timeout: ${25:30}",
            "    use_proxy: ${26|true,false|}",
            "    use_ssl: ${27|true,false|}",
            "    username: ${28:admin}",
            "    validate_certs: ${29|true,false|}",
            "$0"
        ],
        "description": "Manage Subnets (fv:Subnet)",
        "scope": "ansible"
    },
    "Bind Bridge Domain to L3 Out (fv:RsBDToOut)": {
        "prefix": [
            "cisco.aci.aci_bd_to_l3out",
            "Bind Bridge Domain to L3 Out (fv:RsBDToOut)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_bd_to_l3out:",
            "    annotation: ${2:orchestrator:ansible}",
            "    bd: ${3:string}",
            "    certificate_name: ${4:string}",
            "    host: ${5:string}",
            "    l3out: ${6:string}",
            "    output_level: ${7|normal,debug,info|}",
            "    output_path: ${8:string}",
            "    password: ${9:string}",
            "    port: ${10:int}",
            "    private_key: ${11:string}",
            "    state: ${12|present,absent,query|}",
            "    tenant: ${13:string}",
            "    timeout: ${14:30}",
            "    use_proxy: ${15|true,false|}",
            "    use_ssl: ${16|true,false|}",
            "    username: ${17:admin}",
            "    validate_certs: ${18|true,false|}",
            "$0"
        ],
        "description": "Bind Bridge Domain to L3 Out (fv:RsBDToOut)",
        "scope": "ansible"
    },
    "Manage BGP Route Reflector ASN.": {
        "prefix": [
            "cisco.aci.aci_bgp_rr_asn",
            "Manage BGP Route Reflector ASN."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_bgp_rr_asn:",
            "    annotation: ${2:orchestrator:ansible}",
            "    asn: ${3:int}",
            "    certificate_name: ${4:string}",
            "    host: ${5:string}",
            "    output_level: ${6|normal,debug,info|}",
            "    output_path: ${7:string}",
            "    password: ${8:string}",
            "    port: ${9:int}",
            "    private_key: ${10:string}",
            "    state: ${11|present,absent,query|}",
            "    timeout: ${12:30}",
            "    use_proxy: ${13|true,false|}",
            "    use_ssl: ${14|true,false|}",
            "    username: ${15:admin}",
            "    validate_certs: ${16|true,false|}",
            "$0"
        ],
        "description": "Manage BGP Route Reflector ASN.",
        "scope": "ansible"
    },
    "Manage BGP Route Reflector objects.": {
        "prefix": [
            "cisco.aci.aci_bgp_rr_node",
            "Manage BGP Route Reflector objects."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_bgp_rr_node:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    description: ${4:string}",
            "    host: ${5:string}",
            "    node_id: ${6:int}",
            "    output_level: ${7|normal,debug,info|}",
            "    output_path: ${8:string}",
            "    password: ${9:string}",
            "    pod_id: ${10:int}",
            "    port: ${11:int}",
            "    private_key: ${12:string}",
            "    state: ${13|present,absent,query|}",
            "    timeout: ${14:30}",
            "    use_proxy: ${15|true,false|}",
            "    use_ssl: ${16|true,false|}",
            "    username: ${17:admin}",
            "    validate_certs: ${18|true,false|}",
            "$0"
        ],
        "description": "Manage BGP Route Reflector objects.",
        "scope": "ansible"
    },
    "Bind static paths to EPGs (fv:RsPathAtt)": {
        "prefix": [
            "cisco.aci.aci_static_binding_to_epg",
            "Bind static paths to EPGs (fv:RsPathAtt)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_static_binding_to_epg:",
            "    annotation: ${2:orchestrator:ansible}",
            "    ap: ${3:string}",
            "    certificate_name: ${4:string}",
            "    deploy_immediacy: ${5:string}",
            "    description: ${6:string}",
            "    encap_id: ${7:int}",
            "    epg: ${8:string}",
            "    extpaths:",
            "      - ${9:element}",
            "    host: ${10:string}",
            "    interface: ${11:string}",
            "    interface_mode: ${12:string}",
            "    interface_type: ${13|switch_port,fex,port_channel,vpc,fex_port_channel,fex_vpc|}",
            "    leafs:",
            "      - ${14:element}",
            "    output_level: ${15|normal,debug,info|}",
            "    output_path: ${16:string}",
            "    password: ${17:string}",
            "    pod_id: ${18:int}",
            "    port: ${19:int}",
            "    primary_encap_id: ${20:string}",
            "    private_key: ${21:string}",
            "    state: ${22|present,absent,query|}",
            "    tenant: ${23:string}",
            "    timeout: ${24:30}",
            "    use_proxy: ${25|true,false|}",
            "    use_ssl: ${26|true,false|}",
            "    username: ${27:admin}",
            "    validate_certs: ${28|true,false|}",
            "$0"
        ],
        "description": "Bind static paths to EPGs (fv:RsPathAtt)",
        "scope": "ansible"
    },
    "Manage Cloud Application Profile (AP) (cloud:App)": {
        "prefix": [
            "cisco.aci.aci_cloud_ap",
            "Manage Cloud Application Profile (AP) (cloud:App)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_cloud_ap:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    description: ${4:string}",
            "    host: ${5:string}",
            "    name: ${6:string}",
            "    output_level: ${7|normal,debug,info|}",
            "    output_path: ${8:string}",
            "    owner_key: ${9:string}",
            "    owner_tag: ${10:string}",
            "    password: ${11:string}",
            "    port: ${12:int}",
            "    private_key: ${13:string}",
            "    state: ${14|present,absent,query|}",
            "    tenant: ${15:string}",
            "    timeout: ${16:30}",
            "    use_proxy: ${17|true,false|}",
            "    use_ssl: ${18|true,false|}",
            "    username: ${19:admin}",
            "    validate_certs: ${20|true,false|}",
            "$0"
        ],
        "description": "Manage Cloud Application Profile (AP) (cloud:App)",
        "scope": "ansible"
    },
    "Manage Cloud AWS Provider (cloud:AwsProvider)": {
        "prefix": [
            "cisco.aci.aci_cloud_aws_provider",
            "Manage Cloud AWS Provider (cloud:AwsProvider)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_cloud_aws_provider:",
            "    access_key_id: ${2:string}",
            "    account_id: ${3:string}",
            "    annotation: ${4:orchestrator:ansible}",
            "    certificate_name: ${5:string}",
            "    host: ${6:string}",
            "    is_account_in_org: ${7|false,true|}",
            "    is_trusted: ${8|false,true|}",
            "    output_level: ${9|normal,debug,info|}",
            "    output_path: ${10:string}",
            "    owner_key: ${11:string}",
            "    owner_tag: ${12:string}",
            "    password: ${13:string}",
            "    port: ${14:int}",
            "    private_key: ${15:string}",
            "    secret_access_key: ${16:string}",
            "    state: ${17|present,absent,query|}",
            "    tenant: ${18:string}",
            "    timeout: ${19:30}",
            "    use_proxy: ${20|true,false|}",
            "    use_ssl: ${21|true,false|}",
            "    username: ${22:admin}",
            "    validate_certs: ${23|true,false|}",
            "$0"
        ],
        "description": "Manage Cloud AWS Provider (cloud:AwsProvider)",
        "scope": "ansible"
    },
    "Manage Cloud APIC BGP Autonomous System Profile (cloud:BgpAsP)": {
        "prefix": [
            "cisco.aci.aci_cloud_bgp_asn",
            "Manage Cloud APIC BGP Autonomous System Profile (cloud:BgpAsP)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_cloud_bgp_asn:",
            "    annotation: ${2:orchestrator:ansible}",
            "    asn: ${3:string}",
            "    certificate_name: ${4:string}",
            "    description: ${5:string}",
            "    host: ${6:string}",
            "    name: ${7:string}",
            "    name_alias: ${8:string}",
            "    output_level: ${9|normal,debug,info|}",
            "    output_path: ${10:string}",
            "    password: ${11:string}",
            "    port: ${12:int}",
            "    private_key: ${13:string}",
            "    state: ${14|present,absent,query|}",
            "    timeout: ${15:30}",
            "    use_proxy: ${16|true,false|}",
            "    use_ssl: ${17|true,false|}",
            "    username: ${18:admin}",
            "    validate_certs: ${19|true,false|}",
            "$0"
        ],
        "description": "Manage Cloud APIC BGP Autonomous System Profile (cloud:BgpAsP)",
        "scope": "ansible"
    },
    "Manage CIDR under Cloud Context Profile (cloud:Cidr)": {
        "prefix": [
            "cisco.aci.aci_cloud_cidr",
            "Manage CIDR under Cloud Context Profile (cloud:Cidr)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_cloud_cidr:",
            "    address: ${2:string}",
            "    annotation: ${3:orchestrator:ansible}",
            "    certificate_name: ${4:string}",
            "    cloud_context_profile: ${5:string}",
            "    description: ${6:string}",
            "    host: ${7:string}",
            "    name_alias: ${8:string}",
            "    output_level: ${9|normal,debug,info|}",
            "    output_path: ${10:string}",
            "    owner_key: ${11:string}",
            "    owner_tag: ${12:string}",
            "    password: ${13:string}",
            "    port: ${14:int}",
            "    private_key: ${15:string}",
            "    state: ${16|present,absent,query|}",
            "    tenant: ${17:string}",
            "    timeout: ${18:30}",
            "    use_proxy: ${19|true,false|}",
            "    use_ssl: ${20|true,false|}",
            "    username: ${21:admin}",
            "    validate_certs: ${22|true,false|}",
            "$0"
        ],
        "description": "Manage CIDR under Cloud Context Profile (cloud:Cidr)",
        "scope": "ansible"
    },
    "Manage Cloud Context Profile (cloud:CtxProfile)": {
        "prefix": [
            "cisco.aci.aci_cloud_ctx_profile",
            "Manage Cloud Context Profile (cloud:CtxProfile)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_cloud_ctx_profile:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    cloud: ${4:string}",
            "    description: ${5:string}",
            "    host: ${6:string}",
            "    name: ${7:string}",
            "    name_alias: ${8:string}",
            "    output_level: ${9|normal,debug,info|}",
            "    output_path: ${10:string}",
            "    owner_key: ${11:string}",
            "    owner_tag: ${12:string}",
            "    password: ${13:string}",
            "    port: ${14:int}",
            "    primary_cidr: ${15:string}",
            "    private_key: ${16:string}",
            "    region: ${17:string}",
            "    state: ${18|present,absent,query|}",
            "    tenant: ${19:string}",
            "    timeout: ${20:30}",
            "    use_proxy: ${21|true,false|}",
            "    use_ssl: ${22|true,false|}",
            "    username: ${23:admin}",
            "    validate_certs: ${24|true,false|}",
            "    vrf: ${25:string}",
            "$0"
        ],
        "description": "Manage Cloud Context Profile (cloud:CtxProfile)",
        "scope": "ansible"
    },
    "Manage Cloud EPG (cloud:EPg)": {
        "prefix": [
            "cisco.aci.aci_cloud_epg",
            "Manage Cloud EPG (cloud:EPg)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_cloud_epg:",
            "    annotation: ${2:orchestrator:ansible}",
            "    ap: ${3:string}",
            "    certificate_name: ${4:string}",
            "    description: ${5:string}",
            "    host: ${6:string}",
            "    name: ${7:string}",
            "    output_level: ${8|normal,debug,info|}",
            "    output_path: ${9:string}",
            "    password: ${10:string}",
            "    port: ${11:int}",
            "    private_key: ${12:string}",
            "    state: ${13|present,absent,query|}",
            "    tenant: ${14:string}",
            "    timeout: ${15:30}",
            "    use_proxy: ${16|true,false|}",
            "    use_ssl: ${17|true,false|}",
            "    username: ${18:admin}",
            "    validate_certs: ${19|true,false|}",
            "    vrf: ${20:string}",
            "$0"
        ],
        "description": "Manage Cloud EPG (cloud:EPg)",
        "scope": "ansible"
    },
    "Manage Cloud Endpoint Selector (cloud:EPSelector)": {
        "prefix": [
            "cisco.aci.aci_cloud_epg_selector",
            "Manage Cloud Endpoint Selector (cloud:EPSelector)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_cloud_epg_selector:",
            "    annotation: ${2:orchestrator:ansible}",
            "    ap: ${3:string}",
            "    certificate_name: ${4:string}",
            "    description: ${5:string}",
            "    epg: ${6:string}",
            "    expressions:",
            "      - ${7:element}",
            "    host: ${8:string}",
            "    name: ${9:string}",
            "    output_level: ${10|normal,debug,info|}",
            "    output_path: ${11:string}",
            "    owner_key: ${12:string}",
            "    owner_tag: ${13:string}",
            "    password: ${14:string}",
            "    port: ${15:int}",
            "    private_key: ${16:string}",
            "    state: ${17|present,absent,query|}",
            "    tenant: ${18:string}",
            "    timeout: ${19:30}",
            "    use_proxy: ${20|true,false|}",
            "    use_ssl: ${21|true,false|}",
            "    username: ${22:admin}",
            "    validate_certs: ${23|true,false|}",
            "$0"
        ],
        "description": "Manage Cloud Endpoint Selector (cloud:EPSelector)",
        "scope": "ansible"
    },
    "Manage Cloud External EPG (cloud:ExtEPg)": {
        "prefix": [
            "cisco.aci.aci_cloud_external_epg",
            "Manage Cloud External EPG (cloud:ExtEPg)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_cloud_external_epg:",
            "    annotation: ${2:orchestrator:ansible}",
            "    ap: ${3:string}",
            "    certificate_name: ${4:string}",
            "    description: ${5:string}",
            "    host: ${6:string}",
            "    name: ${7:string}",
            "    output_level: ${8|normal,debug,info|}",
            "    output_path: ${9:string}",
            "    password: ${10:string}",
            "    port: ${11:int}",
            "    private_key: ${12:string}",
            "    route_reachability: ${13:string}",
            "    state: ${14|present,absent,query|}",
            "    tenant: ${15:string}",
            "    timeout: ${16:30}",
            "    use_proxy: ${17|true,false|}",
            "    use_ssl: ${18|true,false|}",
            "    username: ${19:admin}",
            "    validate_certs: ${20|true,false|}",
            "    vrf: ${21:string}",
            "$0"
        ],
        "description": "Manage Cloud External EPG (cloud:ExtEPg)",
        "scope": "ansible"
    },
    "Manage Cloud Endpoint Selector for External EPGs (cloud:ExtEPSelector)": {
        "prefix": [
            "cisco.aci.aci_cloud_external_epg_selector",
            "Manage Cloud Endpoint Selector for External EPGs (cloud:ExtEPSelector)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_cloud_external_epg_selector:",
            "    annotation: ${2:orchestrator:ansible}",
            "    ap: ${3:string}",
            "    certificate_name: ${4:string}",
            "    cloud_external_epg: ${5:string}",
            "    host: ${6:string}",
            "    name: ${7:string}",
            "    output_level: ${8|normal,debug,info|}",
            "    output_path: ${9:string}",
            "    owner_key: ${10:string}",
            "    owner_tag: ${11:string}",
            "    password: ${12:string}",
            "    port: ${13:int}",
            "    private_key: ${14:string}",
            "    state: ${15|present,absent,query|}",
            "    subnet: ${16:string}",
            "    tenant: ${17:string}",
            "    timeout: ${18:30}",
            "    use_proxy: ${19|true,false|}",
            "    use_ssl: ${20|true,false|}",
            "    username: ${21:admin}",
            "    validate_certs: ${22|true,false|}",
            "$0"
        ],
        "description": "Manage Cloud Endpoint Selector for External EPGs (cloud:ExtEPSelector)",
        "scope": "ansible"
    },
    "Query Cloud Provider information (cloud:ProvP)": {
        "prefix": [
            "cisco.aci.aci_cloud_provider",
            "Query Cloud Provider information (cloud:ProvP)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_cloud_provider:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    host: ${4:string}",
            "    output_level: ${5|normal,debug,info|}",
            "    output_path: ${6:string}",
            "    password: ${7:string}",
            "    port: ${8:int}",
            "    private_key: ${9:string}",
            "    state: ${10|query|}",
            "    timeout: ${11:30}",
            "    use_proxy: ${12|true,false|}",
            "    use_ssl: ${13|true,false|}",
            "    username: ${14:admin}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "Query Cloud Provider information (cloud:ProvP)",
        "scope": "ansible"
    },
    "Manage Cloud Providers Region (cloud:Region)": {
        "prefix": [
            "cisco.aci.aci_cloud_region",
            "Manage Cloud Providers Region (cloud:Region)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_cloud_region:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    cloud: ${4:string}",
            "    host: ${5:string}",
            "    output_level: ${6|normal,debug,info|}",
            "    output_path: ${7:string}",
            "    password: ${8:string}",
            "    port: ${9:int}",
            "    private_key: ${10:string}",
            "    region: ${11:string}",
            "    state: ${12|query|}",
            "    timeout: ${13:30}",
            "    use_proxy: ${14|true,false|}",
            "    use_ssl: ${15|true,false|}",
            "    username: ${16:admin}",
            "    validate_certs: ${17|true,false|}",
            "$0"
        ],
        "description": "Manage Cloud Providers Region (cloud:Region)",
        "scope": "ansible"
    },
    "Manage Cloud Subnet (cloud:Subnet)": {
        "prefix": [
            "cisco.aci.aci_cloud_subnet",
            "Manage Cloud Subnet (cloud:Subnet)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_cloud_subnet:",
            "    address: ${2:string}",
            "    annotation: ${3:orchestrator:ansible}",
            "    availability_zone: ${4:string}",
            "    certificate_name: ${5:string}",
            "    cidr: ${6:string}",
            "    cloud_context_profile: ${7:string}",
            "    description: ${8:string}",
            "    host: ${9:string}",
            "    name: ${10:string}",
            "    name_alias: ${11:string}",
            "    output_level: ${12|normal,debug,info|}",
            "    output_path: ${13:string}",
            "    password: ${14:string}",
            "    port: ${15:int}",
            "    private_key: ${16:string}",
            "    state: ${17|present,absent,query|}",
            "    tenant: ${18:string}",
            "    timeout: ${19:30}",
            "    use_proxy: ${20|true,false|}",
            "    use_ssl: ${21|true,false|}",
            "    username: ${22:admin}",
            "    validate_certs: ${23|true,false|}",
            "    vnet_gateway: ${24|false,true|}",
            "$0"
        ],
        "description": "Manage Cloud Subnet (cloud:Subnet)",
        "scope": "ansible"
    },
    "Manage cloudRouterP in Cloud Context Profile (cloud:cloudRouterP)": {
        "prefix": [
            "cisco.aci.aci_cloud_vpn_gateway",
            "Manage cloudRouterP in Cloud Context Profile (cloud:cloudRouterP)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_cloud_vpn_gateway:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    cloud_context_profile: ${4:string}",
            "    host: ${5:string}",
            "    output_level: ${6|normal,debug,info|}",
            "    output_path: ${7:string}",
            "    owner_key: ${8:string}",
            "    owner_tag: ${9:string}",
            "    password: ${10:string}",
            "    port: ${11:int}",
            "    private_key: ${12:string}",
            "    state: ${13|query,absent,present|}",
            "    tenant: ${14:string}",
            "    timeout: ${15:30}",
            "    use_proxy: ${16|true,false|}",
            "    use_ssl: ${17|true,false|}",
            "    username: ${18:admin}",
            "    validate_certs: ${19|true,false|}",
            "$0"
        ],
        "description": "Manage cloudRouterP in Cloud Context Profile (cloud:cloudRouterP)",
        "scope": "ansible"
    },
    "Manage Cloud Availability Zone (cloud:Zone)": {
        "prefix": [
            "cisco.aci.aci_cloud_zone",
            "Manage Cloud Availability Zone (cloud:Zone)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_cloud_zone:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    cloud: ${4:string}",
            "    host: ${5:string}",
            "    name: ${6:string}",
            "    output_level: ${7|normal,debug,info|}",
            "    output_path: ${8:string}",
            "    password: ${9:string}",
            "    port: ${10:int}",
            "    private_key: ${11:string}",
            "    region: ${12:string}",
            "    state: ${13|query|}",
            "    timeout: ${14:30}",
            "    use_proxy: ${15|true,false|}",
            "    use_ssl: ${16|true,false|}",
            "    username: ${17:admin}",
            "    validate_certs: ${18|true,false|}",
            "$0"
        ],
        "description": "Manage Cloud Availability Zone (cloud:Zone)",
        "scope": "ansible"
    },
    "Provides rollback and rollback preview functionality (config:ImportP)": {
        "prefix": [
            "cisco.aci.aci_config_rollback",
            "Provides rollback and rollback preview functionality (config:ImportP)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_config_rollback:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    compare_export_policy: ${4:string}",
            "    compare_snapshot: ${5:string}",
            "    description: ${6:string}",
            "    export_policy: ${7:string}",
            "    fail_on_decrypt: ${8|false,true|}",
            "    host: ${9:string}",
            "    import_mode: ${10:string}",
            "    import_policy: ${11:string}",
            "    import_type: ${12:string}",
            "    output_level: ${13|normal,debug,info|}",
            "    output_path: ${14:string}",
            "    password: ${15:string}",
            "    port: ${16:int}",
            "    private_key: ${17:string}",
            "    snapshot: ${18:string}",
            "    state: ${19|rollback,preview|}",
            "    timeout: ${20:30}",
            "    use_proxy: ${21|true,false|}",
            "    use_ssl: ${22|true,false|}",
            "    username: ${23:admin}",
            "    validate_certs: ${24|true,false|}",
            "$0"
        ],
        "description": "Provides rollback and rollback preview functionality (config:ImportP)",
        "scope": "ansible"
    },
    "Manage Config Snapshots (config:Snapshot, config:ExportP)": {
        "prefix": [
            "cisco.aci.aci_config_snapshot",
            "Manage Config Snapshots (config:Snapshot, config:ExportP)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_config_snapshot:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    description: ${4:string}",
            "    export_policy: ${5:string}",
            "    format: ${6:string}",
            "    host: ${7:string}",
            "    include_secure: ${8|false,true|}",
            "    max_count: ${9:int}",
            "    output_level: ${10|normal,debug,info|}",
            "    output_path: ${11:string}",
            "    password: ${12:string}",
            "    port: ${13:int}",
            "    private_key: ${14:string}",
            "    snapshot: ${15:string}",
            "    state: ${16|present,absent,query|}",
            "    timeout: ${17:30}",
            "    use_proxy: ${18|true,false|}",
            "    use_ssl: ${19|true,false|}",
            "    username: ${20:admin}",
            "    validate_certs: ${21|true,false|}",
            "$0"
        ],
        "description": "Manage Config Snapshots (config:Snapshot, config:ExportP)",
        "scope": "ansible"
    },
    "Manage contract resources (vz:BrCP)": {
        "prefix": [
            "cisco.aci.aci_contract",
            "Manage contract resources (vz:BrCP)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_contract:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    contract: ${4:string}",
            "    description: ${5:string}",
            "    dscp: ${6:string}",
            "    host: ${7:string}",
            "    name_alias: ${8:string}",
            "    output_level: ${9|normal,debug,info|}",
            "    output_path: ${10:string}",
            "    owner_key: ${11:string}",
            "    owner_tag: ${12:string}",
            "    password: ${13:string}",
            "    port: ${14:int}",
            "    priority: ${15:string}",
            "    private_key: ${16:string}",
            "    scope: ${17:string}",
            "    state: ${18|present,absent,query|}",
            "    tenant: ${19:string}",
            "    timeout: ${20:30}",
            "    use_proxy: ${21|true,false|}",
            "    use_ssl: ${22|true,false|}",
            "    username: ${23:admin}",
            "    validate_certs: ${24|true,false|}",
            "$0"
        ],
        "description": "Manage contract resources (vz:BrCP)",
        "scope": "ansible"
    },
    "Manage contract interfaces (vz:CPIf)": {
        "prefix": [
            "cisco.aci.aci_contract_export",
            "Manage contract interfaces (vz:CPIf)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_contract_export:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    contract: ${4:string}",
            "    description: ${5:string}",
            "    destination_tenant: ${6:string}",
            "    host: ${7:string}",
            "    name: ${8:string}",
            "    output_level: ${9|normal,debug,info|}",
            "    output_path: ${10:string}",
            "    owner_key: ${11:string}",
            "    owner_tag: ${12:string}",
            "    password: ${13:string}",
            "    port: ${14:int}",
            "    private_key: ${15:string}",
            "    state: ${16|present,absent,query|}",
            "    tenant: ${17:string}",
            "    timeout: ${18:30}",
            "    use_proxy: ${19|true,false|}",
            "    use_ssl: ${20|true,false|}",
            "    username: ${21:admin}",
            "    validate_certs: ${22|true,false|}",
            "$0"
        ],
        "description": "Manage contract interfaces (vz:CPIf)",
        "scope": "ansible"
    },
    "Manage initial Contract Subjects (vz:Subj)": {
        "prefix": [
            "cisco.aci.aci_contract_subject",
            "Manage initial Contract Subjects (vz:Subj)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_contract_subject:",
            "    annotation: ${2:orchestrator:ansible}",
            "    apply_both_direction: ${3|both,one-way|}",
            "    certificate_name: ${4:string}",
            "    consumer_match: ${5:string}",
            "    contract: ${6:string}",
            "    description: ${7:string}",
            "    dscp: ${8:string}",
            "    dscp_consumer_to_provider: ${9:string}",
            "    dscp_provider_to_consumer: ${10:string}",
            "    host: ${11:string}",
            "    name_alias: ${12:string}",
            "    output_level: ${13|normal,debug,info|}",
            "    output_path: ${14:string}",
            "    password: ${15:string}",
            "    port: ${16:int}",
            "    priority: ${17:string}",
            "    priority_consumer_to_provider: ${18:string}",
            "    priority_provider_to_consumer: ${19:string}",
            "    private_key: ${20:string}",
            "    provider_match: ${21:string}",
            "    reverse_filter: ${22|false,true|}",
            "    state: ${23|present,absent,query|}",
            "    subject: ${24:string}",
            "    tenant: ${25:string}",
            "    timeout: ${26:30}",
            "    use_proxy: ${27|true,false|}",
            "    use_ssl: ${28|true,false|}",
            "    username: ${29:admin}",
            "    validate_certs: ${30|true,false|}",
            "$0"
        ],
        "description": "Manage initial Contract Subjects (vz:Subj)",
        "scope": "ansible"
    },
    "Bind Contract Subjects to Filters (vz:RsSubjFiltAtt)": {
        "prefix": [
            "cisco.aci.aci_contract_subject_to_filter",
            "Bind Contract Subjects to Filters (vz:RsSubjFiltAtt)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_contract_subject_to_filter:",
            "    action: ${2:string}",
            "    annotation: ${3:orchestrator:ansible}",
            "    certificate_name: ${4:string}",
            "    contract: ${5:string}",
            "    direction: ${6|both,consumer_to_provider,provider_to_consumer|}",
            "    directives: ${7:string}",
            "    filter: ${8:string}",
            "    host: ${9:string}",
            "    output_level: ${10|normal,debug,info|}",
            "    output_path: ${11:string}",
            "    password: ${12:string}",
            "    port: ${13:int}",
            "    priority_override: ${14:string}",
            "    private_key: ${15:string}",
            "    state: ${16|present,absent,query|}",
            "    subject: ${17:string}",
            "    tenant: ${18:string}",
            "    timeout: ${19:30}",
            "    use_proxy: ${20|true,false|}",
            "    use_ssl: ${21|true,false|}",
            "    username: ${22:admin}",
            "    validate_certs: ${23|true,false|}",
            "$0"
        ],
        "description": "Bind Contract Subjects to Filters (vz:RsSubjFiltAtt)",
        "scope": "ansible"
    },
    "Bind contract subject to service graph (vz:RsSubjGraphAtt).": {
        "prefix": [
            "cisco.aci.aci_contract_subject_to_service_graph",
            "Bind contract subject to service graph (vz:RsSubjGraphAtt)."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_contract_subject_to_service_graph:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    contract: ${4:string}",
            "    host: ${5:string}",
            "    output_level: ${6|normal,debug,info|}",
            "    output_path: ${7:string}",
            "    password: ${8:string}",
            "    port: ${9:int}",
            "    private_key: ${10:string}",
            "    service_graph: ${11:string}",
            "    state: ${12|present,absent,query|}",
            "    subject: ${13:string}",
            "    tenant: ${14:string}",
            "    timeout: ${15:30}",
            "    use_proxy: ${16|true,false|}",
            "    use_ssl: ${17|true,false|}",
            "    username: ${18:admin}",
            "    validate_certs: ${19|true,false|}",
            "$0"
        ],
        "description": "Bind contract subject to service graph (vz:RsSubjGraphAtt).",
        "scope": "ansible"
    },
    "Manage DHCP relay policies.": {
        "prefix": [
            "cisco.aci.aci_dhcp_relay",
            "Manage DHCP relay policies."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_dhcp_relay:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    description: ${4:string}",
            "    host: ${5:string}",
            "    name: ${6:string}",
            "    output_level: ${7|normal,debug,info|}",
            "    output_path: ${8:string}",
            "    password: ${9:string}",
            "    port: ${10:int}",
            "    private_key: ${11:string}",
            "    state: ${12|present,absent,query|}",
            "    tenant: ${13:string}",
            "    timeout: ${14:30}",
            "    use_proxy: ${15|true,false|}",
            "    use_ssl: ${16|true,false|}",
            "    username: ${17:admin}",
            "    validate_certs: ${18|true,false|}",
            "$0"
        ],
        "description": "Manage DHCP relay policies.",
        "scope": "ansible"
    },
    "Manage DHCP relay policy providers.": {
        "prefix": [
            "cisco.aci.aci_dhcp_relay_provider",
            "Manage DHCP relay policy providers."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_dhcp_relay_provider:",
            "    annotation: ${2:orchestrator:ansible}",
            "    anp: ${3:string}",
            "    certificate_name: ${4:string}",
            "    dhcp_server_addr: ${5:string}",
            "    dn: ${6:string}",
            "    epg: ${7:string}",
            "    epg_type: ${8:string}",
            "    external_epg: ${9:string}",
            "    host: ${10:string}",
            "    l2out_name: ${11:string}",
            "    l3out_name: ${12:string}",
            "    output_level: ${13|normal,debug,info|}",
            "    output_path: ${14:string}",
            "    password: ${15:string}",
            "    port: ${16:int}",
            "    private_key: ${17:string}",
            "    provider_tenant: ${18:string}",
            "    relay_policy: ${19:string}",
            "    state: ${20|present,absent,query|}",
            "    tenant: ${21:string}",
            "    timeout: ${22:30}",
            "    use_proxy: ${23|true,false|}",
            "    use_ssl: ${24|true,false|}",
            "    username: ${25:admin}",
            "    validate_certs: ${26|true,false|}",
            "$0"
        ],
        "description": "Manage DHCP relay policy providers.",
        "scope": "ansible"
    },
    "Manage DNS Provider (dnsDomain) objects.": {
        "prefix": [
            "cisco.aci.aci_dns_domain",
            "Manage DNS Provider (dnsDomain) objects."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_dns_domain:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    default: ${4|false,true|}",
            "    dns_profile: ${5:string}",
            "    domain: ${6:string}",
            "    host: ${7:string}",
            "    output_level: ${8|normal,debug,info|}",
            "    output_path: ${9:string}",
            "    password: ${10:string}",
            "    port: ${11:int}",
            "    private_key: ${12:string}",
            "    state: ${13|present,absent,query|}",
            "    timeout: ${14:30}",
            "    use_proxy: ${15|true,false|}",
            "    use_ssl: ${16|true,false|}",
            "    username: ${17:admin}",
            "    validate_certs: ${18|true,false|}",
            "$0"
        ],
        "description": "Manage DNS Provider (dnsDomain) objects.",
        "scope": "ansible"
    },
    "Manage DNS Profile (dnsProfile) objects.": {
        "prefix": [
            "cisco.aci.aci_dns_profile",
            "Manage DNS Profile (dnsProfile) objects."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_dns_profile:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    dns_profile: ${4:string}",
            "    host: ${5:string}",
            "    output_level: ${6|normal,debug,info|}",
            "    output_path: ${7:string}",
            "    password: ${8:string}",
            "    port: ${9:int}",
            "    private_key: ${10:string}",
            "    state: ${11|present,absent,query|}",
            "    timeout: ${12:30}",
            "    use_proxy: ${13|true,false|}",
            "    use_ssl: ${14|true,false|}",
            "    username: ${15:admin}",
            "    validate_certs: ${16|true,false|}",
            "$0"
        ],
        "description": "Manage DNS Profile (dnsProfile) objects.",
        "scope": "ansible"
    },
    "Manage DNS Provider (dnsProv) objects.": {
        "prefix": [
            "cisco.aci.aci_dns_provider",
            "Manage DNS Provider (dnsProv) objects."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_dns_provider:",
            "    address: ${2:string}",
            "    annotation: ${3:orchestrator:ansible}",
            "    certificate_name: ${4:string}",
            "    dns_profile: ${5:string}",
            "    host: ${6:string}",
            "    output_level: ${7|normal,debug,info|}",
            "    output_path: ${8:string}",
            "    password: ${9:string}",
            "    port: ${10:int}",
            "    preferred: ${11|false,true|}",
            "    private_key: ${12:string}",
            "    state: ${13|present,absent,query|}",
            "    timeout: ${14:30}",
            "    use_proxy: ${15|true,false|}",
            "    use_ssl: ${16|true,false|}",
            "    username: ${17:admin}",
            "    validate_certs: ${18|true,false|}",
            "$0"
        ],
        "description": "Manage DNS Provider (dnsProv) objects.",
        "scope": "ansible"
    },
    "Manage physical, virtual, bridged, routed or FC domain profiles (phys:DomP, vmm:DomP, l2ext:DomP, l3ext:DomP, fc:DomP)": {
        "prefix": [
            "cisco.aci.aci_domain",
            "Manage physical, virtual, bridged, routed or FC domain profiles (phys:DomP, vmm:DomP, l2ext:DomP, l3ext:DomP, fc:DomP)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_domain:",
            "    access_mode: ${2:string}",
            "    add_infra_pg: ${3|false,true|}",
            "    annotation: ${4:orchestrator:ansible}",
            "    certificate_name: ${5:string}",
            "    domain: ${6:string}",
            "    domain_type: ${7:string}",
            "    dscp: ${8:string}",
            "    enable_vm_folder: ${9|false,true|}",
            "    encap_mode: ${10:string}",
            "    host: ${11:string}",
            "    multicast_address: ${12:string}",
            "    name_alias: ${13:string}",
            "    output_level: ${14|normal,debug,info|}",
            "    output_path: ${15:string}",
            "    owner_key: ${16:string}",
            "    owner_tag: ${17:string}",
            "    password: ${18:string}",
            "    port: ${19:int}",
            "    private_key: ${20:string}",
            "    state: ${21|present,absent,query|}",
            "    tag_collection: ${22|false,true|}",
            "    timeout: ${23:30}",
            "    use_proxy: ${24|true,false|}",
            "    use_ssl: ${25|true,false|}",
            "    username: ${26:admin}",
            "    validate_certs: ${27|true,false|}",
            "    vm_provider: ${28:string}",
            "    vswitch: ${29:string}",
            "$0"
        ],
        "description": "Manage physical, virtual, bridged, routed or FC domain profiles (phys:DomP, vmm:DomP, l2ext:DomP, l3ext:DomP, fc:DomP)",
        "scope": "ansible"
    },
    "Bind Domain to Encap Pools (infra:RsVlanNs)": {
        "prefix": [
            "cisco.aci.aci_domain_to_encap_pool",
            "Bind Domain to Encap Pools (infra:RsVlanNs)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_domain_to_encap_pool:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    domain: ${4:string}",
            "    domain_type: ${5:string}",
            "    host: ${6:string}",
            "    output_level: ${7|normal,debug,info|}",
            "    output_path: ${8:string}",
            "    password: ${9:string}",
            "    pool: ${10:string}",
            "    pool_allocation_mode: ${11:string}",
            "    pool_type: ${12:string}",
            "    port: ${13:int}",
            "    private_key: ${14:string}",
            "    state: ${15|present,absent,query|}",
            "    timeout: ${16:30}",
            "    use_proxy: ${17|true,false|}",
            "    use_ssl: ${18|true,false|}",
            "    username: ${19:admin}",
            "    validate_certs: ${20|true,false|}",
            "    vm_provider: ${21:string}",
            "$0"
        ],
        "description": "Bind Domain to Encap Pools (infra:RsVlanNs)",
        "scope": "ansible"
    },
    "Bind Domain to VLAN Pools (infra:RsVlanNs)": {
        "prefix": [
            "cisco.aci.aci_domain_to_vlan_pool",
            "Bind Domain to VLAN Pools (infra:RsVlanNs)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_domain_to_vlan_pool:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    domain: ${4:string}",
            "    domain_type: ${5:string}",
            "    host: ${6:string}",
            "    output_level: ${7|normal,debug,info|}",
            "    output_path: ${8:string}",
            "    password: ${9:string}",
            "    pool: ${10:string}",
            "    pool_allocation_mode: ${11:string}",
            "    port: ${12:int}",
            "    private_key: ${13:string}",
            "    state: ${14|present,absent,query|}",
            "    timeout: ${15:30}",
            "    use_proxy: ${16|true,false|}",
            "    use_ssl: ${17|true,false|}",
            "    username: ${18:admin}",
            "    validate_certs: ${19|true,false|}",
            "    vm_provider: ${20:string}",
            "$0"
        ],
        "description": "Bind Domain to VLAN Pools (infra:RsVlanNs)",
        "scope": "ansible"
    },
    "Manage encap pools (fvns:VlanInstP, fvns:VxlanInstP, fvns:VsanInstP)": {
        "prefix": [
            "cisco.aci.aci_encap_pool",
            "Manage encap pools (fvns:VlanInstP, fvns:VxlanInstP, fvns:VsanInstP)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_encap_pool:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    description: ${4:string}",
            "    host: ${5:string}",
            "    name_alias: ${6:string}",
            "    output_level: ${7|normal,debug,info|}",
            "    output_path: ${8:string}",
            "    owner_key: ${9:string}",
            "    owner_tag: ${10:string}",
            "    password: ${11:string}",
            "    pool: ${12:string}",
            "    pool_allocation_mode: ${13:string}",
            "    pool_type: ${14:string}",
            "    port: ${15:int}",
            "    private_key: ${16:string}",
            "    state: ${17|present,absent,query|}",
            "    timeout: ${18:30}",
            "    use_proxy: ${19|true,false|}",
            "    use_ssl: ${20|true,false|}",
            "    username: ${21:admin}",
            "    validate_certs: ${22|true,false|}",
            "$0"
        ],
        "description": "Manage encap pools (fvns:VlanInstP, fvns:VxlanInstP, fvns:VsanInstP)",
        "scope": "ansible"
    },
    "Manage encap ranges assigned to pools (fvns:EncapBlk, fvns:VsanEncapBlk)": {
        "prefix": [
            "cisco.aci.aci_encap_pool_range",
            "Manage encap ranges assigned to pools (fvns:EncapBlk, fvns:VsanEncapBlk)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_encap_pool_range:",
            "    allocation_mode: ${2:string}",
            "    annotation: ${3:orchestrator:ansible}",
            "    certificate_name: ${4:string}",
            "    description: ${5:string}",
            "    host: ${6:string}",
            "    name_alias: ${7:string}",
            "    output_level: ${8|normal,debug,info|}",
            "    output_path: ${9:string}",
            "    password: ${10:string}",
            "    pool: ${11:string}",
            "    pool_allocation_mode: ${12:string}",
            "    pool_type: ${13:string}",
            "    port: ${14:int}",
            "    private_key: ${15:string}",
            "    range_end: ${16:int}",
            "    range_name: ${17:string}",
            "    range_start: ${18:int}",
            "    state: ${19|present,absent,query|}",
            "    timeout: ${20:30}",
            "    use_proxy: ${21|true,false|}",
            "    use_ssl: ${22|true,false|}",
            "    username: ${23:admin}",
            "    validate_certs: ${24|true,false|}",
            "$0"
        ],
        "description": "Manage encap ranges assigned to pools (fvns:EncapBlk, fvns:VsanEncapBlk)",
        "scope": "ansible"
    },
    "Manage End Point Groups (EPG) objects (fv:AEPg)": {
        "prefix": [
            "cisco.aci.aci_epg",
            "Manage End Point Groups (EPG) objects (fv:AEPg)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_epg:",
            "    annotation: ${2:orchestrator:ansible}",
            "    ap: ${3:string}",
            "    bd: ${4:string}",
            "    certificate_name: ${5:string}",
            "    custom_qos_policy: ${6:string}",
            "    description: ${7:string}",
            "    epg: ${8:string}",
            "    fwd_control: ${9:string}",
            "    host: ${10:string}",
            "    intra_epg_isolation: ${11:string}",
            "    monitoring_policy: ${12:string}",
            "    name_alias: ${13:string}",
            "    output_level: ${14|normal,debug,info|}",
            "    output_path: ${15:string}",
            "    password: ${16:string}",
            "    port: ${17:int}",
            "    preferred_group: ${18|false,true|}",
            "    priority: ${19:string}",
            "    private_key: ${20:string}",
            "    state: ${21|present,absent,query|}",
            "    tenant: ${22:string}",
            "    timeout: ${23:30}",
            "    use_proxy: ${24|true,false|}",
            "    use_ssl: ${25|true,false|}",
            "    useg: ${26:string}",
            "    username: ${27:admin}",
            "    validate_certs: ${28|true,false|}",
            "$0"
        ],
        "description": "Manage End Point Groups (EPG) objects (fv:AEPg)",
        "scope": "ansible"
    },
    "Manage monitoring policies (mon:EPGPol)": {
        "prefix": [
            "cisco.aci.aci_epg_monitoring_policy",
            "Manage monitoring policies (mon:EPGPol)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_epg_monitoring_policy:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    description: ${4:string}",
            "    host: ${5:string}",
            "    monitoring_policy: ${6:string}",
            "    name_alias: ${7:string}",
            "    output_level: ${8|normal,debug,info|}",
            "    output_path: ${9:string}",
            "    owner_key: ${10:string}",
            "    owner_tag: ${11:string}",
            "    password: ${12:string}",
            "    port: ${13:int}",
            "    private_key: ${14:string}",
            "    state: ${15|present,absent,query|}",
            "    tenant: ${16:string}",
            "    timeout: ${17:30}",
            "    use_proxy: ${18|true,false|}",
            "    use_ssl: ${19|true,false|}",
            "    username: ${20:admin}",
            "    validate_certs: ${21|true,false|}",
            "$0"
        ],
        "description": "Manage monitoring policies (mon:EPGPol)",
        "scope": "ansible"
    },
    "Bind EPGs to Contracts (fv:RsCons, fv:RsProv)": {
        "prefix": [
            "cisco.aci.aci_epg_to_contract",
            "Bind EPGs to Contracts (fv:RsCons, fv:RsProv)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_epg_to_contract:",
            "    annotation: ${2:orchestrator:ansible}",
            "    ap: ${3:string}",
            "    certificate_name: ${4:string}",
            "    contract: ${5:string}",
            "    contract_label: ${6:string}",
            "    contract_type: ${7:string}",
            "    epg: ${8:string}",
            "    host: ${9:string}",
            "    output_level: ${10|normal,debug,info|}",
            "    output_path: ${11:string}",
            "    password: ${12:string}",
            "    port: ${13:int}",
            "    priority: ${14:string}",
            "    private_key: ${15:string}",
            "    provider_match: ${16:string}",
            "    state: ${17|present,absent,query|}",
            "    subject_label: ${18:string}",
            "    tenant: ${19:string}",
            "    timeout: ${20:30}",
            "    use_proxy: ${21|true,false|}",
            "    use_ssl: ${22|true,false|}",
            "    username: ${23:admin}",
            "    validate_certs: ${24|true,false|}",
            "$0"
        ],
        "description": "Bind EPGs to Contracts (fv:RsCons, fv:RsProv)",
        "scope": "ansible"
    },
    "Bind EPGs to Consumed Contracts Interface (fv:RsConsIf).": {
        "prefix": [
            "cisco.aci.aci_epg_to_contract_interface",
            "Bind EPGs to Consumed Contracts Interface (fv:RsConsIf)."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_epg_to_contract_interface:",
            "    annotation: ${2:orchestrator:ansible}",
            "    ap: ${3:string}",
            "    certificate_name: ${4:string}",
            "    contract_interface: ${5:string}",
            "    epg: ${6:string}",
            "    host: ${7:string}",
            "    output_level: ${8|normal,debug,info|}",
            "    output_path: ${9:string}",
            "    password: ${10:string}",
            "    port: ${11:int}",
            "    priority: ${12:string}",
            "    private_key: ${13:string}",
            "    state: ${14|present,absent,query|}",
            "    tenant: ${15:string}",
            "    timeout: ${16:30}",
            "    use_proxy: ${17|true,false|}",
            "    use_ssl: ${18|true,false|}",
            "    username: ${19:admin}",
            "    validate_certs: ${20|true,false|}",
            "$0"
        ],
        "description": "Bind EPGs to Consumed Contracts Interface (fv:RsConsIf).",
        "scope": "ansible"
    },
    "Manage End Point Group (EPG) contract master relationships (fv:RsSecInherited)": {
        "prefix": [
            "cisco.aci.aci_epg_to_contract_master",
            "Manage End Point Group (EPG) contract master relationships (fv:RsSecInherited)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_epg_to_contract_master:",
            "    annotation: ${2:orchestrator:ansible}",
            "    ap: ${3:string}",
            "    certificate_name: ${4:string}",
            "    contract_master_ap: ${5:string}",
            "    contract_master_epg: ${6:string}",
            "    epg: ${7:string}",
            "    host: ${8:string}",
            "    output_level: ${9|normal,debug,info|}",
            "    output_path: ${10:string}",
            "    password: ${11:string}",
            "    port: ${12:int}",
            "    private_key: ${13:string}",
            "    state: ${14|present,absent,query|}",
            "    tenant: ${15:string}",
            "    timeout: ${16:30}",
            "    use_proxy: ${17|true,false|}",
            "    use_ssl: ${18|true,false|}",
            "    username: ${19:admin}",
            "    validate_certs: ${20|true,false|}",
            "$0"
        ],
        "description": "Manage End Point Group (EPG) contract master relationships (fv:RsSecInherited)",
        "scope": "ansible"
    },
    "Bind EPGs to Domains (fv:RsDomAtt)": {
        "prefix": [
            "cisco.aci.aci_epg_to_domain",
            "Bind EPGs to Domains (fv:RsDomAtt)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_epg_to_domain:",
            "    allow_useg: ${2:string}",
            "    annotation: ${3:orchestrator:ansible}",
            "    ap: ${4:string}",
            "    certificate_name: ${5:string}",
            "    custom_epg_name: ${6:string}",
            "    delimiter: ${7:string}",
            "    deploy_immediacy: ${8:string}",
            "    domain: ${9:string}",
            "    domain_type: ${10:string}",
            "    encap: ${11:int}",
            "    encap_mode: ${12:string}",
            "    enhanced_lag_policy: ${13:string}",
            "    epg: ${14:string}",
            "    forged_transmits: ${15|reject,accept|}",
            "    host: ${16:string}",
            "    mac_changes: ${17|reject,accept|}",
            "    netflow: ${18|false,true|}",
            "    number_of_ports: ${19:int}",
            "    output_level: ${20|normal,debug,info|}",
            "    output_path: ${21:string}",
            "    password: ${22:string}",
            "    port: ${23:int}",
            "    port_allocation: ${24:string}",
            "    port_binding: ${25:string}",
            "    primary_encap: ${26:int}",
            "    private_key: ${27:string}",
            "    promiscuous: ${28|reject,accept|}",
            "    resolution_immediacy: ${29:string}",
            "    state: ${30|present,absent,query|}",
            "    switching_mode: ${31|native,AVE|}",
            "    tenant: ${32:string}",
            "    timeout: ${33:30}",
            "    untagged_vlan: ${34|false,true|}",
            "    use_proxy: ${35|true,false|}",
            "    use_ssl: ${36|true,false|}",
            "    username: ${37:admin}",
            "    validate_certs: ${38|true,false|}",
            "    vm_provider: ${39:string}",
            "    vmm_uplink_active:",
            "      - ${40:element}",
            "    vmm_uplink_standby:",
            "      - ${41:element}",
            "$0"
        ],
        "description": "Bind EPGs to Domains (fv:RsDomAtt)",
        "scope": "ansible"
    },
    "Manage Endpoint Security Groups (ESGs) objects (fv:ESg)": {
        "prefix": [
            "cisco.aci.aci_esg",
            "Manage Endpoint Security Groups (ESGs) objects (fv:ESg)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_esg:",
            "    admin_state: ${2|false,true|}",
            "    annotation: ${3:orchestrator:ansible}",
            "    ap: ${4:string}",
            "    certificate_name: ${5:string}",
            "    description: ${6:string}",
            "    esg: ${7:string}",
            "    host: ${8:string}",
            "    intra_esg_isolation: ${9:string}",
            "    name_alias: ${10:string}",
            "    output_level: ${11|normal,debug,info|}",
            "    output_path: ${12:string}",
            "    password: ${13:string}",
            "    port: ${14:int}",
            "    preferred_group_member: ${15:string}",
            "    private_key: ${16:string}",
            "    state: ${17|present,absent,query|}",
            "    tenant: ${18:string}",
            "    timeout: ${19:30}",
            "    use_proxy: ${20|true,false|}",
            "    use_ssl: ${21|true,false|}",
            "    username: ${22:admin}",
            "    validate_certs: ${23|true,false|}",
            "    vrf: ${24:string}",
            "$0"
        ],
        "description": "Manage Endpoint Security Groups (ESGs) objects (fv:ESg)",
        "scope": "ansible"
    },
    "Manage ESG contract master relationships (fv:RsSecInherited)": {
        "prefix": [
            "cisco.aci.aci_esg_contract_master",
            "Manage ESG contract master relationships (fv:RsSecInherited)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_esg_contract_master:",
            "    annotation: ${2:orchestrator:ansible}",
            "    ap: ${3:string}",
            "    certificate_name: ${4:string}",
            "    contract_master_ap: ${5:string}",
            "    contract_master_esg: ${6:string}",
            "    esg: ${7:string}",
            "    host: ${8:string}",
            "    name_alias: ${9:string}",
            "    output_level: ${10|normal,debug,info|}",
            "    output_path: ${11:string}",
            "    password: ${12:string}",
            "    port: ${13:int}",
            "    private_key: ${14:string}",
            "    state: ${15|present,absent,query|}",
            "    tenant: ${16:string}",
            "    timeout: ${17:30}",
            "    use_proxy: ${18|true,false|}",
            "    use_ssl: ${19|true,false|}",
            "    username: ${20:admin}",
            "    validate_certs: ${21|true,false|}",
            "$0"
        ],
        "description": "Manage ESG contract master relationships (fv:RsSecInherited)",
        "scope": "ansible"
    },
    "Manage ESG - EPG Selectors (fv:fvEPgSelector)": {
        "prefix": [
            "cisco.aci.aci_esg_epg_selector",
            "Manage ESG - EPG Selectors (fv:fvEPgSelector)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_esg_epg_selector:",
            "    annotation: ${2:orchestrator:ansible}",
            "    ap: ${3:string}",
            "    certificate_name: ${4:string}",
            "    description: ${5:string}",
            "    epg: ${6:string}",
            "    epg_ap: ${7:string}",
            "    esg: ${8:string}",
            "    host: ${9:string}",
            "    name_alias: ${10:string}",
            "    output_level: ${11|normal,debug,info|}",
            "    output_path: ${12:string}",
            "    password: ${13:string}",
            "    port: ${14:int}",
            "    private_key: ${15:string}",
            "    state: ${16|present,absent,query|}",
            "    tenant: ${17:string}",
            "    timeout: ${18:30}",
            "    use_proxy: ${19|true,false|}",
            "    use_ssl: ${20|true,false|}",
            "    username: ${21:admin}",
            "    validate_certs: ${22|true,false|}",
            "$0"
        ],
        "description": "Manage ESG - EPG Selectors (fv:fvEPgSelector)",
        "scope": "ansible"
    },
    "Manage ESG IP Subnet selector(fv:EPSelector)": {
        "prefix": [
            "cisco.aci.aci_esg_ip_subnet_selector",
            "Manage ESG IP Subnet selector(fv:EPSelector)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_esg_ip_subnet_selector:",
            "    annotation: ${2:orchestrator:ansible}",
            "    ap: ${3:string}",
            "    certificate_name: ${4:string}",
            "    description: ${5:string}",
            "    esg: ${6:string}",
            "    host: ${7:string}",
            "    ip: ${8:string}",
            "    name_alias: ${9:string}",
            "    output_level: ${10|normal,debug,info|}",
            "    output_path: ${11:string}",
            "    password: ${12:string}",
            "    port: ${13:int}",
            "    private_key: ${14:string}",
            "    state: ${15|present,absent,query|}",
            "    tenant: ${16:string}",
            "    timeout: ${17:30}",
            "    use_proxy: ${18|true,false|}",
            "    use_ssl: ${19|true,false|}",
            "    username: ${20:admin}",
            "    validate_certs: ${21|true,false|}",
            "$0"
        ],
        "description": "Manage ESG IP Subnet selector(fv:EPSelector)",
        "scope": "ansible"
    },
    "Manage ESG Tag Selectors (fv:TagSelector)": {
        "prefix": [
            "cisco.aci.aci_esg_tag_selector",
            "Manage ESG Tag Selectors (fv:TagSelector)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_esg_tag_selector:",
            "    annotation: ${2:orchestrator:ansible}",
            "    ap: ${3:string}",
            "    certificate_name: ${4:string}",
            "    description: ${5:string}",
            "    esg: ${6:string}",
            "    host: ${7:string}",
            "    match_value: ${8:string}",
            "    name: ${9:string}",
            "    name_alias: ${10:string}",
            "    operator: ${11:string}",
            "    output_level: ${12|normal,debug,info|}",
            "    output_path: ${13:string}",
            "    password: ${14:string}",
            "    port: ${15:int}",
            "    private_key: ${16:string}",
            "    state: ${17|present,absent,query|}",
            "    tenant: ${18:string}",
            "    timeout: ${19:30}",
            "    use_proxy: ${20|true,false|}",
            "    use_ssl: ${21|true,false|}",
            "    username: ${22:admin}",
            "    validate_certs: ${23|true,false|}",
            "$0"
        ],
        "description": "Manage ESG Tag Selectors (fv:TagSelector)",
        "scope": "ansible"
    },
    "Manage fabric leaf profiles (fabric:LeafP).": {
        "prefix": [
            "cisco.aci.aci_fabric_leaf_profile",
            "Manage fabric leaf profiles (fabric:LeafP)."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_fabric_leaf_profile:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    description: ${4:string}",
            "    host: ${5:string}",
            "    name: ${6:string}",
            "    output_level: ${7|normal,debug,info|}",
            "    output_path: ${8:string}",
            "    owner_key: ${9:string}",
            "    owner_tag: ${10:string}",
            "    password: ${11:string}",
            "    port: ${12:int}",
            "    private_key: ${13:string}",
            "    state: ${14|present,absent,query|}",
            "    timeout: ${15:30}",
            "    use_proxy: ${16|true,false|}",
            "    use_ssl: ${17|true,false|}",
            "    username: ${18:admin}",
            "    validate_certs: ${19|true,false|}",
            "$0"
        ],
        "description": "Manage fabric leaf profiles (fabric:LeafP).",
        "scope": "ansible"
    },
    "Manage leaf switch bindings to profiles and policy groups (fabric:LeafS and fabric:RsLeNodePGrp).": {
        "prefix": [
            "cisco.aci.aci_fabric_leaf_switch_assoc",
            "Manage leaf switch bindings to profiles and policy groups (fabric:LeafS and fabric:RsLeNodePGrp)."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_fabric_leaf_switch_assoc:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    description: ${4:string}",
            "    host: ${5:string}",
            "    name: ${6:string}",
            "    output_level: ${7|normal,debug,info|}",
            "    output_path: ${8:string}",
            "    owner_key: ${9:string}",
            "    owner_tag: ${10:string}",
            "    password: ${11:string}",
            "    policy_group: ${12:string}",
            "    port: ${13:int}",
            "    private_key: ${14:string}",
            "    profile: ${15:string}",
            "    state: ${16|present,absent,query|}",
            "    timeout: ${17:30}",
            "    use_proxy: ${18|true,false|}",
            "    use_ssl: ${19|true,false|}",
            "    username: ${20:admin}",
            "    validate_certs: ${21|true,false|}",
            "$0"
        ],
        "description": "Manage leaf switch bindings to profiles and policy groups (fabric:LeafS and fabric:RsLeNodePGrp).",
        "scope": "ansible"
    },
    "Manage Fabric Node Members (fabric:NodeIdentP)": {
        "prefix": [
            "cisco.aci.aci_fabric_node",
            "Manage Fabric Node Members (fabric:NodeIdentP)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_fabric_node:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    description: ${4:string}",
            "    host: ${5:string}",
            "    name_alias: ${6:string}",
            "    node_id: ${7:int}",
            "    output_level: ${8|normal,debug,info|}",
            "    output_path: ${9:string}",
            "    password: ${10:string}",
            "    pod_id: ${11:int}",
            "    port: ${12:int}",
            "    private_key: ${13:string}",
            "    role: ${14:string}",
            "    serial: ${15:string}",
            "    state: ${16|present,absent,query|}",
            "    switch: ${17:string}",
            "    timeout: ${18:30}",
            "    use_proxy: ${19|true,false|}",
            "    use_ssl: ${20|true,false|}",
            "    username: ${21:admin}",
            "    validate_certs: ${22|true,false|}",
            "$0"
        ],
        "description": "Manage Fabric Node Members (fabric:NodeIdentP)",
        "scope": "ansible"
    },
    "Manage Fabric Pod Policy Groups (fabric:PodPGrp)": {
        "prefix": [
            "cisco.aci.aci_fabric_pod_policy_group",
            "Manage Fabric Pod Policy Groups (fabric:PodPGrp)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_fabric_pod_policy_group:",
            "    annotation: ${2:orchestrator:ansible}",
            "    bgp_rr_policy: ${3:string}",
            "    certificate_name: ${4:string}",
            "    coop_group_policy: ${5:string}",
            "    date_time_policy: ${6:string}",
            "    host: ${7:string}",
            "    isis_policy: ${8:string}",
            "    macsec_policy: ${9:string}",
            "    management_access_policy: ${10:string}",
            "    name: ${11:string}",
            "    name_alias: ${12:string}",
            "    output_level: ${13|normal,debug,info|}",
            "    output_path: ${14:string}",
            "    owner_key: ${15:string}",
            "    owner_tag: ${16:string}",
            "    password: ${17:string}",
            "    port: ${18:int}",
            "    private_key: ${19:string}",
            "    snmp_policy: ${20:string}",
            "    state: ${21|present,absent,query|}",
            "    timeout: ${22:30}",
            "    use_proxy: ${23|true,false|}",
            "    use_ssl: ${24|true,false|}",
            "    username: ${25:admin}",
            "    validate_certs: ${26|true,false|}",
            "$0"
        ],
        "description": "Manage Fabric Pod Policy Groups (fabric:PodPGrp)",
        "scope": "ansible"
    },
    "This modules creates ACI schedulers.": {
        "prefix": [
            "cisco.aci.aci_fabric_scheduler",
            "This modules creates ACI schedulers."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_fabric_scheduler:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    concurCap: ${4:int}",
            "    date: ${5:string}",
            "    day: ${6|every-day,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday,Sunday,even-day,odd-day|}",
            "    description: ${7:string}",
            "    host: ${8:string}",
            "    hour: ${9:int}",
            "    maxTime: ${10:string}",
            "    minute: ${11:int}",
            "    name: ${12:string}",
            "    name_alias: ${13:string}",
            "    output_level: ${14|normal,debug,info|}",
            "    output_path: ${15:string}",
            "    owner_key: ${16:string}",
            "    owner_tag: ${17:string}",
            "    password: ${18:string}",
            "    port: ${19:int}",
            "    private_key: ${20:string}",
            "    recurring: ${21|false,true|}",
            "    state: ${22|present,absent,query|}",
            "    timeout: ${23:30}",
            "    use_proxy: ${24|true,false|}",
            "    use_ssl: ${25|true,false|}",
            "    username: ${26:admin}",
            "    validate_certs: ${27|true,false|}",
            "    windowname: ${28:string}",
            "$0"
        ],
        "description": "This modules creates ACI schedulers.",
        "scope": "ansible"
    },
    "Manage fabric spine profiles (fabric:SpineP).": {
        "prefix": [
            "cisco.aci.aci_fabric_spine_profile",
            "Manage fabric spine profiles (fabric:SpineP)."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_fabric_spine_profile:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    description: ${4:string}",
            "    host: ${5:string}",
            "    name: ${6:string}",
            "    output_level: ${7|normal,debug,info|}",
            "    output_path: ${8:string}",
            "    owner_key: ${9:string}",
            "    owner_tag: ${10:string}",
            "    password: ${11:string}",
            "    port: ${12:int}",
            "    private_key: ${13:string}",
            "    state: ${14|present,absent,query|}",
            "    timeout: ${15:30}",
            "    use_proxy: ${16|true,false|}",
            "    use_ssl: ${17|true,false|}",
            "    username: ${18:admin}",
            "    validate_certs: ${19|true,false|}",
            "$0"
        ],
        "description": "Manage fabric spine profiles (fabric:SpineP).",
        "scope": "ansible"
    },
    "Manage spine switch bindings to profiles and policy groups (fabric:SpineS and fabric:RsSpNodePGrp).": {
        "prefix": [
            "cisco.aci.aci_fabric_spine_switch_assoc",
            "Manage spine switch bindings to profiles and policy groups (fabric:SpineS and fabric:RsSpNodePGrp)."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_fabric_spine_switch_assoc:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    description: ${4:string}",
            "    host: ${5:string}",
            "    name: ${6:string}",
            "    output_level: ${7|normal,debug,info|}",
            "    output_path: ${8:string}",
            "    owner_key: ${9:string}",
            "    owner_tag: ${10:string}",
            "    password: ${11:string}",
            "    policy_group: ${12:string}",
            "    port: ${13:int}",
            "    private_key: ${14:string}",
            "    profile: ${15:string}",
            "    state: ${16|present,absent,query|}",
            "    timeout: ${17:30}",
            "    use_proxy: ${18|true,false|}",
            "    use_ssl: ${19|true,false|}",
            "    username: ${20:admin}",
            "    validate_certs: ${21|true,false|}",
            "$0"
        ],
        "description": "Manage spine switch bindings to profiles and policy groups (fabric:SpineS and fabric:RsSpNodePGrp).",
        "scope": "ansible"
    },
    "Manage switch blocks (fabric:NodeBlk).": {
        "prefix": [
            "cisco.aci.aci_fabric_switch_block",
            "Manage switch blocks (fabric:NodeBlk)."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_fabric_switch_block:",
            "    annotation: ${2:orchestrator:ansible}",
            "    association: ${3:string}",
            "    certificate_name: ${4:string}",
            "    description: ${5:string}",
            "    from_node: ${6:int}",
            "    host: ${7:string}",
            "    name: ${8:string}",
            "    output_level: ${9|normal,debug,info|}",
            "    output_path: ${10:string}",
            "    password: ${11:string}",
            "    port: ${12:int}",
            "    private_key: ${13:string}",
            "    profile: ${14:string}",
            "    state: ${15|present,absent,query|}",
            "    switch_type: ${16:string}",
            "    timeout: ${17:30}",
            "    to_node: ${18:int}",
            "    use_proxy: ${19|true,false|}",
            "    use_ssl: ${20|true,false|}",
            "    username: ${21:admin}",
            "    validate_certs: ${22|true,false|}",
            "$0"
        ],
        "description": "Manage switch blocks (fabric:NodeBlk).",
        "scope": "ansible"
    },
    "Manage Fabric Switch Policy Group objects.": {
        "prefix": [
            "cisco.aci.aci_fabric_switch_policy_group",
            "Manage Fabric Switch Policy Group objects."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_fabric_switch_policy_group:",
            "    analytics_cluster: ${2:string}",
            "    analytics_name: ${3:string}",
            "    annotation: ${4:orchestrator:ansible}",
            "    certificate_name: ${5:string}",
            "    core_export_policy: ${6:string}",
            "    description: ${7:string}",
            "    host: ${8:string}",
            "    inventory_policy: ${9:string}",
            "    monitoring_policy: ${10:string}",
            "    name: ${11:string}",
            "    node_control_policy: ${12:string}",
            "    output_level: ${13|normal,debug,info|}",
            "    output_path: ${14:string}",
            "    password: ${15:string}",
            "    port: ${16:int}",
            "    power_redundancy_policy: ${17:string}",
            "    private_key: ${18:string}",
            "    state: ${19|present,absent,query|}",
            "    switch_type: ${20:string}",
            "    tech_support_export_policy: ${21:string}",
            "    timeout: ${22:30}",
            "    twamp_responder_policy: ${23:string}",
            "    twamp_server_policy: ${24:string}",
            "    use_proxy: ${25|true,false|}",
            "    use_ssl: ${26|true,false|}",
            "    username: ${27:admin}",
            "    validate_certs: ${28|true,false|}",
            "$0"
        ],
        "description": "Manage Fabric Switch Policy Group objects.",
        "scope": "ansible"
    },
    "Manages top level filter objects (vz:Filter)": {
        "prefix": [
            "cisco.aci.aci_filter",
            "Manages top level filter objects (vz:Filter)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_filter:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    description: ${4:string}",
            "    filter: ${5:string}",
            "    host: ${6:string}",
            "    name_alias: ${7:string}",
            "    output_level: ${8|normal,debug,info|}",
            "    output_path: ${9:string}",
            "    owner_key: ${10:string}",
            "    owner_tag: ${11:string}",
            "    password: ${12:string}",
            "    port: ${13:int}",
            "    private_key: ${14:string}",
            "    state: ${15|present,absent,query|}",
            "    tenant: ${16:string}",
            "    timeout: ${17:30}",
            "    use_proxy: ${18|true,false|}",
            "    use_ssl: ${19|true,false|}",
            "    username: ${20:admin}",
            "    validate_certs: ${21|true,false|}",
            "$0"
        ],
        "description": "Manages top level filter objects (vz:Filter)",
        "scope": "ansible"
    },
    "Manage filter entries (vz:Entry)": {
        "prefix": [
            "cisco.aci.aci_filter_entry",
            "Manage filter entries (vz:Entry)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_filter_entry:",
            "    annotation: ${2:orchestrator:ansible}",
            "    arp_flag: ${3:string}",
            "    certificate_name: ${4:string}",
            "    description: ${5:string}",
            "    dst_port: ${6:string}",
            "    dst_port_end: ${7:string}",
            "    dst_port_start: ${8:string}",
            "    entry: ${9:string}",
            "    ether_type: ${10:string}",
            "    filter: ${11:string}",
            "    host: ${12:string}",
            "    icmp6_msg_type: ${13:string}",
            "    icmp_msg_type: ${14:string}",
            "    ip_protocol: ${15:string}",
            "    name_alias: ${16:string}",
            "    output_level: ${17|normal,debug,info|}",
            "    output_path: ${18:string}",
            "    password: ${19:string}",
            "    port: ${20:int}",
            "    private_key: ${21:string}",
            "    state: ${22|present,absent,query|}",
            "    stateful: ${23|false,true|}",
            "    tenant: ${24:string}",
            "    timeout: ${25:30}",
            "    use_proxy: ${26|true,false|}",
            "    use_ssl: ${27|true,false|}",
            "    username: ${28:admin}",
            "    validate_certs: ${29|true,false|}",
            "$0"
        ],
        "description": "Manage filter entries (vz:Entry)",
        "scope": "ansible"
    },
    "This module creates a firmware group": {
        "prefix": [
            "cisco.aci.aci_firmware_group",
            "This module creates a firmware group"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_firmware_group:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    firmwarepol: ${4:string}",
            "    group: ${5:string}",
            "    host: ${6:string}",
            "    name_alias: ${7:string}",
            "    output_level: ${8|normal,debug,info|}",
            "    output_path: ${9:string}",
            "    owner_key: ${10:string}",
            "    owner_tag: ${11:string}",
            "    password: ${12:string}",
            "    port: ${13:int}",
            "    private_key: ${14:string}",
            "    state: ${15|present,absent,query|}",
            "    timeout: ${16:30}",
            "    use_proxy: ${17|true,false|}",
            "    use_ssl: ${18|true,false|}",
            "    username: ${19:admin}",
            "    validate_certs: ${20|true,false|}",
            "$0"
        ],
        "description": "This module creates a firmware group",
        "scope": "ansible"
    },
    "This modules adds and remove nodes from the firmware group": {
        "prefix": [
            "cisco.aci.aci_firmware_group_node",
            "This modules adds and remove nodes from the firmware group"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_firmware_group_node:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    group: ${4:string}",
            "    host: ${5:string}",
            "    name_alias: ${6:string}",
            "    node: ${7:string}",
            "    output_level: ${8|normal,debug,info|}",
            "    output_path: ${9:string}",
            "    password: ${10:string}",
            "    port: ${11:int}",
            "    private_key: ${12:string}",
            "    state: ${13|present,absent,query|}",
            "    timeout: ${14:30}",
            "    use_proxy: ${15|true,false|}",
            "    use_ssl: ${16|true,false|}",
            "    username: ${17:admin}",
            "    validate_certs: ${18|true,false|}",
            "$0"
        ],
        "description": "This modules adds and remove nodes from the firmware group",
        "scope": "ansible"
    },
    "This creates a firmware policy": {
        "prefix": [
            "cisco.aci.aci_firmware_policy",
            "This creates a firmware policy"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_firmware_policy:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    host: ${4:string}",
            "    ignoreCompat: ${5|false,true|}",
            "    name: ${6:string}",
            "    name_alias: ${7:string}",
            "    output_level: ${8|normal,debug,info|}",
            "    output_path: ${9:string}",
            "    owner_key: ${10:string}",
            "    owner_tag: ${11:string}",
            "    password: ${12:string}",
            "    port: ${13:int}",
            "    private_key: ${14:string}",
            "    state: ${15|present,absent,query|}",
            "    timeout: ${16:30}",
            "    use_proxy: ${17|true,false|}",
            "    use_ssl: ${18|true,false|}",
            "    username: ${19:admin}",
            "    validate_certs: ${20|true,false|}",
            "    version: ${21:string}",
            "$0"
        ],
        "description": "This creates a firmware policy",
        "scope": "ansible"
    },
    "Manage firmware image sources (firmware:OSource)": {
        "prefix": [
            "cisco.aci.aci_firmware_source",
            "Manage firmware image sources (firmware:OSource)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_firmware_source:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    host: ${4:string}",
            "    name_alias: ${5:string}",
            "    output_level: ${6|normal,debug,info|}",
            "    output_path: ${7:string}",
            "    password: ${8:string}",
            "    polling_interval: ${9:int}",
            "    port: ${10:int}",
            "    private_key: ${11:string}",
            "    source: ${12:string}",
            "    state: ${13|present,absent,query|}",
            "    timeout: ${14:30}",
            "    url: ${15:string}",
            "    url_password: ${16:string}",
            "    url_protocol: ${17|scp,http,local,usbkey|}",
            "    url_username: ${18:string}",
            "    use_proxy: ${19|true,false|}",
            "    use_ssl: ${20|true,false|}",
            "    username: ${21:admin}",
            "    validate_certs: ${22|true,false|}",
            "$0"
        ],
        "description": "Manage firmware image sources (firmware:OSource)",
        "scope": "ansible"
    },
    "Enabling or Disabling physical interfaces.": {
        "prefix": [
            "cisco.aci.aci_interface_blacklist",
            "Enabling or Disabling physical interfaces."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_interface_blacklist:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    fex_id: ${4:int}",
            "    host: ${5:string}",
            "    interface: ${6:string}",
            "    node_id: ${7:int}",
            "    output_level: ${8|normal,debug,info|}",
            "    output_path: ${9:string}",
            "    password: ${10:string}",
            "    pod_id: ${11:int}",
            "    port: ${12:int}",
            "    private_key: ${13:string}",
            "    state: ${14|present,absent,query|}",
            "    timeout: ${15:30}",
            "    use_proxy: ${16|true,false|}",
            "    use_ssl: ${17|true,false|}",
            "    username: ${18:admin}",
            "    validate_certs: ${19|true,false|}",
            "$0"
        ],
        "description": "Enabling or Disabling physical interfaces.",
        "scope": "ansible"
    },
    "Setting and removing description on physical interfaces.": {
        "prefix": [
            "cisco.aci.aci_interface_description",
            "Setting and removing description on physical interfaces."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_interface_description:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    description: ${4:string}",
            "    fex_id: ${5:int}",
            "    host: ${6:string}",
            "    interface: ${7:string}",
            "    node_id: ${8:int}",
            "    node_type: ${9:string}",
            "    output_level: ${10|normal,debug,info|}",
            "    output_path: ${11:string}",
            "    owner_key: ${12:string}",
            "    owner_tag: ${13:string}",
            "    password: ${14:string}",
            "    pod_id: ${15:int}",
            "    port: ${16:int}",
            "    private_key: ${17:string}",
            "    state: ${18|present,absent,query|}",
            "    timeout: ${19:30}",
            "    use_proxy: ${20|true,false|}",
            "    use_ssl: ${21|true,false|}",
            "    username: ${22:admin}",
            "    validate_certs: ${23|true,false|}",
            "$0"
        ],
        "description": "Setting and removing description on physical interfaces.",
        "scope": "ansible"
    },
    "Manage CDP interface policies (cdp:IfPol)": {
        "prefix": [
            "cisco.aci.aci_interface_policy_cdp",
            "Manage CDP interface policies (cdp:IfPol)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_interface_policy_cdp:",
            "    admin_state: ${2|false,true|}",
            "    annotation: ${3:orchestrator:ansible}",
            "    cdp_policy: ${4:string}",
            "    certificate_name: ${5:string}",
            "    description: ${6:string}",
            "    host: ${7:string}",
            "    name_alias: ${8:string}",
            "    output_level: ${9|normal,debug,info|}",
            "    output_path: ${10:string}",
            "    owner_key: ${11:string}",
            "    owner_tag: ${12:string}",
            "    password: ${13:string}",
            "    port: ${14:int}",
            "    private_key: ${15:string}",
            "    state: ${16|present,absent,query|}",
            "    timeout: ${17:30}",
            "    use_proxy: ${18|true,false|}",
            "    use_ssl: ${19|true,false|}",
            "    username: ${20:admin}",
            "    validate_certs: ${21|true,false|}",
            "$0"
        ],
        "description": "Manage CDP interface policies (cdp:IfPol)",
        "scope": "ansible"
    },
    "Manage Fibre Channel interface policies (fc:IfPol)": {
        "prefix": [
            "cisco.aci.aci_interface_policy_fc",
            "Manage Fibre Channel interface policies (fc:IfPol)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_interface_policy_fc:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    description: ${4:string}",
            "    fc_policy: ${5:string}",
            "    host: ${6:string}",
            "    name_alias: ${7:string}",
            "    output_level: ${8|normal,debug,info|}",
            "    output_path: ${9:string}",
            "    owner_key: ${10:string}",
            "    owner_tag: ${11:string}",
            "    password: ${12:string}",
            "    port: ${13:int}",
            "    port_mode: ${14:string}",
            "    private_key: ${15:string}",
            "    state: ${16|present,absent,query|}",
            "    timeout: ${17:30}",
            "    use_proxy: ${18|true,false|}",
            "    use_ssl: ${19|true,false|}",
            "    username: ${20:admin}",
            "    validate_certs: ${21|true,false|}",
            "$0"
        ],
        "description": "Manage Fibre Channel interface policies (fc:IfPol)",
        "scope": "ansible"
    },
    "Manage Layer 2 interface policies (l2:IfPol)": {
        "prefix": [
            "cisco.aci.aci_interface_policy_l2",
            "Manage Layer 2 interface policies (l2:IfPol)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_interface_policy_l2:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    description: ${4:string}",
            "    host: ${5:string}",
            "    l2_policy: ${6:string}",
            "    name_alias: ${7:string}",
            "    output_level: ${8|normal,debug,info|}",
            "    output_path: ${9:string}",
            "    owner_key: ${10:string}",
            "    owner_tag: ${11:string}",
            "    password: ${12:string}",
            "    port: ${13:int}",
            "    private_key: ${14:string}",
            "    qinq: ${15:string}",
            "    state: ${16|present,absent,query|}",
            "    timeout: ${17:30}",
            "    use_proxy: ${18|true,false|}",
            "    use_ssl: ${19|true,false|}",
            "    username: ${20:admin}",
            "    validate_certs: ${21|true,false|}",
            "    vepa: ${22|false,true|}",
            "    vlan_scope: ${23:string}",
            "$0"
        ],
        "description": "Manage Layer 2 interface policies (l2:IfPol)",
        "scope": "ansible"
    },
    "Manage fabric interface policy leaf breakout port group (infra:BrkoutPortGrp)": {
        "prefix": [
            "cisco.aci.aci_interface_policy_leaf_breakout_port_group",
            "Manage fabric interface policy leaf breakout port group (infra:BrkoutPortGrp)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_interface_policy_leaf_breakout_port_group:",
            "    annotation: ${2:orchestrator:ansible}",
            "    breakout_map: ${3:string}",
            "    breakout_port_group: ${4:string}",
            "    certificate_name: ${5:string}",
            "    description: ${6:string}",
            "    host: ${7:string}",
            "    output_level: ${8|normal,debug,info|}",
            "    output_path: ${9:string}",
            "    owner_key: ${10:string}",
            "    owner_tag: ${11:string}",
            "    password: ${12:string}",
            "    port: ${13:int}",
            "    private_key: ${14:string}",
            "    state: ${15|present,absent,query|}",
            "    timeout: ${16:30}",
            "    use_proxy: ${17|true,false|}",
            "    use_ssl: ${18|true,false|}",
            "    username: ${19:admin}",
            "    validate_certs: ${20|true,false|}",
            "$0"
        ],
        "description": "Manage fabric interface policy leaf breakout port group (infra:BrkoutPortGrp)",
        "scope": "ansible"
    },
    "Manage fabric interface policy leaf policy groups (infra:AccBndlGrp, infra:AccPortGrp)": {
        "prefix": [
            "cisco.aci.aci_interface_policy_leaf_policy_group",
            "Manage fabric interface policy leaf policy groups (infra:AccBndlGrp, infra:AccPortGrp)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_interface_policy_leaf_policy_group:",
            "    aep: ${2:string}",
            "    annotation: ${3:orchestrator:ansible}",
            "    cdp_policy: ${4:string}",
            "    certificate_name: ${5:string}",
            "    description: ${6:string}",
            "    egress_data_plane_policing_policy: ${7:string}",
            "    fibre_channel_interface_policy: ${8:string}",
            "    host: ${9:string}",
            "    ingress_data_plane_policing_policy: ${10:string}",
            "    l2_interface_policy: ${11:string}",
            "    lag_type: ${12:string}",
            "    link_level_policy: ${13:string}",
            "    lldp_policy: ${14:string}",
            "    mcp_policy: ${15:string}",
            "    monitoring_policy: ${16:string}",
            "    name_alias: ${17:string}",
            "    output_level: ${18|normal,debug,info|}",
            "    output_path: ${19:string}",
            "    owner_key: ${20:string}",
            "    owner_tag: ${21:string}",
            "    password: ${22:string}",
            "    policy_group: ${23:string}",
            "    port: ${24:int}",
            "    port_channel_policy: ${25:string}",
            "    port_security_policy: ${26:string}",
            "    priority_flow_control_policy: ${27:string}",
            "    private_key: ${28:string}",
            "    slow_drain_policy: ${29:string}",
            "    state: ${30|present,absent,query|}",
            "    storm_control_interface_policy: ${31:string}",
            "    stp_interface_policy: ${32:string}",
            "    timeout: ${33:30}",
            "    use_proxy: ${34|true,false|}",
            "    use_ssl: ${35|true,false|}",
            "    username: ${36:admin}",
            "    validate_certs: ${37|true,false|}",
            "$0"
        ],
        "description": "Manage fabric interface policy leaf policy groups (infra:AccBndlGrp, infra:AccPortGrp)",
        "scope": "ansible"
    },
    "Manage fabric interface policy leaf profiles (infra:AccPortP)": {
        "prefix": [
            "cisco.aci.aci_interface_policy_leaf_profile",
            "Manage fabric interface policy leaf profiles (infra:AccPortP)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_interface_policy_leaf_profile:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    description: ${4:string}",
            "    host: ${5:string}",
            "    interface_profile: ${6:string}",
            "    name_alias: ${7:string}",
            "    output_level: ${8|normal,debug,info|}",
            "    output_path: ${9:string}",
            "    owner_key: ${10:string}",
            "    owner_tag: ${11:string}",
            "    password: ${12:string}",
            "    port: ${13:int}",
            "    private_key: ${14:string}",
            "    state: ${15|present,absent,query|}",
            "    timeout: ${16:30}",
            "    type: ${17|leaf,fex|}",
            "    use_proxy: ${18|true,false|}",
            "    use_ssl: ${19|true,false|}",
            "    username: ${20:admin}",
            "    validate_certs: ${21|true,false|}",
            "$0"
        ],
        "description": "Manage fabric interface policy leaf profiles (infra:AccPortP)",
        "scope": "ansible"
    },
    "Manage leaf interface profiles fex policy group (infra:FexBndlGrp)": {
        "prefix": [
            "cisco.aci.aci_interface_policy_leaf_profile_fex_policy_group",
            "Manage leaf interface profiles fex policy group (infra:FexBndlGrp)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_interface_policy_leaf_profile_fex_policy_group:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    fex_profile: ${4:string}",
            "    host: ${5:string}",
            "    name: ${6:string}",
            "    output_level: ${7|normal,debug,info|}",
            "    output_path: ${8:string}",
            "    owner_key: ${9:string}",
            "    owner_tag: ${10:string}",
            "    password: ${11:string}",
            "    port: ${12:int}",
            "    private_key: ${13:string}",
            "    state: ${14|present,absent,query|}",
            "    timeout: ${15:30}",
            "    use_proxy: ${16|true,false|}",
            "    use_ssl: ${17|true,false|}",
            "    username: ${18:admin}",
            "    validate_certs: ${19|true,false|}",
            "$0"
        ],
        "description": "Manage leaf interface profiles fex policy group (infra:FexBndlGrp)",
        "scope": "ansible"
    },
    "Manage Link Level interface policies (fabric:HIfPol)": {
        "prefix": [
            "cisco.aci.aci_interface_policy_link_level",
            "Manage Link Level interface policies (fabric:HIfPol)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_interface_policy_link_level:",
            "    annotation: ${2:orchestrator:ansible}",
            "    auto_negotiation: ${3|true,false|}",
            "    certificate_name: ${4:string}",
            "    description: ${5:string}",
            "    forwarding_error_correction: ${6|inherit,kp-fec,cl91-rs-fec,cl74-fc-fec,disable-fec,ieee-rs-fec,cons16-rs-fec|}",
            "    host: ${7:string}",
            "    link_debounce_interval: ${8:100}",
            "    link_level_policy: ${9:string}",
            "    output_level: ${10|normal,debug,info|}",
            "    output_path: ${11:string}",
            "    owner_key: ${12:string}",
            "    owner_tag: ${13:string}",
            "    password: ${14:string}",
            "    port: ${15:int}",
            "    private_key: ${16:string}",
            "    speed: ${17|inherit,100M,1G,10G,25G,40G,50G,100G,200G,400G|}",
            "    state: ${18|present,absent,query|}",
            "    timeout: ${19:30}",
            "    use_proxy: ${20|true,false|}",
            "    use_ssl: ${21|true,false|}",
            "    username: ${22:admin}",
            "    validate_certs: ${23|true,false|}",
            "$0"
        ],
        "description": "Manage Link Level interface policies (fabric:HIfPol)",
        "scope": "ansible"
    },
    "Manage LLDP interface policies (lldp:IfPol)": {
        "prefix": [
            "cisco.aci.aci_interface_policy_lldp",
            "Manage LLDP interface policies (lldp:IfPol)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_interface_policy_lldp:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    description: ${4:string}",
            "    host: ${5:string}",
            "    lldp_policy: ${6:string}",
            "    name_alias: ${7:string}",
            "    output_level: ${8|normal,debug,info|}",
            "    output_path: ${9:string}",
            "    owner_key: ${10:string}",
            "    owner_tag: ${11:string}",
            "    password: ${12:string}",
            "    port: ${13:int}",
            "    private_key: ${14:string}",
            "    receive_state: ${15|false,true|}",
            "    state: ${16|present,absent,query|}",
            "    timeout: ${17:30}",
            "    transmit_state: ${18|false,true|}",
            "    use_proxy: ${19|true,false|}",
            "    use_ssl: ${20|true,false|}",
            "    username: ${21:admin}",
            "    validate_certs: ${22|true,false|}",
            "$0"
        ],
        "description": "Manage LLDP interface policies (lldp:IfPol)",
        "scope": "ansible"
    },
    "Manage MCP interface policies (mcp:IfPol)": {
        "prefix": [
            "cisco.aci.aci_interface_policy_mcp",
            "Manage MCP interface policies (mcp:IfPol)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_interface_policy_mcp:",
            "    admin_state: ${2|false,true|}",
            "    annotation: ${3:orchestrator:ansible}",
            "    certificate_name: ${4:string}",
            "    description: ${5:string}",
            "    host: ${6:string}",
            "    mcp: ${7:string}",
            "    name_alias: ${8:string}",
            "    output_level: ${9|normal,debug,info|}",
            "    output_path: ${10:string}",
            "    owner_key: ${11:string}",
            "    owner_tag: ${12:string}",
            "    password: ${13:string}",
            "    port: ${14:int}",
            "    private_key: ${15:string}",
            "    state: ${16|present,absent,query|}",
            "    timeout: ${17:30}",
            "    use_proxy: ${18|true,false|}",
            "    use_ssl: ${19|true,false|}",
            "    username: ${20:admin}",
            "    validate_certs: ${21|true,false|}",
            "$0"
        ],
        "description": "Manage MCP interface policies (mcp:IfPol)",
        "scope": "ansible"
    },
    "Manage OSPF interface policies (ospf:IfPol)": {
        "prefix": [
            "cisco.aci.aci_interface_policy_ospf",
            "Manage OSPF interface policies (ospf:IfPol)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_interface_policy_ospf:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    controls:",
            "      - ${4:element}",
            "    cost: ${5:int}",
            "    dead_interval: ${6:int}",
            "    description: ${7:string}",
            "    hello_interval: ${8:int}",
            "    host: ${9:string}",
            "    name_alias: ${10:string}",
            "    network_type: ${11:string}",
            "    ospf: ${12:string}",
            "    output_level: ${13|normal,debug,info|}",
            "    output_path: ${14:string}",
            "    owner_key: ${15:string}",
            "    owner_tag: ${16:string}",
            "    password: ${17:string}",
            "    port: ${18:int}",
            "    prefix_suppression: ${19|false,true|}",
            "    priority: ${20:int}",
            "    private_key: ${21:string}",
            "    retransmit_interval: ${22:int}",
            "    state: ${23|present,absent,query|}",
            "    tenant: ${24:string}",
            "    timeout: ${25:30}",
            "    transmit_delay: ${26:int}",
            "    use_proxy: ${27|true,false|}",
            "    use_ssl: ${28|true,false|}",
            "    username: ${29:admin}",
            "    validate_certs: ${30|true,false|}",
            "$0"
        ],
        "description": "Manage OSPF interface policies (ospf:IfPol)",
        "scope": "ansible"
    },
    "Manage port channel interface policies (lacp:LagPol)": {
        "prefix": [
            "cisco.aci.aci_interface_policy_port_channel",
            "Manage port channel interface policies (lacp:LagPol)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_interface_policy_port_channel:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    description: ${4:string}",
            "    fast_select: ${5|false,true|}",
            "    graceful_convergence: ${6|false,true|}",
            "    host: ${7:string}",
            "    load_defer: ${8|false,true|}",
            "    max_links: ${9:int}",
            "    min_links: ${10:int}",
            "    mode: ${11:string}",
            "    name_alias: ${12:string}",
            "    output_level: ${13|normal,debug,info|}",
            "    output_path: ${14:string}",
            "    owner_key: ${15:string}",
            "    owner_tag: ${16:string}",
            "    password: ${17:string}",
            "    port: ${18:int}",
            "    port_channel: ${19:string}",
            "    private_key: ${20:string}",
            "    state: ${21|present,absent,query|}",
            "    suspend_individual: ${22|false,true|}",
            "    symmetric_hash: ${23|false,true|}",
            "    timeout: ${24:30}",
            "    use_proxy: ${25|true,false|}",
            "    use_ssl: ${26|true,false|}",
            "    username: ${27:admin}",
            "    validate_certs: ${28|true,false|}",
            "$0"
        ],
        "description": "Manage port channel interface policies (lacp:LagPol)",
        "scope": "ansible"
    },
    "Manage port security (l2:PortSecurityPol)": {
        "prefix": [
            "cisco.aci.aci_interface_policy_port_security",
            "Manage port security (l2:PortSecurityPol)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_interface_policy_port_security:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    description: ${4:string}",
            "    host: ${5:string}",
            "    max_end_points: ${6:int}",
            "    name_alias: ${7:string}",
            "    output_level: ${8|normal,debug,info|}",
            "    output_path: ${9:string}",
            "    owner_key: ${10:string}",
            "    owner_tag: ${11:string}",
            "    password: ${12:string}",
            "    port: ${13:int}",
            "    port_security: ${14:string}",
            "    port_security_timeout: ${15:int}",
            "    private_key: ${16:string}",
            "    state: ${17|present,absent,query|}",
            "    timeout: ${18:30}",
            "    use_proxy: ${19|true,false|}",
            "    use_ssl: ${20|true,false|}",
            "    username: ${21:admin}",
            "    validate_certs: ${22|true,false|}",
            "$0"
        ],
        "description": "Manage port security (l2:PortSecurityPol)",
        "scope": "ansible"
    },
    "Bind interface selector profiles to switch policy leaf profiles (infra:RsAccPortP)": {
        "prefix": [
            "cisco.aci.aci_interface_selector_to_switch_policy_leaf_profile",
            "Bind interface selector profiles to switch policy leaf profiles (infra:RsAccPortP)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_interface_selector_to_switch_policy_leaf_profile:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    host: ${4:string}",
            "    interface_selector: ${5:string}",
            "    leaf_profile: ${6:string}",
            "    output_level: ${7|normal,debug,info|}",
            "    output_path: ${8:string}",
            "    password: ${9:string}",
            "    port: ${10:int}",
            "    private_key: ${11:string}",
            "    state: ${12|present,absent,query|}",
            "    timeout: ${13:30}",
            "    use_proxy: ${14|true,false|}",
            "    use_ssl: ${15|true,false|}",
            "    username: ${16:admin}",
            "    validate_certs: ${17|true,false|}",
            "$0"
        ],
        "description": "Bind interface selector profiles to switch policy leaf profiles (infra:RsAccPortP)",
        "scope": "ansible"
    },
    "Manage Layer2 Out (L2Out) objects.": {
        "prefix": [
            "cisco.aci.aci_l2out",
            "Manage Layer2 Out (L2Out) objects."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_l2out:",
            "    annotation: ${2:orchestrator:ansible}",
            "    bd: ${3:string}",
            "    certificate_name: ${4:string}",
            "    description: ${5:string}",
            "    domain: ${6:string}",
            "    host: ${7:string}",
            "    l2out: ${8:string}",
            "    name_alias: ${9:string}",
            "    output_level: ${10|normal,debug,info|}",
            "    output_path: ${11:string}",
            "    owner_key: ${12:string}",
            "    owner_tag: ${13:string}",
            "    password: ${14:string}",
            "    port: ${15:int}",
            "    private_key: ${16:string}",
            "    state: ${17|present,absent,query|}",
            "    tenant: ${18:string}",
            "    timeout: ${19:30}",
            "    use_proxy: ${20|true,false|}",
            "    use_ssl: ${21|true,false|}",
            "    username: ${22:admin}",
            "    validate_certs: ${23|true,false|}",
            "    vlan: ${24:int}",
            "$0"
        ],
        "description": "Manage Layer2 Out (L2Out) objects.",
        "scope": "ansible"
    },
    "Manage External Network Instance (L2Out External EPG) objects (l2extInstP).": {
        "prefix": [
            "cisco.aci.aci_l2out_extepg",
            "Manage External Network Instance (L2Out External EPG) objects (l2extInstP)."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_l2out_extepg:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    description: ${4:string}",
            "    extepg: ${5:string}",
            "    host: ${6:string}",
            "    l2out: ${7:string}",
            "    output_level: ${8|normal,debug,info|}",
            "    output_path: ${9:string}",
            "    password: ${10:string}",
            "    port: ${11:int}",
            "    preferred_group: ${12|false,true|}",
            "    private_key: ${13:string}",
            "    qos_class: ${14:string}",
            "    state: ${15|present,absent,query|}",
            "    tenant: ${16:string}",
            "    timeout: ${17:30}",
            "    use_proxy: ${18|true,false|}",
            "    use_ssl: ${19|true,false|}",
            "    username: ${20:admin}",
            "    validate_certs: ${21|true,false|}",
            "$0"
        ],
        "description": "Manage External Network Instance (L2Out External EPG) objects (l2extInstP).",
        "scope": "ansible"
    },
    "Bind Contracts to L2 External End Point Groups (EPGs)": {
        "prefix": [
            "cisco.aci.aci_l2out_extepg_to_contract",
            "Bind Contracts to L2 External End Point Groups (EPGs)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_l2out_extepg_to_contract:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    contract: ${4:string}",
            "    contract_type: ${5:string}",
            "    extepg: ${6:string}",
            "    host: ${7:string}",
            "    l2out: ${8:string}",
            "    output_level: ${9|normal,debug,info|}",
            "    output_path: ${10:string}",
            "    password: ${11:string}",
            "    port: ${12:int}",
            "    priority: ${13:string}",
            "    private_key: ${14:string}",
            "    provider_match: ${15:string}",
            "    state: ${16|present,absent,query|}",
            "    tenant: ${17:string}",
            "    timeout: ${18:30}",
            "    use_proxy: ${19|true,false|}",
            "    use_ssl: ${20|true,false|}",
            "    username: ${21:admin}",
            "    validate_certs: ${22|true,false|}",
            "$0"
        ],
        "description": "Bind Contracts to L2 External End Point Groups (EPGs)",
        "scope": "ansible"
    },
    "Manage Layer 2 Outside (L2Out) logical interface path (l2extRsPathL2OutAtt)": {
        "prefix": [
            "cisco.aci.aci_l2out_logical_interface_path",
            "Manage Layer 2 Outside (L2Out) logical interface path (l2extRsPathL2OutAtt)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_l2out_logical_interface_path:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    host: ${4:string}",
            "    interface: ${5:string}",
            "    interface_profile: ${6:string}",
            "    interface_type: ${7|switch_port,port_channel,vpc|}",
            "    l2out: ${8:string}",
            "    leaves:",
            "      - ${9:element}",
            "    node_profile: ${10:string}",
            "    output_level: ${11|normal,debug,info|}",
            "    output_path: ${12:string}",
            "    password: ${13:string}",
            "    pod_id: ${14:int}",
            "    port: ${15:int}",
            "    private_key: ${16:string}",
            "    state: ${17|present,absent,query|}",
            "    tenant: ${18:string}",
            "    timeout: ${19:30}",
            "    use_proxy: ${20|true,false|}",
            "    use_ssl: ${21|true,false|}",
            "    username: ${22:admin}",
            "    validate_certs: ${23|true,false|}",
            "$0"
        ],
        "description": "Manage Layer 2 Outside (L2Out) logical interface path (l2extRsPathL2OutAtt)",
        "scope": "ansible"
    },
    "Manage Layer 2 Outside (L2Out) interface profiles (l2ext:LIfP)": {
        "prefix": [
            "cisco.aci.aci_l2out_logical_interface_profile",
            "Manage Layer 2 Outside (L2Out) interface profiles (l2ext:LIfP)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_l2out_logical_interface_profile:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    host: ${4:string}",
            "    interface_profile: ${5:string}",
            "    l2out: ${6:string}",
            "    node_profile: ${7:default}",
            "    output_level: ${8|normal,debug,info|}",
            "    output_path: ${9:string}",
            "    owner_key: ${10:string}",
            "    owner_tag: ${11:string}",
            "    password: ${12:string}",
            "    port: ${13:int}",
            "    private_key: ${14:string}",
            "    state: ${15|present,absent,query|}",
            "    tenant: ${16:string}",
            "    timeout: ${17:30}",
            "    use_proxy: ${18|true,false|}",
            "    use_ssl: ${19|true,false|}",
            "    username: ${20:admin}",
            "    validate_certs: ${21|true,false|}",
            "$0"
        ],
        "description": "Manage Layer 2 Outside (L2Out) interface profiles (l2ext:LIfP)",
        "scope": "ansible"
    },
    "Manage Layer 2 Outside (L2Out) logical node profiles (l2ext:LNodeP)": {
        "prefix": [
            "cisco.aci.aci_l2out_logical_node_profile",
            "Manage Layer 2 Outside (L2Out) logical node profiles (l2ext:LNodeP)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_l2out_logical_node_profile:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    host: ${4:string}",
            "    l2out: ${5:string}",
            "    node_profile: ${6:string}",
            "    output_level: ${7|normal,debug,info|}",
            "    output_path: ${8:string}",
            "    owner_key: ${9:string}",
            "    owner_tag: ${10:string}",
            "    password: ${11:string}",
            "    port: ${12:int}",
            "    private_key: ${13:string}",
            "    state: ${14|present,absent,query|}",
            "    tenant: ${15:string}",
            "    timeout: ${16:30}",
            "    use_proxy: ${17|true,false|}",
            "    use_ssl: ${18|true,false|}",
            "    username: ${19:admin}",
            "    validate_certs: ${20|true,false|}",
            "$0"
        ],
        "description": "Manage Layer 2 Outside (L2Out) logical node profiles (l2ext:LNodeP)",
        "scope": "ansible"
    },
    "Manage Layer 3 Outside (L3Out) objects (l3ext:Out)": {
        "prefix": [
            "cisco.aci.aci_l3out",
            "Manage Layer 3 Outside (L3Out) objects (l3ext:Out)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_l3out:",
            "    annotation: ${2:orchestrator:ansible}",
            "    asn: ${3:int}",
            "    certificate_name: ${4:string}",
            "    description: ${5:string}",
            "    domain: ${6:string}",
            "    dscp: ${7:string}",
            "    host: ${8:string}",
            "    l3out: ${9:string}",
            "    l3protocol:",
            "      - ${10:element}",
            "    name_alias: ${11:string}",
            "    output_level: ${12|normal,debug,info|}",
            "    output_path: ${13:string}",
            "    owner_key: ${14:string}",
            "    owner_tag: ${15:string}",
            "    password: ${16:string}",
            "    port: ${17:int}",
            "    private_key: ${18:string}",
            "    route_control:",
            "      - ${19:element}",
            "    state: ${20|present,absent,query|}",
            "    tenant: ${21:string}",
            "    timeout: ${22:30}",
            "    use_proxy: ${23|true,false|}",
            "    use_ssl: ${24|true,false|}",
            "    username: ${25:admin}",
            "    validate_certs: ${26|true,false|}",
            "    vrf: ${27:string}",
            "$0"
        ],
        "description": "Manage Layer 3 Outside (L3Out) objects (l3ext:Out)",
        "scope": "ansible"
    },
    "Manage Layer 3 Outside (L3Out) BGP Peers (bgp:PeerP)": {
        "prefix": [
            "cisco.aci.aci_l3out_bgp_peer",
            "Manage Layer 3 Outside (L3Out) BGP Peers (bgp:PeerP)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_l3out_bgp_peer:",
            "    address_type_controls:",
            "      - ${2:element}",
            "    admin_state: ${3:string}",
            "    allow_self_as_count: ${4:int}",
            "    annotation: ${5:orchestrator:ansible}",
            "    bgp_controls:",
            "      - ${6:element}",
            "    certificate_name: ${7:string}",
            "    host: ${8:string}",
            "    interface_profile: ${9:string}",
            "    l3out: ${10:string}",
            "    node_id: ${11:string}",
            "    node_profile: ${12:string}",
            "    output_level: ${13|normal,debug,info|}",
            "    output_path: ${14:string}",
            "    password: ${15:string}",
            "    path_ep: ${16:string}",
            "    peer_controls:",
            "      - ${17:element}",
            "    peer_ip: ${18:string}",
            "    pod_id: ${19:string}",
            "    port: ${20:int}",
            "    private_asn_controls:",
            "      - ${21:element}",
            "    private_key: ${22:string}",
            "    remote_asn: ${23:int}",
            "    route_control_profiles:",
            "      - ${24:element}",
            "    state: ${25|present,absent,query|}",
            "    tenant: ${26:string}",
            "    timeout: ${27:30}",
            "    ttl: ${28:int}",
            "    use_proxy: ${29|true,false|}",
            "    use_ssl: ${30|true,false|}",
            "    username: ${31:admin}",
            "    validate_certs: ${32|true,false|}",
            "    weight: ${33:int}",
            "$0"
        ],
        "description": "Manage Layer 3 Outside (L3Out) BGP Peers (bgp:PeerP)",
        "scope": "ansible"
    },
    "Manage External Network Instance Profile (ExtEpg) objects (l3extInstP:instP)": {
        "prefix": [
            "cisco.aci.aci_l3out_extepg",
            "Manage External Network Instance Profile (ExtEpg) objects (l3extInstP:instP)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_l3out_extepg:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    description: ${4:string}",
            "    dscp: ${5:string}",
            "    extepg: ${6:string}",
            "    host: ${7:string}",
            "    l3out: ${8:string}",
            "    name_alias: ${9:string}",
            "    output_level: ${10|normal,debug,info|}",
            "    output_path: ${11:string}",
            "    password: ${12:string}",
            "    port: ${13:int}",
            "    preferred_group: ${14|false,true|}",
            "    private_key: ${15:string}",
            "    state: ${16|present,absent,query|}",
            "    tenant: ${17:string}",
            "    timeout: ${18:30}",
            "    use_proxy: ${19|true,false|}",
            "    use_ssl: ${20|true,false|}",
            "    username: ${21:admin}",
            "    validate_certs: ${22|true,false|}",
            "$0"
        ],
        "description": "Manage External Network Instance Profile (ExtEpg) objects (l3extInstP:instP)",
        "scope": "ansible"
    },
    "Bind Contracts to External End Point Groups (EPGs)": {
        "prefix": [
            "cisco.aci.aci_l3out_extepg_to_contract",
            "Bind Contracts to External End Point Groups (EPGs)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_l3out_extepg_to_contract:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    contract: ${4:string}",
            "    contract_type: ${5:string}",
            "    extepg: ${6:string}",
            "    host: ${7:string}",
            "    l3out: ${8:string}",
            "    output_level: ${9|normal,debug,info|}",
            "    output_path: ${10:string}",
            "    password: ${11:string}",
            "    port: ${12:int}",
            "    priority: ${13:string}",
            "    private_key: ${14:string}",
            "    provider_match: ${15:string}",
            "    state: ${16|present,absent,query|}",
            "    tenant: ${17:string}",
            "    timeout: ${18:30}",
            "    use_proxy: ${19|true,false|}",
            "    use_ssl: ${20|true,false|}",
            "    username: ${21:admin}",
            "    validate_certs: ${22|true,false|}",
            "$0"
        ],
        "description": "Bind Contracts to External End Point Groups (EPGs)",
        "scope": "ansible"
    },
    "Manage External Subnet objects (l3extSubnet:extsubnet)": {
        "prefix": [
            "cisco.aci.aci_l3out_extsubnet",
            "Manage External Subnet objects (l3extSubnet:extsubnet)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_l3out_extsubnet:",
            "    aggregate:",
            "      - ${2:element}",
            "    annotation: ${3:orchestrator:ansible}",
            "    certificate_name: ${4:string}",
            "    description: ${5:string}",
            "    extepg: ${6:string}",
            "    host: ${7:string}",
            "    l3out: ${8:string}",
            "    name_alias: ${9:string}",
            "    network: ${10:string}",
            "    output_level: ${11|normal,debug,info|}",
            "    output_path: ${12:string}",
            "    password: ${13:string}",
            "    port: ${14:int}",
            "    private_key: ${15:string}",
            "    scope:",
            "      - ${16:element}",
            "    state: ${17|present,absent,query|}",
            "    subnet_name: ${18:string}",
            "    tenant: ${19:string}",
            "    timeout: ${20:30}",
            "    use_proxy: ${21|true,false|}",
            "    use_ssl: ${22|true,false|}",
            "    username: ${23:admin}",
            "    validate_certs: ${24|true,false|}",
            "$0"
        ],
        "description": "Manage External Subnet objects (l3extSubnet:extsubnet)",
        "scope": "ansible"
    },
    "Manage Layer 3 Outside (L3Out) interfaces (l3ext:RsPathL3OutAtt)": {
        "prefix": [
            "cisco.aci.aci_l3out_interface",
            "Manage Layer 3 Outside (L3Out) interfaces (l3ext:RsPathL3OutAtt)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_l3out_interface:",
            "    address: ${2:string}",
            "    annotation: ${3:orchestrator:ansible}",
            "    auto_state: ${4:string}",
            "    certificate_name: ${5:string}",
            "    encap: ${6:string}",
            "    host: ${7:string}",
            "    interface_profile: ${8:string}",
            "    interface_type: ${9:string}",
            "    ipv6_dad: ${10:string}",
            "    l3out: ${11:string}",
            "    mode: ${12:string}",
            "    mtu: ${13:string}",
            "    node_id: ${14:string}",
            "    node_profile: ${15:string}",
            "    output_level: ${16|normal,debug,info|}",
            "    output_path: ${17:string}",
            "    password: ${18:string}",
            "    path_ep: ${19:string}",
            "    pod_id: ${20:string}",
            "    port: ${21:int}",
            "    private_key: ${22:string}",
            "    state: ${23|present,absent,query|}",
            "    tenant: ${24:string}",
            "    timeout: ${25:30}",
            "    use_proxy: ${26|true,false|}",
            "    use_ssl: ${27|true,false|}",
            "    username: ${28:admin}",
            "    validate_certs: ${29|true,false|}",
            "$0"
        ],
        "description": "Manage Layer 3 Outside (L3Out) interfaces (l3ext:RsPathL3OutAtt)",
        "scope": "ansible"
    },
    "Manage Layer 3 Outside (L3Out) interface secondary IP addresses (l3ext:Ip).": {
        "prefix": [
            "cisco.aci.aci_l3out_interface_secondary_ip",
            "Manage Layer 3 Outside (L3Out) interface secondary IP addresses (l3ext:Ip)."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_l3out_interface_secondary_ip:",
            "    address: ${2:string}",
            "    annotation: ${3:orchestrator:ansible}",
            "    certificate_name: ${4:string}",
            "    host: ${5:string}",
            "    interface_profile: ${6:string}",
            "    ipv6_dad: ${7:string}",
            "    l3out: ${8:string}",
            "    node_id: ${9:string}",
            "    node_profile: ${10:string}",
            "    output_level: ${11|normal,debug,info|}",
            "    output_path: ${12:string}",
            "    password: ${13:string}",
            "    path_ep: ${14:string}",
            "    pod_id: ${15:string}",
            "    port: ${16:int}",
            "    private_key: ${17:string}",
            "    side: ${18:string}",
            "    state: ${19|present,absent,query|}",
            "    tenant: ${20:string}",
            "    timeout: ${21:30}",
            "    use_proxy: ${22|true,false|}",
            "    use_ssl: ${23|true,false|}",
            "    username: ${24:admin}",
            "    validate_certs: ${25|true,false|}",
            "$0"
        ],
        "description": "Manage Layer 3 Outside (L3Out) interface secondary IP addresses (l3ext:Ip).",
        "scope": "ansible"
    },
    "Manage Layer 3 Outside (L3Out) logical interface profiles (l3ext:LIfP)": {
        "prefix": [
            "cisco.aci.aci_l3out_logical_interface_profile",
            "Manage Layer 3 Outside (L3Out) logical interface profiles (l3ext:LIfP)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_l3out_logical_interface_profile:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    egress_dpp_policy: ${4:string}",
            "    host: ${5:string}",
            "    ingress_dpp_policy: ${6:string}",
            "    interface_profile: ${7:string}",
            "    l3out: ${8:string}",
            "    nd_policy: ${9:string}",
            "    node_profile: ${10:string}",
            "    output_level: ${11|normal,debug,info|}",
            "    output_path: ${12:string}",
            "    owner_key: ${13:string}",
            "    owner_tag: ${14:string}",
            "    password: ${15:string}",
            "    port: ${16:int}",
            "    private_key: ${17:string}",
            "    state: ${18|present,absent,query|}",
            "    tenant: ${19:string}",
            "    timeout: ${20:30}",
            "    use_proxy: ${21|true,false|}",
            "    use_ssl: ${22|true,false|}",
            "    username: ${23:admin}",
            "    validate_certs: ${24|true,false|}",
            "$0"
        ],
        "description": "Manage Layer 3 Outside (L3Out) logical interface profiles (l3ext:LIfP)",
        "scope": "ansible"
    },
    "Manage Layer 3 Outside (L3Out) logical interface profile (l3ext:LIfP) OSPF policy (ospfIfP)": {
        "prefix": [
            "cisco.aci.aci_l3out_logical_interface_profile_ospf_policy",
            "Manage Layer 3 Outside (L3Out) logical interface profile (l3ext:LIfP) OSPF policy (ospfIfP)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_l3out_logical_interface_profile_ospf_policy:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    host: ${4:string}",
            "    interface_profile: ${5:string}",
            "    l3out: ${6:string}",
            "    node_profile: ${7:string}",
            "    ospf_auth_key: ${8:}",
            "    ospf_auth_type: ${9:string}",
            "    ospf_policy: ${10:string}",
            "    output_level: ${11|normal,debug,info|}",
            "    output_path: ${12:string}",
            "    owner_key: ${13:string}",
            "    owner_tag: ${14:string}",
            "    password: ${15:string}",
            "    port: ${16:int}",
            "    private_key: ${17:string}",
            "    state: ${18|present,absent,query|}",
            "    tenant: ${19:string}",
            "    timeout: ${20:30}",
            "    use_proxy: ${21|true,false|}",
            "    use_ssl: ${22|true,false|}",
            "    username: ${23:admin}",
            "    validate_certs: ${24|true,false|}",
            "$0"
        ],
        "description": "Manage Layer 3 Outside (L3Out) logical interface profile (l3ext:LIfP) OSPF policy (ospfIfP)",
        "scope": "ansible"
    },
    "Manage Member Node objects (l3ext:Member)": {
        "prefix": [
            "cisco.aci.aci_l3out_logical_interface_vpc_member",
            "Manage Member Node objects (l3ext:Member)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_l3out_logical_interface_vpc_member:",
            "    address: ${2:string}",
            "    annotation: ${3:orchestrator:ansible}",
            "    certificate_name: ${4:string}",
            "    description: ${5:string}",
            "    host: ${6:string}",
            "    interface_profile: ${7:string}",
            "    ipv6_dad: ${8:string}",
            "    l3out: ${9:string}",
            "    name_alias: ${10:string}",
            "    node_id: ${11:string}",
            "    node_profile: ${12:string}",
            "    output_level: ${13|normal,debug,info|}",
            "    output_path: ${14:string}",
            "    password: ${15:string}",
            "    path_dn: ${16:string}",
            "    path_ep: ${17:string}",
            "    pod_id: ${18:string}",
            "    port: ${19:int}",
            "    private_key: ${20:string}",
            "    side: ${21:string}",
            "    state: ${22|present,absent,query|}",
            "    tenant: ${23:string}",
            "    timeout: ${24:30}",
            "    use_proxy: ${25|true,false|}",
            "    use_ssl: ${26|true,false|}",
            "    username: ${27:admin}",
            "    validate_certs: ${28|true,false|}",
            "$0"
        ],
        "description": "Manage Member Node objects (l3ext:Member)",
        "scope": "ansible"
    },
    "Manage Layer 3 Outside (L3Out) logical node profile nodes (l3ext:RsNodeL3OutAtt)": {
        "prefix": [
            "cisco.aci.aci_l3out_logical_node",
            "Manage Layer 3 Outside (L3Out) logical node profile nodes (l3ext:RsNodeL3OutAtt)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_l3out_logical_node:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    host: ${4:string}",
            "    l3out: ${5:string}",
            "    node_id: ${6:int}",
            "    node_profile: ${7:string}",
            "    output_level: ${8|normal,debug,info|}",
            "    output_path: ${9:string}",
            "    password: ${10:string}",
            "    pod_id: ${11:int}",
            "    port: ${12:int}",
            "    private_key: ${13:string}",
            "    router_id: ${14:string}",
            "    router_id_as_loopback: ${15|yes,no|}",
            "    state: ${16|present,absent,query|}",
            "    tenant: ${17:string}",
            "    timeout: ${18:30}",
            "    use_proxy: ${19|true,false|}",
            "    use_ssl: ${20|true,false|}",
            "    username: ${21:admin}",
            "    validate_certs: ${22|true,false|}",
            "$0"
        ],
        "description": "Manage Layer 3 Outside (L3Out) logical node profile nodes (l3ext:RsNodeL3OutAtt)",
        "scope": "ansible"
    },
    "Manage Layer 3 Outside (L3Out) logical node profiles (l3extLNodeP:lnodep)": {
        "prefix": [
            "cisco.aci.aci_l3out_logical_node_profile",
            "Manage Layer 3 Outside (L3Out) logical node profiles (l3extLNodeP:lnodep)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_l3out_logical_node_profile:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    description: ${4:string}",
            "    dscp: ${5:string}",
            "    host: ${6:string}",
            "    l3out: ${7:string}",
            "    name_alias: ${8:string}",
            "    node_profile: ${9:string}",
            "    output_level: ${10|normal,debug,info|}",
            "    output_path: ${11:string}",
            "    owner_key: ${12:string}",
            "    owner_tag: ${13:string}",
            "    password: ${14:string}",
            "    port: ${15:int}",
            "    private_key: ${16:string}",
            "    state: ${17|present,absent,query|}",
            "    tenant: ${18:string}",
            "    timeout: ${19:30}",
            "    use_proxy: ${20|true,false|}",
            "    use_ssl: ${21|true,false|}",
            "    username: ${22:admin}",
            "    validate_certs: ${23|true,false|}",
            "$0"
        ],
        "description": "Manage Layer 3 Outside (L3Out) logical node profiles (l3extLNodeP:lnodep)",
        "scope": "ansible"
    },
    "Manage route tag policies (l3ext:RouteTagPol)": {
        "prefix": [
            "cisco.aci.aci_l3out_route_tag_policy",
            "Manage route tag policies (l3ext:RouteTagPol)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_l3out_route_tag_policy:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    description: ${4:string}",
            "    host: ${5:string}",
            "    name_alias: ${6:string}",
            "    output_level: ${7|normal,debug,info|}",
            "    output_path: ${8:string}",
            "    owner_key: ${9:string}",
            "    owner_tag: ${10:string}",
            "    password: ${11:string}",
            "    port: ${12:int}",
            "    private_key: ${13:string}",
            "    rtp: ${14:string}",
            "    state: ${15|present,absent,query|}",
            "    tag: ${16:int}",
            "    tenant: ${17:string}",
            "    timeout: ${18:30}",
            "    use_proxy: ${19|true,false|}",
            "    use_ssl: ${20|true,false|}",
            "    username: ${21:admin}",
            "    validate_certs: ${22|true,false|}",
            "$0"
        ],
        "description": "Manage route tag policies (l3ext:RouteTagPol)",
        "scope": "ansible"
    },
    "Manage Static routes object (l3ext:ipRouteP)": {
        "prefix": [
            "cisco.aci.aci_l3out_static_routes",
            "Manage Static routes object (l3ext:ipRouteP)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_l3out_static_routes:",
            "    annotation: ${2:orchestrator:ansible}",
            "    bfd: ${3:string}",
            "    certificate_name: ${4:string}",
            "    description: ${5:string}",
            "    host: ${6:string}",
            "    l3out: ${7:string}",
            "    logical_node: ${8:string}",
            "    name_alias: ${9:string}",
            "    node_id: ${10:int}",
            "    output_level: ${11|normal,debug,info|}",
            "    output_path: ${12:string}",
            "    password: ${13:string}",
            "    pod_id: ${14:int}",
            "    port: ${15:int}",
            "    preference: ${16:int}",
            "    prefix: ${17:string}",
            "    private_key: ${18:string}",
            "    state: ${19|present,absent,query|}",
            "    tenant: ${20:string}",
            "    timeout: ${21:30}",
            "    track_policy: ${22:string}",
            "    use_proxy: ${23|true,false|}",
            "    use_ssl: ${24|true,false|}",
            "    username: ${25:admin}",
            "    validate_certs: ${26|true,false|}",
            "$0"
        ],
        "description": "Manage Static routes object (l3ext:ipRouteP)",
        "scope": "ansible"
    },
    "Manage nexthops for static routes (ip:NexthopP)": {
        "prefix": [
            "cisco.aci.aci_l3out_static_routes_nexthop",
            "Manage nexthops for static routes (ip:NexthopP)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_l3out_static_routes_nexthop:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    host: ${4:string}",
            "    l3out: ${5:string}",
            "    nexthop: ${6:string}",
            "    node_id: ${7:int}",
            "    node_profile: ${8:string}",
            "    output_level: ${9|normal,debug,info|}",
            "    output_path: ${10:string}",
            "    password: ${11:string}",
            "    pod_id: ${12:int}",
            "    port: ${13:int}",
            "    prefix: ${14:string}",
            "    private_key: ${15:string}",
            "    state: ${16|present,absent,query|}",
            "    tenant: ${17:string}",
            "    timeout: ${18:30}",
            "    use_proxy: ${19|true,false|}",
            "    use_ssl: ${20|true,false|}",
            "    username: ${21:admin}",
            "    validate_certs: ${22|true,false|}",
            "$0"
        ],
        "description": "Manage nexthops for static routes (ip:NexthopP)",
        "scope": "ansible"
    },
    "This creates an ACI maintenance group": {
        "prefix": [
            "cisco.aci.aci_maintenance_group",
            "This creates an ACI maintenance group"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_maintenance_group:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    group: ${4:string}",
            "    host: ${5:string}",
            "    name_alias: ${6:string}",
            "    output_level: ${7|normal,debug,info|}",
            "    output_path: ${8:string}",
            "    owner_key: ${9:string}",
            "    owner_tag: ${10:string}",
            "    password: ${11:string}",
            "    policy: ${12:string}",
            "    port: ${13:int}",
            "    private_key: ${14:string}",
            "    state: ${15|present,absent,query|}",
            "    timeout: ${16:30}",
            "    use_proxy: ${17|true,false|}",
            "    use_ssl: ${18|true,false|}",
            "    username: ${19:admin}",
            "    validate_certs: ${20|true,false|}",
            "$0"
        ],
        "description": "This creates an ACI maintenance group",
        "scope": "ansible"
    },
    "Manage maintenance group nodes": {
        "prefix": [
            "cisco.aci.aci_maintenance_group_node",
            "Manage maintenance group nodes"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_maintenance_group_node:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    group: ${4:string}",
            "    host: ${5:string}",
            "    name_alias: ${6:string}",
            "    node: ${7:string}",
            "    output_level: ${8|normal,debug,info|}",
            "    output_path: ${9:string}",
            "    password: ${10:string}",
            "    port: ${11:int}",
            "    private_key: ${12:string}",
            "    state: ${13|present,absent,query|}",
            "    timeout: ${14:30}",
            "    use_proxy: ${15|true,false|}",
            "    use_ssl: ${16|true,false|}",
            "    username: ${17:admin}",
            "    validate_certs: ${18|true,false|}",
            "$0"
        ],
        "description": "Manage maintenance group nodes",
        "scope": "ansible"
    },
    "Manage firmware maintenance policies": {
        "prefix": [
            "cisco.aci.aci_maintenance_policy",
            "Manage firmware maintenance policies"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_maintenance_policy:",
            "    adminst: ${2|untriggered,triggered|}",
            "    annotation: ${3:orchestrator:ansible}",
            "    certificate_name: ${4:string}",
            "    graceful: ${5|false,true|}",
            "    host: ${6:string}",
            "    ignoreCompat: ${7|false,true|}",
            "    name: ${8:string}",
            "    name_alias: ${9:string}",
            "    output_level: ${10|normal,debug,info|}",
            "    output_path: ${11:string}",
            "    password: ${12:string}",
            "    port: ${13:int}",
            "    private_key: ${14:string}",
            "    runmode: ${15|pauseOnlyOnFailures,pauseNever|}",
            "    scheduler: ${16:string}",
            "    state: ${17|present,absent,query|}",
            "    timeout: ${18:30}",
            "    use_proxy: ${19|true,false|}",
            "    use_ssl: ${20|true,false|}",
            "    username: ${21:admin}",
            "    validate_certs: ${22|true,false|}",
            "$0"
        ],
        "description": "Manage firmware maintenance policies",
        "scope": "ansible"
    },
    "In band or Out of band management EPGs": {
        "prefix": [
            "cisco.aci.aci_node_mgmt_epg",
            "In band or Out of band management EPGs"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_node_mgmt_epg:",
            "    annotation: ${2:orchestrator:ansible}",
            "    bd: ${3:string}",
            "    certificate_name: ${4:string}",
            "    encap: ${5:string}",
            "    epg: ${6:string}",
            "    host: ${7:string}",
            "    output_level: ${8|normal,debug,info|}",
            "    output_path: ${9:string}",
            "    password: ${10:string}",
            "    port: ${11:int}",
            "    private_key: ${12:string}",
            "    state: ${13|present,absent,query|}",
            "    timeout: ${14:30}",
            "    type: ${15:string}",
            "    use_proxy: ${16|true,false|}",
            "    use_ssl: ${17|true,false|}",
            "    username: ${18:admin}",
            "    validate_certs: ${19|true,false|}",
            "$0"
        ],
        "description": "In band or Out of band management EPGs",
        "scope": "ansible"
    },
    "Manage NTP policies.": {
        "prefix": [
            "cisco.aci.aci_ntp_policy",
            "Manage NTP policies."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_ntp_policy:",
            "    admin_state: ${2:string}",
            "    auth_state: ${3:string}",
            "    certificate_name: ${4:string}",
            "    description: ${5:string}",
            "    host: ${6:string}",
            "    master_mode: ${7:string}",
            "    name: ${8:string}",
            "    output_level: ${9|normal,debug,info|}",
            "    output_path: ${10:string}",
            "    password: ${11:string}",
            "    port: ${12:int}",
            "    private_key: ${13:string}",
            "    server_state: ${14:string}",
            "    state: ${15|present,absent,query|}",
            "    timeout: ${16:30}",
            "    use_proxy: ${17|true,false|}",
            "    use_ssl: ${18|true,false|}",
            "    username: ${19:admin}",
            "    validate_certs: ${20|true,false|}",
            "$0"
        ],
        "description": "Manage NTP policies.",
        "scope": "ansible"
    },
    "Manage NTP servers.": {
        "prefix": [
            "cisco.aci.aci_ntp_server",
            "Manage NTP servers."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_ntp_server:",
            "    certificate_name: ${2:string}",
            "    description: ${3:string}",
            "    epg_name: ${4:string}",
            "    epg_type: ${5:string}",
            "    host: ${6:string}",
            "    max_poll: ${7:int}",
            "    min_poll: ${8:int}",
            "    ntp_policy: ${9:string}",
            "    ntp_server: ${10:string}",
            "    output_level: ${11|normal,debug,info|}",
            "    output_path: ${12:string}",
            "    password: ${13:string}",
            "    port: ${14:int}",
            "    preferred: ${15|false,true|}",
            "    private_key: ${16:string}",
            "    state: ${17|present,absent,query|}",
            "    timeout: ${18:30}",
            "    use_proxy: ${19|true,false|}",
            "    use_ssl: ${20|true,false|}",
            "    username: ${21:admin}",
            "    validate_certs: ${22|true,false|}",
            "$0"
        ],
        "description": "Manage NTP servers.",
        "scope": "ansible"
    },
    "Direct access to the Cisco APIC REST API": {
        "prefix": [
            "cisco.aci.aci_rest",
            "Direct access to the Cisco APIC REST API"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_rest:",
            "    certificate_name: ${2:string}",
            "    content: ${3:\"raw\"}",
            "    host: ${4:string}",
            "    method: ${5|get,delete,post|}",
            "    output_level: ${6|normal,debug,info|}",
            "    output_path: ${7:string}",
            "    password: ${8:string}",
            "    path: ${9:string}",
            "    port: ${10:int}",
            "    private_key: ${11:string}",
            "    src: ${12:path}",
            "    timeout: ${13:30}",
            "    use_proxy: ${14|true,false|}",
            "    use_ssl: ${15|true,false|}",
            "    username: ${16:admin}",
            "    validate_certs: ${17|true,false|}",
            "$0"
        ],
        "description": "Direct access to the Cisco APIC REST API",
        "scope": "ansible"
    },
    "Manage SNMP clients (snmp:ClientP).": {
        "prefix": [
            "cisco.aci.aci_snmp_client",
            "Manage SNMP clients (snmp:ClientP)."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_snmp_client:",
            "    address: ${2:string}",
            "    annotation: ${3:orchestrator:ansible}",
            "    certificate_name: ${4:string}",
            "    client_group: ${5:string}",
            "    client_name: ${6:string}",
            "    host: ${7:string}",
            "    output_level: ${8|normal,debug,info|}",
            "    output_path: ${9:string}",
            "    password: ${10:string}",
            "    policy: ${11:string}",
            "    port: ${12:int}",
            "    private_key: ${13:string}",
            "    state: ${14|present,absent,query|}",
            "    timeout: ${15:30}",
            "    use_proxy: ${16|true,false|}",
            "    use_ssl: ${17|true,false|}",
            "    username: ${18:admin}",
            "    validate_certs: ${19|true,false|}",
            "$0"
        ],
        "description": "Manage SNMP clients (snmp:ClientP).",
        "scope": "ansible"
    },
    "Manage SNMP client groups (snmp:ClientGrpP).": {
        "prefix": [
            "cisco.aci.aci_snmp_client_group",
            "Manage SNMP client groups (snmp:ClientGrpP)."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_snmp_client_group:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    client_group: ${4:string}",
            "    description: ${5:string}",
            "    host: ${6:string}",
            "    mgmt_epg: ${7:string}",
            "    output_level: ${8|normal,debug,info|}",
            "    output_path: ${9:string}",
            "    password: ${10:string}",
            "    policy: ${11:string}",
            "    port: ${12:int}",
            "    private_key: ${13:string}",
            "    state: ${14|present,absent,query|}",
            "    timeout: ${15:30}",
            "    use_proxy: ${16|true,false|}",
            "    use_ssl: ${17|true,false|}",
            "    username: ${18:admin}",
            "    validate_certs: ${19|true,false|}",
            "$0"
        ],
        "description": "Manage SNMP client groups (snmp:ClientGrpP).",
        "scope": "ansible"
    },
    "Manage SNMP community policies (snmp:CommunityP).": {
        "prefix": [
            "cisco.aci.aci_snmp_community_policy",
            "Manage SNMP community policies (snmp:CommunityP)."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_snmp_community_policy:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    community: ${4:string}",
            "    description: ${5:string}",
            "    host: ${6:string}",
            "    output_level: ${7|normal,debug,info|}",
            "    output_path: ${8:string}",
            "    password: ${9:string}",
            "    policy: ${10:string}",
            "    port: ${11:int}",
            "    private_key: ${12:string}",
            "    state: ${13|present,absent,query|}",
            "    timeout: ${14:30}",
            "    use_proxy: ${15|true,false|}",
            "    use_ssl: ${16|true,false|}",
            "    username: ${17:admin}",
            "    validate_certs: ${18|true,false|}",
            "$0"
        ],
        "description": "Manage SNMP community policies (snmp:CommunityP).",
        "scope": "ansible"
    },
    "Manage Syslog groups (snmp:Pol).": {
        "prefix": [
            "cisco.aci.aci_snmp_policy",
            "Manage Syslog groups (snmp:Pol)."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_snmp_policy:",
            "    admin_state: ${2:string}",
            "    annotation: ${3:orchestrator:ansible}",
            "    certificate_name: ${4:string}",
            "    contact: ${5:string}",
            "    description: ${6:string}",
            "    host: ${7:string}",
            "    location: ${8:string}",
            "    name: ${9:string}",
            "    output_level: ${10|normal,debug,info|}",
            "    output_path: ${11:string}",
            "    owner_key: ${12:string}",
            "    owner_tag: ${13:string}",
            "    password: ${14:string}",
            "    port: ${15:int}",
            "    private_key: ${16:string}",
            "    state: ${17|present,absent,query|}",
            "    timeout: ${18:30}",
            "    use_proxy: ${19|true,false|}",
            "    use_ssl: ${20|true,false|}",
            "    username: ${21:admin}",
            "    validate_certs: ${22|true,false|}",
            "$0"
        ],
        "description": "Manage Syslog groups (snmp:Pol).",
        "scope": "ansible"
    },
    "Manage SNMP v3 Users (snmp:UserP).": {
        "prefix": [
            "cisco.aci.aci_snmp_user",
            "Manage SNMP v3 Users (snmp:UserP)."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_snmp_user:",
            "    annotation: ${2:orchestrator:ansible}",
            "    auth_key: ${3:string}",
            "    auth_type: ${4:string}",
            "    certificate_name: ${5:string}",
            "    host: ${6:string}",
            "    name: ${7:string}",
            "    output_level: ${8|normal,debug,info|}",
            "    output_path: ${9:string}",
            "    password: ${10:string}",
            "    policy: ${11:string}",
            "    port: ${12:int}",
            "    privacy_key: ${13:string}",
            "    privacy_type: ${14:string}",
            "    private_key: ${15:string}",
            "    state: ${16|present,absent,query|}",
            "    timeout: ${17:30}",
            "    use_proxy: ${18|true,false|}",
            "    use_ssl: ${19|true,false|}",
            "    username: ${20:admin}",
            "    validate_certs: ${21|true,false|}",
            "$0"
        ],
        "description": "Manage SNMP v3 Users (snmp:UserP).",
        "scope": "ansible"
    },
    "In band or Out of band management IP address": {
        "prefix": [
            "cisco.aci.aci_static_node_mgmt_address",
            "In band or Out of band management IP address"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_static_node_mgmt_address:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    epg: ${4:string}",
            "    host: ${5:string}",
            "    ipv4_address: ${6:string}",
            "    ipv4_gw: ${7:string}",
            "    ipv6_address: ${8:string}",
            "    ipv6_gw: ${9:string}",
            "    node_id: ${10:int}",
            "    output_level: ${11|normal,debug,info|}",
            "    output_path: ${12:string}",
            "    password: ${13:string}",
            "    pod_id: ${14:int}",
            "    port: ${15:int}",
            "    private_key: ${16:string}",
            "    state: ${17|present,absent,query|}",
            "    timeout: ${18:30}",
            "    type: ${19:string}",
            "    use_proxy: ${20|true,false|}",
            "    use_ssl: ${21|true,false|}",
            "    username: ${22:admin}",
            "    validate_certs: ${23|true,false|}",
            "$0"
        ],
        "description": "In band or Out of band management IP address",
        "scope": "ansible"
    },
    "Bind leaf selectors to switch policy leaf profiles (infra:LeafS, infra:NodeBlk, infra:RsAccNodePGrep)": {
        "prefix": [
            "cisco.aci.aci_switch_leaf_selector",
            "Bind leaf selectors to switch policy leaf profiles (infra:LeafS, infra:NodeBlk, infra:RsAccNodePGrep)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_switch_leaf_selector:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    description: ${4:string}",
            "    from: ${5:int}",
            "    host: ${6:string}",
            "    leaf: ${7:string}",
            "    leaf_node_blk: ${8:string}",
            "    leaf_node_blk_description: ${9:string}",
            "    leaf_profile: ${10:string}",
            "    name_alias: ${11:string}",
            "    output_level: ${12|normal,debug,info|}",
            "    output_path: ${13:string}",
            "    owner_key: ${14:string}",
            "    owner_tag: ${15:string}",
            "    password: ${16:string}",
            "    policy_group: ${17:string}",
            "    port: ${18:int}",
            "    private_key: ${19:string}",
            "    state: ${20|present,absent,query|}",
            "    timeout: ${21:30}",
            "    to: ${22:int}",
            "    use_proxy: ${23|true,false|}",
            "    use_ssl: ${24|true,false|}",
            "    username: ${25:admin}",
            "    validate_certs: ${26|true,false|}",
            "$0"
        ],
        "description": "Bind leaf selectors to switch policy leaf profiles (infra:LeafS, infra:NodeBlk, infra:RsAccNodePGrep)",
        "scope": "ansible"
    },
    "Manage switch policy leaf profiles (infra:NodeP)": {
        "prefix": [
            "cisco.aci.aci_switch_policy_leaf_profile",
            "Manage switch policy leaf profiles (infra:NodeP)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_switch_policy_leaf_profile:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    description: ${4:string}",
            "    host: ${5:string}",
            "    leaf_profile: ${6:string}",
            "    name_alias: ${7:string}",
            "    output_level: ${8|normal,debug,info|}",
            "    output_path: ${9:string}",
            "    owner_key: ${10:string}",
            "    owner_tag: ${11:string}",
            "    password: ${12:string}",
            "    port: ${13:int}",
            "    private_key: ${14:string}",
            "    state: ${15|present,absent,query|}",
            "    timeout: ${16:30}",
            "    use_proxy: ${17|true,false|}",
            "    use_ssl: ${18|true,false|}",
            "    username: ${19:admin}",
            "    validate_certs: ${20|true,false|}",
            "$0"
        ],
        "description": "Manage switch policy leaf profiles (infra:NodeP)",
        "scope": "ansible"
    },
    "Manage switch policy explicit vPC protection groups (fabric:ExplicitGEp, fabric:NodePEp).": {
        "prefix": [
            "cisco.aci.aci_switch_policy_vpc_protection_group",
            "Manage switch policy explicit vPC protection groups (fabric:ExplicitGEp, fabric:NodePEp)."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_switch_policy_vpc_protection_group:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    host: ${4:string}",
            "    name_alias: ${5:string}",
            "    output_level: ${6|normal,debug,info|}",
            "    output_path: ${7:string}",
            "    password: ${8:string}",
            "    port: ${9:int}",
            "    private_key: ${10:string}",
            "    protection_group: ${11:string}",
            "    protection_group_id: ${12:int}",
            "    state: ${13|present,absent,query|}",
            "    switch_1_id: ${14:int}",
            "    switch_2_id: ${15:int}",
            "    timeout: ${16:30}",
            "    use_proxy: ${17|true,false|}",
            "    use_ssl: ${18|true,false|}",
            "    username: ${19:admin}",
            "    validate_certs: ${20|true,false|}",
            "    vpc_domain_policy: ${21:string}",
            "$0"
        ],
        "description": "Manage switch policy explicit vPC protection groups (fabric:ExplicitGEp, fabric:NodePEp).",
        "scope": "ansible"
    },
    "Manage Syslog groups (syslog:Group, syslog:Console, syslog:File and syslog:Prof).": {
        "prefix": [
            "cisco.aci.aci_syslog_group",
            "Manage Syslog groups (syslog:Group, syslog:Console, syslog:File and syslog:Prof)."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_syslog_group:",
            "    admin_state: ${2:string}",
            "    annotation: ${3:orchestrator:ansible}",
            "    certificate_name: ${4:string}",
            "    console_log_severity: ${5:string}",
            "    console_logging: ${6:string}",
            "    format: ${7:string}",
            "    host: ${8:string}",
            "    include_ms: ${9|false,true|}",
            "    include_time_zone: ${10|false,true|}",
            "    local_file_log_severity: ${11:string}",
            "    local_file_logging: ${12:string}",
            "    name: ${13:string}",
            "    output_level: ${14|normal,debug,info|}",
            "    output_path: ${15:string}",
            "    password: ${16:string}",
            "    port: ${17:int}",
            "    private_key: ${18:string}",
            "    state: ${19|present,absent,query|}",
            "    timeout: ${20:30}",
            "    use_proxy: ${21|true,false|}",
            "    use_ssl: ${22|true,false|}",
            "    username: ${23:admin}",
            "    validate_certs: ${24|true,false|}",
            "$0"
        ],
        "description": "Manage Syslog groups (syslog:Group, syslog:Console, syslog:File and syslog:Prof).",
        "scope": "ansible"
    },
    "Manage Syslog Remote Destinations (syslog:RemoteDest).": {
        "prefix": [
            "cisco.aci.aci_syslog_remote_dest",
            "Manage Syslog Remote Destinations (syslog:RemoteDest)."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_syslog_remote_dest:",
            "    admin_state: ${2:string}",
            "    annotation: ${3:orchestrator:ansible}",
            "    certificate_name: ${4:string}",
            "    description: ${5:string}",
            "    destination: ${6:string}",
            "    facility: ${7:string}",
            "    format: ${8:string}",
            "    group: ${9:string}",
            "    host: ${10:string}",
            "    mgmt_epg: ${11:string}",
            "    name: ${12:string}",
            "    output_level: ${13|normal,debug,info|}",
            "    output_path: ${14:string}",
            "    password: ${15:string}",
            "    port: ${16:int}",
            "    private_key: ${17:string}",
            "    severity: ${18:string}",
            "    state: ${19|present,absent,query|}",
            "    syslog_port: ${20:int}",
            "    timeout: ${21:30}",
            "    use_proxy: ${22|true,false|}",
            "    use_ssl: ${23|true,false|}",
            "    username: ${24:admin}",
            "    validate_certs: ${25|true,false|}",
            "$0"
        ],
        "description": "Manage Syslog Remote Destinations (syslog:RemoteDest).",
        "scope": "ansible"
    },
    "Manage Syslog Source objects (syslog:Src)": {
        "prefix": [
            "cisco.aci.aci_syslog_source",
            "Manage Syslog Source objects (syslog:Src)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_syslog_source:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    destination_group: ${4:string}",
            "    host: ${5:string}",
            "    include:",
            "      - ${6:element}",
            "    min_severity: ${7:string}",
            "    name: ${8:string}",
            "    output_level: ${9|normal,debug,info|}",
            "    output_path: ${10:string}",
            "    password: ${11:string}",
            "    port: ${12:int}",
            "    private_key: ${13:string}",
            "    state: ${14|present,absent,query|}",
            "    timeout: ${15:30}",
            "    use_proxy: ${16|true,false|}",
            "    use_ssl: ${17|true,false|}",
            "    username: ${18:admin}",
            "    validate_certs: ${19|true,false|}",
            "$0"
        ],
        "description": "Manage Syslog Source objects (syslog:Src)",
        "scope": "ansible"
    },
    "Query the ACI system information (top:System)": {
        "prefix": [
            "cisco.aci.aci_system",
            "Query the ACI system information (top:System)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_system:",
            "    certificate_name: ${2:string}",
            "    host: ${3:string}",
            "    id: ${4:int}",
            "    output_level: ${5|normal,debug,info|}",
            "    output_path: ${6:string}",
            "    password: ${7:string}",
            "    port: ${8:int}",
            "    private_key: ${9:string}",
            "    state: ${10|query|}",
            "    timeout: ${11:30}",
            "    use_proxy: ${12|true,false|}",
            "    use_ssl: ${13|true,false|}",
            "    username: ${14:admin}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "Query the ACI system information (top:System)",
        "scope": "ansible"
    },
    "Manage taboo contracts (vz:BrCP)": {
        "prefix": [
            "cisco.aci.aci_taboo_contract",
            "Manage taboo contracts (vz:BrCP)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_taboo_contract:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    description: ${4:string}",
            "    host: ${5:string}",
            "    name_alias: ${6:string}",
            "    output_level: ${7|normal,debug,info|}",
            "    output_path: ${8:string}",
            "    owner_key: ${9:string}",
            "    owner_tag: ${10:string}",
            "    password: ${11:string}",
            "    port: ${12:int}",
            "    private_key: ${13:string}",
            "    scope: ${14:string}",
            "    state: ${15|present,absent,query|}",
            "    taboo_contract: ${16:string}",
            "    tenant: ${17:string}",
            "    timeout: ${18:30}",
            "    use_proxy: ${19|true,false|}",
            "    use_ssl: ${20|true,false|}",
            "    username: ${21:admin}",
            "    validate_certs: ${22|true,false|}",
            "$0"
        ],
        "description": "Manage taboo contracts (vz:BrCP)",
        "scope": "ansible"
    },
    "Tagging of ACI objects": {
        "prefix": [
            "cisco.aci.aci_tag",
            "Tagging of ACI objects"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_tag:",
            "    certificate_name: ${2:string}",
            "    dn: ${3:string}",
            "    host: ${4:string}",
            "    output_level: ${5|normal,debug,info|}",
            "    output_path: ${6:string}",
            "    password: ${7:string}",
            "    port: ${8:int}",
            "    private_key: ${9:string}",
            "    state: ${10|present,absent,query|}",
            "    tag_key: ${11:string}",
            "    tag_type: ${12:string}",
            "    tag_value: ${13:string}",
            "    timeout: ${14:30}",
            "    use_proxy: ${15|true,false|}",
            "    use_ssl: ${16|true,false|}",
            "    username: ${17:admin}",
            "    validate_certs: ${18|true,false|}",
            "$0"
        ],
        "description": "Tagging of ACI objects",
        "scope": "ansible"
    },
    "Manage tenants (fv:Tenant)": {
        "prefix": [
            "cisco.aci.aci_tenant",
            "Manage tenants (fv:Tenant)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_tenant:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    description: ${4:string}",
            "    host: ${5:string}",
            "    name_alias: ${6:string}",
            "    output_level: ${7|normal,debug,info|}",
            "    output_path: ${8:string}",
            "    owner_key: ${9:string}",
            "    owner_tag: ${10:string}",
            "    password: ${11:string}",
            "    port: ${12:int}",
            "    private_key: ${13:string}",
            "    state: ${14|present,absent,query|}",
            "    tenant: ${15:string}",
            "    timeout: ${16:30}",
            "    use_proxy: ${17|true,false|}",
            "    use_ssl: ${18|true,false|}",
            "    username: ${19:admin}",
            "    validate_certs: ${20|true,false|}",
            "$0"
        ],
        "description": "Manage tenants (fv:Tenant)",
        "scope": "ansible"
    },
    "Manage action rule profiles (rtctrl:AttrP)": {
        "prefix": [
            "cisco.aci.aci_tenant_action_rule_profile",
            "Manage action rule profiles (rtctrl:AttrP)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_tenant_action_rule_profile:",
            "    action_rule: ${2:string}",
            "    annotation: ${3:orchestrator:ansible}",
            "    certificate_name: ${4:string}",
            "    description: ${5:string}",
            "    host: ${6:string}",
            "    name_alias: ${7:string}",
            "    output_level: ${8|normal,debug,info|}",
            "    output_path: ${9:string}",
            "    password: ${10:string}",
            "    port: ${11:int}",
            "    private_key: ${12:string}",
            "    state: ${13|present,absent,query|}",
            "    tenant: ${14:string}",
            "    timeout: ${15:30}",
            "    use_proxy: ${16|true,false|}",
            "    use_ssl: ${17|true,false|}",
            "    username: ${18:admin}",
            "    validate_certs: ${19|true,false|}",
            "$0"
        ],
        "description": "Manage action rule profiles (rtctrl:AttrP)",
        "scope": "ansible"
    },
    "Manage End Point (EP) retention protocol policies (fv:EpRetPol)": {
        "prefix": [
            "cisco.aci.aci_tenant_ep_retention_policy",
            "Manage End Point (EP) retention protocol policies (fv:EpRetPol)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_tenant_ep_retention_policy:",
            "    annotation: ${2:orchestrator:ansible}",
            "    bounce_age: ${3:int}",
            "    bounce_trigger: ${4:string}",
            "    certificate_name: ${5:string}",
            "    description: ${6:string}",
            "    epr_policy: ${7:string}",
            "    hold_interval: ${8:int}",
            "    host: ${9:string}",
            "    local_ep_interval: ${10:int}",
            "    move_frequency: ${11:int}",
            "    name_alias: ${12:string}",
            "    output_level: ${13|normal,debug,info|}",
            "    output_path: ${14:string}",
            "    owner_key: ${15:string}",
            "    owner_tag: ${16:string}",
            "    password: ${17:string}",
            "    port: ${18:int}",
            "    private_key: ${19:string}",
            "    remote_ep_interval: ${20:int}",
            "    state: ${21|present,absent,query|}",
            "    tenant: ${22:string}",
            "    timeout: ${23:30}",
            "    use_proxy: ${24|true,false|}",
            "    use_ssl: ${25|true,false|}",
            "    username: ${26:admin}",
            "    validate_certs: ${27|true,false|}",
            "$0"
        ],
        "description": "Manage End Point (EP) retention protocol policies (fv:EpRetPol)",
        "scope": "ansible"
    },
    "Manage SPAN destination groups (span:DestGrp)": {
        "prefix": [
            "cisco.aci.aci_tenant_span_dst_group",
            "Manage SPAN destination groups (span:DestGrp)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_tenant_span_dst_group:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    description: ${4:string}",
            "    destination_group: ${6:string}",
            "    destination_ip: ${7:string}",
            "    dscp: ${8:string}",
            "    flow_id: ${9:int}",
            "    host: ${10:string}",
            "    mtu: ${11:int}",
            "    name_alias: ${12:string}",
            "    output_level: ${13|normal,debug,info|}",
            "    output_path: ${14:string}",
            "    owner_key: ${15:string}",
            "    owner_tag: ${16:string}",
            "    password: ${17:string}",
            "    port: ${18:int}",
            "    private_key: ${19:string}",
            "    source_ip: ${20:string}",
            "    span_version: ${21:string}",
            "    state: ${22|present,absent,query|}",
            "    tenant: ${23:string}",
            "    timeout: ${24:30}",
            "    ttl: ${25:int}",
            "    use_proxy: ${26|true,false|}",
            "    use_ssl: ${27|true,false|}",
            "    username: ${28:admin}",
            "    validate_certs: ${29|true,false|}",
            "    version_enforced: ${30|false,true|}",
            "$0"
        ],
        "description": "Manage SPAN destination groups (span:DestGrp)",
        "scope": "ansible"
    },
    "Manage SPAN source groups (span:SrcGrp)": {
        "prefix": [
            "cisco.aci.aci_tenant_span_src_group",
            "Manage SPAN source groups (span:SrcGrp)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_tenant_span_src_group:",
            "    admin_state: ${2|false,true|}",
            "    annotation: ${3:orchestrator:ansible}",
            "    certificate_name: ${4:string}",
            "    description: ${5:string}",
            "    dst_group: ${6:string}",
            "    host: ${7:string}",
            "    name_alias: ${8:string}",
            "    output_level: ${9|normal,debug,info|}",
            "    output_path: ${10:string}",
            "    owner_key: ${11:string}",
            "    owner_tag: ${12:string}",
            "    password: ${13:string}",
            "    port: ${14:int}",
            "    private_key: ${15:string}",
            "    src_group: ${16:string}",
            "    state: ${17|present,absent,query|}",
            "    tenant: ${18:string}",
            "    timeout: ${19:30}",
            "    use_proxy: ${20|true,false|}",
            "    use_ssl: ${21|true,false|}",
            "    username: ${22:admin}",
            "    validate_certs: ${23|true,false|}",
            "$0"
        ],
        "description": "Manage SPAN source groups (span:SrcGrp)",
        "scope": "ansible"
    },
    "Manage SPAN source group sources (span:Src)": {
        "prefix": [
            "cisco.aci.aci_tenant_span_src_group_src",
            "Manage SPAN source group sources (span:Src)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_tenant_span_src_group_src:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    description: ${4:string}",
            "    direction: ${5:string}",
            "    host: ${6:string}",
            "    name: ${7:string}",
            "    output_level: ${8|normal,debug,info|}",
            "    output_path: ${9:string}",
            "    owner_key: ${10:string}",
            "    owner_tag: ${11:string}",
            "    password: ${12:string}",
            "    port: ${13:int}",
            "    private_key: ${14:string}",
            "    src_ap: ${15:string}",
            "    src_epg: ${16:string}",
            "    src_group: ${17:string}",
            "    state: ${18|present,absent,query|}",
            "    tenant: ${19:string}",
            "    timeout: ${20:30}",
            "    use_proxy: ${21|true,false|}",
            "    use_ssl: ${22|true,false|}",
            "    username: ${23:admin}",
            "    validate_certs: ${24|true,false|}",
            "$0"
        ],
        "description": "Manage SPAN source group sources (span:Src)",
        "scope": "ansible"
    },
    "Bind SPAN source groups to destination groups (span:SpanLbl)": {
        "prefix": [
            "cisco.aci.aci_tenant_span_src_group_to_dst_group",
            "Bind SPAN source groups to destination groups (span:SpanLbl)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_tenant_span_src_group_to_dst_group:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    description: ${4:string}",
            "    dst_group: ${5:string}",
            "    host: ${6:string}",
            "    name_alias: ${7:string}",
            "    output_level: ${8|normal,debug,info|}",
            "    output_path: ${9:string}",
            "    owner_key: ${10:string}",
            "    owner_tag: ${11:string}",
            "    password: ${12:string}",
            "    port: ${13:int}",
            "    private_key: ${14:string}",
            "    src_group: ${15:string}",
            "    state: ${16|present,absent,query|}",
            "    tenant: ${17:string}",
            "    timeout: ${18:30}",
            "    use_proxy: ${19|true,false|}",
            "    use_ssl: ${20|true,false|}",
            "    username: ${21:admin}",
            "    validate_certs: ${22|true,false|}",
            "$0"
        ],
        "description": "Bind SPAN source groups to destination groups (span:SpanLbl)",
        "scope": "ansible"
    },
    "Manage VLAN pools (fvns:VlanInstP)": {
        "prefix": [
            "cisco.aci.aci_vlan_pool",
            "Manage VLAN pools (fvns:VlanInstP)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_vlan_pool:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    description: ${4:string}",
            "    host: ${5:string}",
            "    name_alias: ${6:string}",
            "    output_level: ${7|normal,debug,info|}",
            "    output_path: ${8:string}",
            "    owner_key: ${9:string}",
            "    owner_tag: ${10:string}",
            "    password: ${11:string}",
            "    pool: ${12:string}",
            "    pool_allocation_mode: ${13:string}",
            "    port: ${14:int}",
            "    private_key: ${15:string}",
            "    state: ${16|present,absent,query|}",
            "    timeout: ${17:30}",
            "    use_proxy: ${18|true,false|}",
            "    use_ssl: ${19|true,false|}",
            "    username: ${20:admin}",
            "    validate_certs: ${21|true,false|}",
            "$0"
        ],
        "description": "Manage VLAN pools (fvns:VlanInstP)",
        "scope": "ansible"
    },
    "Manage encap blocks assigned to VLAN pools (fvns:EncapBlk)": {
        "prefix": [
            "cisco.aci.aci_vlan_pool_encap_block",
            "Manage encap blocks assigned to VLAN pools (fvns:EncapBlk)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_vlan_pool_encap_block:",
            "    allocation_mode: ${2:string}",
            "    annotation: ${3:orchestrator:ansible}",
            "    block_end: ${4:int}",
            "    block_name: ${5:string}",
            "    block_start: ${6:int}",
            "    certificate_name: ${7:string}",
            "    description: ${8:string}",
            "    host: ${9:string}",
            "    name_alias: ${10:string}",
            "    output_level: ${11|normal,debug,info|}",
            "    output_path: ${12:string}",
            "    password: ${13:string}",
            "    pool: ${14:string}",
            "    pool_allocation_mode: ${15:string}",
            "    port: ${16:int}",
            "    private_key: ${17:string}",
            "    state: ${18|present,absent,query|}",
            "    timeout: ${19:30}",
            "    use_proxy: ${20|true,false|}",
            "    use_ssl: ${21|true,false|}",
            "    username: ${22:admin}",
            "    validate_certs: ${23|true,false|}",
            "$0"
        ],
        "description": "Manage encap blocks assigned to VLAN pools (fvns:EncapBlk)",
        "scope": "ansible"
    },
    "Manage VMM Controller for virtual domains profiles (vmm:CtrlrP)": {
        "prefix": [
            "cisco.aci.aci_vmm_controller",
            "Manage VMM Controller for virtual domains profiles (vmm:CtrlrP)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_vmm_controller:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    controller_hostname: ${4:string}",
            "    credentials: ${5:string}",
            "    datacenter: ${6:string}",
            "    domain: ${7:string}",
            "    dvs_version: ${8:string}",
            "    host: ${9:string}",
            "    inband_management_epg: ${10:string}",
            "    name: ${11:string}",
            "    name_alias: ${12:string}",
            "    output_level: ${13|normal,debug,info|}",
            "    output_path: ${14:string}",
            "    password: ${15:string}",
            "    port: ${16:int}",
            "    private_key: ${17:string}",
            "    state: ${18|present,absent,query|}",
            "    stats_collection: ${19|disabled,enabled|}",
            "    timeout: ${20:30}",
            "    use_proxy: ${21|true,false|}",
            "    use_ssl: ${22|true,false|}",
            "    username: ${23:admin}",
            "    validate_certs: ${24|true,false|}",
            "    vm_provider: ${25:string}",
            "$0"
        ],
        "description": "Manage VMM Controller for virtual domains profiles (vmm:CtrlrP)",
        "scope": "ansible"
    },
    "Manage virtual domain credential profiles (vmm:UsrAccP)": {
        "prefix": [
            "cisco.aci.aci_vmm_credential",
            "Manage virtual domain credential profiles (vmm:UsrAccP)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_vmm_credential:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    credential_password: ${4:string}",
            "    credential_username: ${5:string}",
            "    description: ${6:string}",
            "    domain: ${7:string}",
            "    host: ${8:string}",
            "    name: ${9:string}",
            "    name_alias: ${10:string}",
            "    output_level: ${11|normal,debug,info|}",
            "    output_path: ${12:string}",
            "    owner_key: ${13:string}",
            "    owner_tag: ${14:string}",
            "    password: ${15:string}",
            "    port: ${16:int}",
            "    private_key: ${17:string}",
            "    state: ${18|present,absent,query|}",
            "    timeout: ${19:30}",
            "    use_proxy: ${20|true,false|}",
            "    use_ssl: ${21|true,false|}",
            "    username: ${22:admin}",
            "    validate_certs: ${23|true,false|}",
            "    vm_provider: ${24:string}",
            "$0"
        ],
        "description": "Manage virtual domain credential profiles (vmm:UsrAccP)",
        "scope": "ansible"
    },
    "Manage VMM uplinks (vmm:UplinkP)": {
        "prefix": [
            "cisco.aci.aci_vmm_uplink",
            "Manage VMM uplinks (vmm:UplinkP)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_vmm_uplink:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    domain: ${4:string}",
            "    host: ${5:string}",
            "    output_level: ${6|normal,debug,info|}",
            "    output_path: ${7:string}",
            "    password: ${8:string}",
            "    port: ${9:int}",
            "    private_key: ${10:string}",
            "    state: ${11|present,absent,query|}",
            "    timeout: ${12:30}",
            "    uplink_id: ${13:int}",
            "    uplink_name: ${14:string}",
            "    use_proxy: ${15|true,false|}",
            "    use_ssl: ${16|true,false|}",
            "    username: ${17:admin}",
            "    validate_certs: ${18|true,false|}",
            "$0"
        ],
        "description": "Manage VMM uplinks (vmm:UplinkP)",
        "scope": "ansible"
    },
    "Manage VMM uplink containers (vmm:UplinkPCont)": {
        "prefix": [
            "cisco.aci.aci_vmm_uplink_container",
            "Manage VMM uplink containers (vmm:UplinkPCont)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_vmm_uplink_container:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    domain: ${4:string}",
            "    host: ${5:string}",
            "    num_of_uplinks: ${6:int}",
            "    output_level: ${7|normal,debug,info|}",
            "    output_path: ${8:string}",
            "    password: ${9:string}",
            "    port: ${10:int}",
            "    private_key: ${11:string}",
            "    state: ${12|present,absent,query|}",
            "    timeout: ${13:30}",
            "    use_proxy: ${14|true,false|}",
            "    use_ssl: ${15|true,false|}",
            "    username: ${16:admin}",
            "    validate_certs: ${17|true,false|}",
            "$0"
        ],
        "description": "Manage VMM uplink containers (vmm:UplinkPCont)",
        "scope": "ansible"
    },
    "Manage vSwitch policy for VMware virtual domains profiles (vmm:DomP)": {
        "prefix": [
            "cisco.aci.aci_vmm_vswitch_policy",
            "Manage vSwitch policy for VMware virtual domains profiles (vmm:DomP)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_vmm_vswitch_policy:",
            "    annotation: ${2:orchestrator:ansible}",
            "    cdp_policy: ${3:string}",
            "    certificate_name: ${4:string}",
            "    domain: ${5:string}",
            "    enhanced_lag:",
            "      - ${6:element}",
            "    host: ${7:string}",
            "    lldp_policy: ${8:string}",
            "    mtu_policy: ${9:string}",
            "    output_level: ${11|normal,debug,info|}",
            "    output_path: ${12:string}",
            "    owner_key: ${13:string}",
            "    owner_tag: ${14:string}",
            "    password: ${15:string}",
            "    port: ${16:int}",
            "    port_channel_policy: ${17:string}",
            "    private_key: ${18:string}",
            "    state: ${19|present,absent,query|}",
            "    stp_policy: ${20:string}",
            "    timeout: ${21:30}",
            "    use_proxy: ${22|true,false|}",
            "    use_ssl: ${23|true,false|}",
            "    username: ${24:admin}",
            "    validate_certs: ${25|true,false|}",
            "    vm_provider: ${26:string}",
            "$0"
        ],
        "description": "Manage vSwitch policy for VMware virtual domains profiles (vmm:DomP)",
        "scope": "ansible"
    },
    "Manage contexts or VRFs (fv:Ctx)": {
        "prefix": [
            "cisco.aci.aci_vrf",
            "Manage contexts or VRFs (fv:Ctx)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_vrf:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    description: ${4:string}",
            "    host: ${5:string}",
            "    match_type: ${6:string}",
            "    name_alias: ${7:string}",
            "    output_level: ${8|normal,debug,info|}",
            "    output_path: ${9:string}",
            "    owner_key: ${10:string}",
            "    owner_tag: ${11:string}",
            "    password: ${12:string}",
            "    policy_control_direction: ${13:string}",
            "    policy_control_preference: ${14:string}",
            "    port: ${15:int}",
            "    preferred_group: ${16:string}",
            "    private_key: ${17:string}",
            "    state: ${18|present,absent,query|}",
            "    tenant: ${19:string}",
            "    timeout: ${20:30}",
            "    use_proxy: ${21|true,false|}",
            "    use_ssl: ${22|true,false|}",
            "    username: ${23:admin}",
            "    validate_certs: ${24|true,false|}",
            "    vrf: ${25:string}",
            "$0"
        ],
        "description": "Manage contexts or VRFs (fv:Ctx)",
        "scope": "ansible"
    },
    "Attach contracts to vzAny (vz:RsAnyToProv, vz:RsAnyToCons, vz:RsAnyToConsIf)": {
        "prefix": [
            "cisco.aci.aci_vzany_to_contract",
            "Attach contracts to vzAny (vz:RsAnyToProv, vz:RsAnyToCons, vz:RsAnyToConsIf)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  cisco.aci.aci_vzany_to_contract:",
            "    annotation: ${2:orchestrator:ansible}",
            "    certificate_name: ${3:string}",
            "    contract: ${4:string}",
            "    host: ${5:string}",
            "    output_level: ${6|normal,debug,info|}",
            "    output_path: ${7:string}",
            "    password: ${8:string}",
            "    port: ${9:int}",
            "    private_key: ${10:string}",
            "    state: ${11|present,absent,query|}",
            "    tenant: ${12:string}",
            "    timeout: ${13:30}",
            "    type: ${14:string}",
            "    use_proxy: ${15|true,false|}",
            "    use_ssl: ${16|true,false|}",
            "    username: ${17:admin}",
            "    validate_certs: ${18|true,false|}",
            "    vrf: ${19:string}",
            "$0"
        ],
        "description": "Attach contracts to vzAny (vz:RsAnyToProv, vz:RsAnyToCons, vz:RsAnyToConsIf)",
        "scope": "ansible"
    }
}