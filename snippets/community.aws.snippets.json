{
    "Performs validation of IAM policies": {
        "prefix": [
            "community.aws.accessanalyzer_validate_policy_info",
            "Performs validation of IAM policies"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.accessanalyzer_validate_policy_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    locale: ${7:EN}",
            "    policy_type: ${9|identity,resource,service_control|}",
            "    profile: ${10:string}",
            "    region: ${11:string}",
            "    resource_type: ${12:string}",
            "    results_filter:",
            "      - ${13:element}",
            "    secret_key: ${14:string}",
            "    session_token: ${15:string}",
            "    validate_certs: ${16|true,false|}",
            "$0"
        ],
        "description": "Performs validation of IAM policies",
        "scope": "ansible"
    },
    "Upload and delete certificates in the AWS Certificate Manager service": {
        "prefix": [
            "community.aws.acm_certificate",
            "Upload and delete certificates in the AWS Certificate Manager service"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.acm_certificate:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    certificate: ${5:string}",
            "    certificate_arn: ${6:string}",
            "    certificate_chain: ${7:string}",
            "    debug_botocore_endpoint_logs: ${8|false,true|}",
            "    domain_name: ${9:string}",
            "    endpoint_url: ${10:string}",
            "    name_tag: ${11:string}",
            "    private_key: ${12:string}",
            "    profile: ${13:string}",
            "    purge_tags: ${14|true,false|}",
            "    region: ${15:string}",
            "    secret_key: ${16:string}",
            "    session_token: ${17:string}",
            "    state: ${18|present,absent|}",
            "    validate_certs: ${20|true,false|}",
            "$0"
        ],
        "description": "Upload and delete certificates in the AWS Certificate Manager service",
        "scope": "ansible"
    },
    "Retrieve certificate information from AWS Certificate Manager service": {
        "prefix": [
            "community.aws.acm_certificate_info",
            "Retrieve certificate information from AWS Certificate Manager service"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.acm_certificate_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    certificate_arn: ${5:string}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    domain_name: ${7:string}",
            "    endpoint_url: ${8:string}",
            "    profile: ${9:string}",
            "    region: ${10:string}",
            "    secret_key: ${11:string}",
            "    session_token: ${12:string}",
            "    statuses:",
            "      - ${13:element}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "Retrieve certificate information from AWS Certificate Manager service",
        "scope": "ansible"
    },
    "Manage AWS API Gateway APIs": {
        "prefix": [
            "community.aws.api_gateway",
            "Manage AWS API Gateway APIs"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.api_gateway:",
            "    access_key: ${2:string}",
            "    api_id: ${3:string}",
            "    aws_ca_bundle: ${4:path}",
            "    cache_enabled: ${6|false,true|}",
            "    cache_size: ${7|0.5,1.6,6.1,13.5,28.4,58.2,118,237|}",
            "    debug_botocore_endpoint_logs: ${8|false,true|}",
            "    deploy_desc: ${9:Automatic deployment by Ansible.}",
            "    endpoint_type: ${10|EDGE,REGIONAL,PRIVATE|}",
            "    endpoint_url: ${11:string}",
            "    profile: ${12:string}",
            "    region: ${13:string}",
            "    secret_key: ${14:string}",
            "    session_token: ${15:string}",
            "    stage: ${16:string}",
            "    state: ${19|present,absent|}",
            "    swagger_file: ${21:path}",
            "    swagger_text: ${22:string}",
            "    tracing_enabled: ${23|false,true|}",
            "    validate_certs: ${24|true,false|}",
            "$0"
        ],
        "description": "Manage AWS API Gateway APIs",
        "scope": "ansible"
    },
    "Manage AWS API Gateway custom domains": {
        "prefix": [
            "community.aws.api_gateway_domain",
            "Manage AWS API Gateway custom domains"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.api_gateway_domain:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    certificate_arn: ${5:string}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    domain_mappings:",
            "      - ${7:element}",
            "    domain_name: ${8:string}",
            "    endpoint_type: ${9|EDGE,REGIONAL,PRIVATE|}",
            "    endpoint_url: ${10:string}",
            "    profile: ${11:string}",
            "    region: ${12:string}",
            "    secret_key: ${13:string}",
            "    security_policy: ${14|TLS_1_2,TLS_1_0|}",
            "    session_token: ${15:string}",
            "    state: ${16|present,absent|}",
            "    validate_certs: ${17|true,false|}",
            "$0"
        ],
        "description": "Manage AWS API Gateway custom domains",
        "scope": "ansible"
    },
    "Manage Application Auto Scaling Scaling Policies": {
        "prefix": [
            "community.aws.application_autoscaling_policy",
            "Manage Application Auto Scaling Scaling Policies"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.application_autoscaling_policy:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    maximum_tasks: ${7:int}",
            "    minimum_tasks: ${8:int}",
            "    override_task_capacity: ${9|false,true|}",
            "    policy_name: ${10:string}",
            "    policy_type: ${11:string}",
            "    profile: ${12:string}",
            "    region: ${13:string}",
            "    resource_id: ${14:string}",
            "    scalable_dimension: ${15:string}",
            "    secret_key: ${16:string}",
            "    service_namespace: ${17:string}",
            "    session_token: ${18:string}",
            "    state: ${19:string}",
            "    validate_certs: ${22|true,false|}",
            "$0"
        ],
        "description": "Manage Application Auto Scaling Scaling Policies",
        "scope": "ansible"
    },
    "Completes the lifecycle action of an instance": {
        "prefix": [
            "community.aws.autoscaling_complete_lifecycle_action",
            "Completes the lifecycle action of an instance"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.autoscaling_complete_lifecycle_action:",
            "    access_key: ${2:string}",
            "    asg_name: ${3:string}",
            "    aws_ca_bundle: ${4:path}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    instance_id: ${8:string}",
            "    lifecycle_action_result: ${9:string}",
            "    lifecycle_hook_name: ${10:string}",
            "    profile: ${11:string}",
            "    region: ${12:string}",
            "    secret_key: ${13:string}",
            "    session_token: ${14:string}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "Completes the lifecycle action of an instance",
        "scope": "ansible"
    },
    "Start or cancel an EC2 Auto Scaling Group (ASG) instance refresh in AWS": {
        "prefix": [
            "community.aws.autoscaling_instance_refresh",
            "Start or cancel an EC2 Auto Scaling Group (ASG) instance refresh in AWS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.autoscaling_instance_refresh:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    name: ${7:string}",
            "    profile: ${9:string}",
            "    region: ${10:string}",
            "    secret_key: ${11:string}",
            "    session_token: ${12:string}",
            "    state: ${13:string}",
            "    strategy: ${14:Rolling}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "Start or cancel an EC2 Auto Scaling Group (ASG) instance refresh in AWS",
        "scope": "ansible"
    },
    "Gather information about EC2 Auto Scaling Group (ASG) Instance Refreshes in AWS": {
        "prefix": [
            "community.aws.autoscaling_instance_refresh_info",
            "Gather information about EC2 Auto Scaling Group (ASG) Instance Refreshes in AWS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.autoscaling_instance_refresh_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    ids:",
            "      - ${7:element}",
            "    max_records: ${8:int}",
            "    name: ${9:string}",
            "    next_token: ${10:string}",
            "    profile: ${11:string}",
            "    region: ${12:string}",
            "    secret_key: ${13:string}",
            "    session_token: ${14:string}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "Gather information about EC2 Auto Scaling Group (ASG) Instance Refreshes in AWS",
        "scope": "ansible"
    },
    "Create or delete AWS Autoscaling Launch Configurations": {
        "prefix": [
            "community.aws.autoscaling_launch_config",
            "Create or delete AWS Autoscaling Launch Configurations"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.autoscaling_launch_config:",
            "    access_key: ${2:string}",
            "    assign_public_ip: ${3|false,true|}",
            "    aws_ca_bundle: ${4:path}",
            "    classic_link_vpc_id: ${6:string}",
            "    classic_link_vpc_security_groups:",
            "      - ${7:element}",
            "    debug_botocore_endpoint_logs: ${8|false,true|}",
            "    ebs_optimized: ${9|false,true|}",
            "    endpoint_url: ${10:string}",
            "    image_id: ${11:string}",
            "    instance_id: ${12:string}",
            "    instance_monitoring: ${13|false,true|}",
            "    instance_profile_name: ${14:string}",
            "    instance_type: ${15:string}",
            "    kernel_id: ${16:string}",
            "    key_name: ${17:string}",
            "    name: ${18:string}",
            "    placement_tenancy: ${19:string}",
            "    profile: ${20:string}",
            "    ramdisk_id: ${21:string}",
            "    region: ${22:string}",
            "    secret_key: ${23:string}",
            "    security_groups:",
            "      - ${24:element}",
            "    session_token: ${25:string}",
            "    state: ${27|present,absent|}",
            "    user_data: ${28:string}",
            "    user_data_path: ${29:path}",
            "    validate_certs: ${30|true,false|}",
            "    volumes:",
            "      - ${31:element}",
            "    vpc_id: ${32:string}",
            "$0"
        ],
        "description": "Create or delete AWS Autoscaling Launch Configurations",
        "scope": "ansible"
    },
    "Find AWS Autoscaling Launch Configurations": {
        "prefix": [
            "community.aws.autoscaling_launch_config_find",
            "Find AWS Autoscaling Launch Configurations"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.autoscaling_launch_config_find:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    limit: ${7:int}",
            "    name_regex: ${8:string}",
            "    profile: ${9:string}",
            "    region: ${10:string}",
            "    secret_key: ${11:string}",
            "    session_token: ${12:string}",
            "    sort_order: ${13|ascending,descending|}",
            "    validate_certs: ${14|true,false|}",
            "$0"
        ],
        "description": "Find AWS Autoscaling Launch Configurations",
        "scope": "ansible"
    },
    "Gather information about AWS Autoscaling Launch Configurations": {
        "prefix": [
            "community.aws.autoscaling_launch_config_info",
            "Gather information about AWS Autoscaling Launch Configurations"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.autoscaling_launch_config_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    name:",
            "      - ${7:element}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    secret_key: ${10:string}",
            "    session_token: ${11:string}",
            "    sort: ${12:string}",
            "    sort_end: ${13:int}",
            "    sort_order: ${14|ascending,descending|}",
            "    sort_start: ${15:int}",
            "    validate_certs: ${16|true,false|}",
            "$0"
        ],
        "description": "Gather information about AWS Autoscaling Launch Configurations",
        "scope": "ansible"
    },
    "Create, delete or update AWS ASG Lifecycle Hooks": {
        "prefix": [
            "community.aws.autoscaling_lifecycle_hook",
            "Create, delete or update AWS ASG Lifecycle Hooks"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.autoscaling_lifecycle_hook:",
            "    access_key: ${2:string}",
            "    autoscaling_group_name: ${3:string}",
            "    aws_ca_bundle: ${4:path}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    default_result: ${7|ABANDON,CONTINUE|}",
            "    endpoint_url: ${8:string}",
            "    heartbeat_timeout: ${9:int}",
            "    lifecycle_hook_name: ${10:string}",
            "    notification_meta_data: ${11:string}",
            "    notification_target_arn: ${12:string}",
            "    profile: ${13:string}",
            "    region: ${14:string}",
            "    role_arn: ${15:string}",
            "    secret_key: ${16:string}",
            "    session_token: ${17:string}",
            "    state: ${18|present,absent|}",
            "    transition: ${19:string}",
            "    validate_certs: ${20|true,false|}",
            "$0"
        ],
        "description": "Create, delete or update AWS ASG Lifecycle Hooks",
        "scope": "ansible"
    },
    "Create or delete AWS scaling policies for Autoscaling groups": {
        "prefix": [
            "community.aws.autoscaling_policy",
            "Create or delete AWS scaling policies for Autoscaling groups"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.autoscaling_policy:",
            "    access_key: ${2:string}",
            "    adjustment_type: ${3:string}",
            "    asg_name: ${4:string}",
            "    aws_ca_bundle: ${5:path}",
            "    cooldown: ${7:int}",
            "    debug_botocore_endpoint_logs: ${8|false,true|}",
            "    endpoint_url: ${9:string}",
            "    estimated_instance_warmup: ${10:int}",
            "    metric_aggregation: ${11|Average,Minimum,Maximum|}",
            "    min_adjustment_step: ${12:int}",
            "    name: ${13:string}",
            "    policy_type: ${14|SimpleScaling,StepScaling,TargetTrackingScaling|}",
            "    profile: ${15:string}",
            "    region: ${16:string}",
            "    scaling_adjustment: ${17:int}",
            "    secret_key: ${18:string}",
            "    session_token: ${19:string}",
            "    state: ${20|present,absent|}",
            "    step_adjustments:",
            "      - ${21:element}",
            "    validate_certs: ${23|true,false|}",
            "$0"
        ],
        "description": "Create or delete AWS scaling policies for Autoscaling groups",
        "scope": "ansible"
    },
    "Create, modify and delete ASG scheduled scaling actions": {
        "prefix": [
            "community.aws.autoscaling_scheduled_action",
            "Create, modify and delete ASG scheduled scaling actions"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.autoscaling_scheduled_action:",
            "    access_key: ${2:string}",
            "    autoscaling_group_name: ${3:string}",
            "    aws_ca_bundle: ${4:path}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    desired_capacity: ${7:int}",
            "    end_time: ${8:string}",
            "    endpoint_url: ${9:string}",
            "    max_size: ${10:int}",
            "    min_size: ${11:int}",
            "    profile: ${12:string}",
            "    recurrence: ${13:string}",
            "    region: ${14:string}",
            "    scheduled_action_name: ${15:string}",
            "    secret_key: ${16:string}",
            "    session_token: ${17:string}",
            "    start_time: ${18:string}",
            "    state: ${19|present,absent|}",
            "    time_zone: ${20:string}",
            "    validate_certs: ${21|true,false|}",
            "$0"
        ],
        "description": "Create, modify and delete ASG scheduled scaling actions",
        "scope": "ansible"
    },
    "Gather information about AWS regions": {
        "prefix": [
            "community.aws.aws_region_info",
            "Gather information about AWS regions"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.aws_region_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    secret_key: ${10:string}",
            "    session_token: ${11:string}",
            "    validate_certs: ${12|true,false|}",
            "$0"
        ],
        "description": "Gather information about AWS regions",
        "scope": "ansible"
    },
    "Manage AWS Batch Compute Environments": {
        "prefix": [
            "community.aws.batch_compute_environment",
            "Manage AWS Batch Compute Environments"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.batch_compute_environment:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    bid_percentage: ${5:int}",
            "    compute_environment_name: ${6:string}",
            "    compute_environment_state: ${7|ENABLED,DISABLED|}",
            "    compute_resource_type: ${8:string}",
            "    debug_botocore_endpoint_logs: ${9|false,true|}",
            "    desiredv_cpus: ${10:int}",
            "    ec2_key_pair: ${11:string}",
            "    endpoint_url: ${12:string}",
            "    image_id: ${13:string}",
            "    instance_role: ${14:string}",
            "    instance_types:",
            "      - ${15:element}",
            "    maxv_cpus: ${16:int}",
            "    minv_cpus: ${17:int}",
            "    profile: ${18:string}",
            "    region: ${19:string}",
            "    secret_key: ${20:string}",
            "    security_group_ids:",
            "      - ${21:element}",
            "    service_role: ${22:string}",
            "    session_token: ${23:string}",
            "    spot_iam_fleet_role: ${24:string}",
            "    state: ${25|present,absent|}",
            "    subnets:",
            "      - ${26:element}",
            "    type: ${28:string}",
            "    validate_certs: ${29|true,false|}",
            "$0"
        ],
        "description": "Manage AWS Batch Compute Environments",
        "scope": "ansible"
    },
    "Manage AWS Batch Job Definitions": {
        "prefix": [
            "community.aws.batch_job_definition",
            "Manage AWS Batch Job Definitions"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.batch_job_definition:",
            "    access_key: ${2:string}",
            "    attempts: ${3:int}",
            "    aws_ca_bundle: ${4:path}",
            "    command:",
            "      - ${6:element}",
            "    debug_botocore_endpoint_logs: ${7|false,true|}",
            "    endpoint_url: ${8:string}",
            "    environment:",
            "      - ${9:element}",
            "    image: ${10:string}",
            "    job_definition_arn: ${11:string}",
            "    job_definition_name: ${12:string}",
            "    job_role_arn: ${13:string}",
            "    memory: ${14:int}",
            "    mount_points:",
            "      - ${15:element}",
            "    privileged: ${17:string}",
            "    profile: ${18:string}",
            "    readonly_root_filesystem: ${19:string}",
            "    region: ${20:string}",
            "    secret_key: ${21:string}",
            "    session_token: ${22:string}",
            "    state: ${23|present,absent|}",
            "    type: ${24:string}",
            "    ulimits:",
            "      - ${25:element}",
            "    user: ${26:string}",
            "    validate_certs: ${27|true,false|}",
            "    vcpus: ${28:int}",
            "    volumes:",
            "      - ${29:element}",
            "$0"
        ],
        "description": "Manage AWS Batch Job Definitions",
        "scope": "ansible"
    },
    "Manage AWS Batch Job Queues": {
        "prefix": [
            "community.aws.batch_job_queue",
            "Manage AWS Batch Job Queues"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.batch_job_queue:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    compute_environment_order:",
            "      - ${5:element}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    job_queue_name: ${8:string}",
            "    job_queue_state: ${9|ENABLED,DISABLED|}",
            "    priority: ${10:int}",
            "    profile: ${11:string}",
            "    region: ${12:string}",
            "    secret_key: ${13:string}",
            "    session_token: ${14:string}",
            "    state: ${15|present,absent|}",
            "    validate_certs: ${16|true,false|}",
            "$0"
        ],
        "description": "Manage AWS Batch Job Queues",
        "scope": "ansible"
    },
    "Read a value from CloudFormation Exports": {
        "prefix": [
            "community.aws.cloudformation_exports_info",
            "Read a value from CloudFormation Exports"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.cloudformation_exports_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    profile: ${7:string}",
            "    region: ${8:string}",
            "    secret_key: ${9:string}",
            "    session_token: ${10:string}",
            "    validate_certs: ${11|true,false|}",
            "$0"
        ],
        "description": "Read a value from CloudFormation Exports",
        "scope": "ansible"
    },
    "Manage groups of CloudFormation stacks": {
        "prefix": [
            "community.aws.cloudformation_stack_set",
            "Manage groups of CloudFormation stacks"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.cloudformation_stack_set:",
            "    access_key: ${2:string}",
            "    accounts:",
            "      - ${3:element}",
            "    administration_role_arn: ${4:string}",
            "    aws_ca_bundle: ${5:path}",
            "    capabilities:",
            "      - ${7:element}",
            "    debug_botocore_endpoint_logs: ${8|false,true|}",
            "    description: ${9:string}",
            "    endpoint_url: ${10:string}",
            "    execution_role_name: ${11:string}",
            "    name: ${13:string}",
            "    profile: ${15:string}",
            "    purge_stacks: ${16|true,false|}",
            "    region: ${17:string}",
            "    regions:",
            "      - ${18:element}",
            "    secret_key: ${19:string}",
            "    session_token: ${20:string}",
            "    state: ${21|present,absent|}",
            "    template: ${23:path}",
            "    template_body: ${24:string}",
            "    template_url: ${25:string}",
            "    validate_certs: ${26|true,false|}",
            "    wait: ${27|false,true|}",
            "    wait_timeout: ${28:900}",
            "$0"
        ],
        "description": "Manage groups of CloudFormation stacks",
        "scope": "ansible"
    },
    "Create, update and delete AWS CloudFront distributions": {
        "prefix": [
            "community.aws.cloudfront_distribution",
            "Create, update and delete AWS CloudFront distributions"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.cloudfront_distribution:",
            "    access_key: ${2:string}",
            "    alias: ${3:string}",
            "    aliases:",
            "      - ${4:element}",
            "    aws_ca_bundle: ${5:path}",
            "    cache_behaviors:",
            "      - ${7:element}",
            "    caller_reference: ${8:string}",
            "    comment: ${9:string}",
            "    custom_error_responses:",
            "      - ${10:element}",
            "    debug_botocore_endpoint_logs: ${11|false,true|}",
            "    default_origin_domain_name: ${13:string}",
            "    default_origin_path: ${14:string}",
            "    default_root_object: ${15:string}",
            "    distribution_id: ${16:string}",
            "    e_tag: ${17:string}",
            "    enabled: ${18|false,true|}",
            "    endpoint_url: ${19:string}",
            "    http_version: ${20:string}",
            "    ipv6_enabled: ${21|false,true|}",
            "    origins:",
            "      - ${23:element}",
            "    price_class: ${24:string}",
            "    profile: ${25:string}",
            "    purge_aliases: ${26|false,true|}",
            "    purge_cache_behaviors: ${27|false,true|}",
            "    purge_custom_error_responses: ${28|false,true|}",
            "    purge_origins: ${29|false,true|}",
            "    purge_tags: ${30|true,false|}",
            "    region: ${31:string}",
            "    secret_key: ${33:string}",
            "    session_token: ${34:string}",
            "    state: ${35|present,absent|}",
            "    validate_certs: ${37|true,false|}",
            "    wait: ${39|false,true|}",
            "    wait_timeout: ${40:1800}",
            "    web_acl_id: ${41:string}",
            "$0"
        ],
        "description": "Create, update and delete AWS CloudFront distributions",
        "scope": "ansible"
    },
    "Obtain facts about an AWS CloudFront distribution": {
        "prefix": [
            "community.aws.cloudfront_distribution_info",
            "Obtain facts about an AWS CloudFront distribution"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.cloudfront_distribution_info:",
            "    access_key: ${2:string}",
            "    all_lists: ${3|false,true|}",
            "    aws_ca_bundle: ${4:path}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    distribution: ${7|false,true|}",
            "    distribution_config: ${8|false,true|}",
            "    distribution_id: ${9:string}",
            "    domain_name_alias: ${10:string}",
            "    endpoint_url: ${11:string}",
            "    invalidation: ${12|false,true|}",
            "    invalidation_id: ${13:string}",
            "    list_distributions: ${14|false,true|}",
            "    list_distributions_by_web_acl_id: ${15|false,true|}",
            "    list_invalidations: ${16|false,true|}",
            "    list_origin_access_identities: ${17|false,true|}",
            "    list_streaming_distributions: ${18|false,true|}",
            "    origin_access_identity: ${19|false,true|}",
            "    origin_access_identity_config: ${20|false,true|}",
            "    origin_access_identity_id: ${21:string}",
            "    profile: ${22:string}",
            "    region: ${23:string}",
            "    secret_key: ${24:string}",
            "    session_token: ${25:string}",
            "    streaming_distribution: ${26|false,true|}",
            "    streaming_distribution_config: ${27|false,true|}",
            "    summary: ${28|false,true|}",
            "    validate_certs: ${29|true,false|}",
            "$0"
        ],
        "description": "Obtain facts about an AWS CloudFront distribution",
        "scope": "ansible"
    },
    "create invalidations for AWS CloudFront distributions": {
        "prefix": [
            "community.aws.cloudfront_invalidation",
            "create invalidations for AWS CloudFront distributions"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.cloudfront_invalidation:",
            "    access_key: ${2:string}",
            "    alias: ${3:string}",
            "    aws_ca_bundle: ${4:path}",
            "    caller_reference: ${6:None}",
            "    debug_botocore_endpoint_logs: ${7|false,true|}",
            "    distribution_id: ${8:string}",
            "    endpoint_url: ${9:string}",
            "    profile: ${10:string}",
            "    region: ${11:string}",
            "    secret_key: ${12:string}",
            "    session_token: ${13:string}",
            "    target_paths:",
            "      - ${14:element}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "create invalidations for AWS CloudFront distributions",
        "scope": "ansible"
    },
    "Create, update and delete origin access identities for a CloudFront distribution": {
        "prefix": [
            "community.aws.cloudfront_origin_access_identity",
            "Create, update and delete origin access identities for a CloudFront distribution"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.cloudfront_origin_access_identity:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    caller_reference: ${5:string}",
            "    comment: ${6:string}",
            "    debug_botocore_endpoint_logs: ${7|false,true|}",
            "    endpoint_url: ${8:string}",
            "    origin_access_identity_id: ${9:string}",
            "    profile: ${10:string}",
            "    region: ${11:string}",
            "    secret_key: ${12:string}",
            "    session_token: ${13:string}",
            "    state: ${14|present,absent|}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "Create, update and delete origin access identities for a CloudFront distribution",
        "scope": "ansible"
    },
    "Create, update and delete response headers policies to be used in a Cloudfront distribution": {
        "prefix": [
            "community.aws.cloudfront_response_headers_policy",
            "Create, update and delete response headers policies to be used in a Cloudfront distribution"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.cloudfront_response_headers_policy:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    comment: ${5:string}",
            "    debug_botocore_endpoint_logs: ${8|false,true|}",
            "    endpoint_url: ${9:string}",
            "    name: ${10:string}",
            "    profile: ${11:string}",
            "    region: ${12:string}",
            "    secret_key: ${13:string}",
            "    session_token: ${15:string}",
            "    state: ${16|present,absent|}",
            "    validate_certs: ${17|true,false|}",
            "$0"
        ],
        "description": "Create, update and delete response headers policies to be used in a Cloudfront distribution",
        "scope": "ansible"
    },
    "Create or delete an AWS CodeBuild project": {
        "prefix": [
            "community.aws.codebuild_project",
            "Create or delete an AWS CodeBuild project"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.codebuild_project:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${4:path}",
            "    debug_botocore_endpoint_logs: ${7|false,true|}",
            "    description: ${8:string}",
            "    encryption_key: ${9:string}",
            "    endpoint_url: ${10:string}",
            "    name: ${12:string}",
            "    profile: ${13:string}",
            "    purge_tags: ${14|true,false|}",
            "    region: ${15:string}",
            "    secret_key: ${17:string}",
            "    service_role: ${18:string}",
            "    session_token: ${19:string}",
            "    state: ${21|present,absent|}",
            "    tags:",
            "      - ${22:element}",
            "    timeout_in_minutes: ${23:60}",
            "    validate_certs: ${24|true,false|}",
            "$0"
        ],
        "description": "Create or delete an AWS CodeBuild project",
        "scope": "ansible"
    },
    "Manage repositories in AWS CodeCommit": {
        "prefix": [
            "community.aws.codecommit_repository",
            "Manage repositories in AWS CodeCommit"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.codecommit_repository:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    description: ${6:}",
            "    endpoint_url: ${7:string}",
            "    name: ${8:string}",
            "    profile: ${9:string}",
            "    region: ${10:string}",
            "    secret_key: ${11:string}",
            "    session_token: ${12:string}",
            "    state: ${13:string}",
            "    validate_certs: ${14|true,false|}",
            "$0"
        ],
        "description": "Manage repositories in AWS CodeCommit",
        "scope": "ansible"
    },
    "Create or delete AWS CodePipelines": {
        "prefix": [
            "community.aws.codepipeline",
            "Create or delete AWS CodePipelines"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.codepipeline:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${4:path}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    name: ${8:string}",
            "    profile: ${9:string}",
            "    region: ${10:string}",
            "    role_arn: ${11:string}",
            "    secret_key: ${12:string}",
            "    session_token: ${13:string}",
            "    stages:",
            "      - ${14:element}",
            "    state: ${15|present,absent|}",
            "    validate_certs: ${16|true,false|}",
            "    version: ${17:int}",
            "$0"
        ],
        "description": "Create or delete AWS CodePipelines",
        "scope": "ansible"
    },
    "Manage cross-account AWS Config authorizations": {
        "prefix": [
            "community.aws.config_aggregation_authorization",
            "Manage cross-account AWS Config authorizations"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.config_aggregation_authorization:",
            "    access_key: ${2:string}",
            "    authorized_account_id: ${3:string}",
            "    authorized_aws_region: ${4:string}",
            "    aws_ca_bundle: ${5:path}",
            "    debug_botocore_endpoint_logs: ${7|false,true|}",
            "    endpoint_url: ${8:string}",
            "    profile: ${9:string}",
            "    region: ${10:string}",
            "    secret_key: ${11:string}",
            "    session_token: ${12:string}",
            "    state: ${13|present,absent|}",
            "    validate_certs: ${14|true,false|}",
            "$0"
        ],
        "description": "Manage cross-account AWS Config authorizations",
        "scope": "ansible"
    },
    "Manage AWS Config aggregations across multiple accounts": {
        "prefix": [
            "community.aws.config_aggregator",
            "Manage AWS Config aggregations across multiple accounts"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.config_aggregator:",
            "    access_key: ${2:string}",
            "    account_sources:",
            "      - ${3:element}",
            "    aws_ca_bundle: ${4:path}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    name: ${8:string}",
            "    profile: ${10:string}",
            "    region: ${11:string}",
            "    secret_key: ${12:string}",
            "    session_token: ${13:string}",
            "    state: ${14|present,absent|}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "Manage AWS Config aggregations across multiple accounts",
        "scope": "ansible"
    },
    "Manage AWS Config delivery channels": {
        "prefix": [
            "community.aws.config_delivery_channel",
            "Manage AWS Config delivery channels"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.config_delivery_channel:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    delivery_frequency: ${6:string}",
            "    endpoint_url: ${7:string}",
            "    name: ${8:string}",
            "    profile: ${9:string}",
            "    region: ${10:string}",
            "    s3_bucket: ${11:string}",
            "    s3_prefix: ${12:string}",
            "    secret_key: ${13:string}",
            "    session_token: ${14:string}",
            "    sns_topic_arn: ${15:string}",
            "    state: ${16|present,absent|}",
            "    validate_certs: ${17|true,false|}",
            "$0"
        ],
        "description": "Manage AWS Config delivery channels",
        "scope": "ansible"
    },
    "Manage AWS Config Recorders": {
        "prefix": [
            "community.aws.config_recorder",
            "Manage AWS Config Recorders"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.config_recorder:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    name: ${7:string}",
            "    profile: ${8:string}",
            "    region: ${10:string}",
            "    role_arn: ${11:string}",
            "    secret_key: ${12:string}",
            "    session_token: ${13:string}",
            "    state: ${14|present,absent|}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "Manage AWS Config Recorders",
        "scope": "ansible"
    },
    "Manage AWS Config rule resources": {
        "prefix": [
            "community.aws.config_rule",
            "Manage AWS Config rule resources"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.config_rule:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    description: ${6:string}",
            "    endpoint_url: ${7:string}",
            "    execution_frequency: ${8:string}",
            "    input_parameters: ${9:string}",
            "    name: ${10:string}",
            "    profile: ${11:string}",
            "    region: ${12:string}",
            "    secret_key: ${14:string}",
            "    session_token: ${15:string}",
            "    state: ${17|present,absent|}",
            "    validate_certs: ${18|true,false|}",
            "$0"
        ],
        "description": "Manage AWS Config rule resources",
        "scope": "ansible"
    },
    "Create and manage AWS Datapipelines": {
        "prefix": [
            "community.aws.data_pipeline",
            "Create and manage AWS Datapipelines"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.data_pipeline:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    description: ${6:}",
            "    endpoint_url: ${7:string}",
            "    name: ${8:string}",
            "    objects:",
            "      - ${9:element}",
            "    parameters:",
            "      - ${10:element}",
            "    profile: ${11:string}",
            "    region: ${12:string}",
            "    secret_key: ${13:string}",
            "    session_token: ${14:string}",
            "    state: ${15|present,absent,active,inactive|}",
            "    timeout: ${17:300}",
            "    validate_certs: ${18|true,false|}",
            "    values:",
            "      - ${19:element}",
            "$0"
        ],
        "description": "Create and manage AWS Datapipelines",
        "scope": "ansible"
    },
    "Confirms the creation of a hosted DirectConnect connection": {
        "prefix": [
            "community.aws.directconnect_confirm_connection",
            "Confirms the creation of a hosted DirectConnect connection"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.directconnect_confirm_connection:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    connection_id: ${5:string}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    name: ${8:string}",
            "    profile: ${9:string}",
            "    region: ${10:string}",
            "    secret_key: ${11:string}",
            "    session_token: ${12:string}",
            "    validate_certs: ${13|true,false|}",
            "$0"
        ],
        "description": "Confirms the creation of a hosted DirectConnect connection",
        "scope": "ansible"
    },
    "Creates, deletes, modifies a DirectConnect connection": {
        "prefix": [
            "community.aws.directconnect_connection",
            "Creates, deletes, modifies a DirectConnect connection"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.directconnect_connection:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    bandwidth: ${5:string}",
            "    connection_id: ${6:string}",
            "    debug_botocore_endpoint_logs: ${7|false,true|}",
            "    endpoint_url: ${8:string}",
            "    forced_update: ${9|false,true|}",
            "    link_aggregation_group: ${10:string}",
            "    location: ${11:string}",
            "    name: ${12:string}",
            "    profile: ${13:string}",
            "    region: ${14:string}",
            "    secret_key: ${15:string}",
            "    session_token: ${16:string}",
            "    state: ${17:string}",
            "    validate_certs: ${18|true,false|}",
            "$0"
        ],
        "description": "Creates, deletes, modifies a DirectConnect connection",
        "scope": "ansible"
    },
    "Manage AWS Direct Connect gateway": {
        "prefix": [
            "community.aws.directconnect_gateway",
            "Manage AWS Direct Connect gateway"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.directconnect_gateway:",
            "    access_key: ${2:string}",
            "    amazon_asn: ${3:string}",
            "    aws_ca_bundle: ${4:path}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    direct_connect_gateway_id: ${7:string}",
            "    endpoint_url: ${8:string}",
            "    name: ${9:string}",
            "    profile: ${10:string}",
            "    region: ${11:string}",
            "    secret_key: ${12:string}",
            "    session_token: ${13:string}",
            "    state: ${14|present,absent|}",
            "    validate_certs: ${15|true,false|}",
            "    virtual_gateway_id: ${16:string}",
            "    wait_timeout: ${17:320}",
            "$0"
        ],
        "description": "Manage AWS Direct Connect gateway",
        "scope": "ansible"
    },
    "Manage Direct Connect LAG bundles": {
        "prefix": [
            "community.aws.directconnect_link_aggregation_group",
            "Manage Direct Connect LAG bundles"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.directconnect_link_aggregation_group:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    bandwidth: ${5:string}",
            "    connection_id: ${6:string}",
            "    debug_botocore_endpoint_logs: ${7|false,true|}",
            "    delete_with_disassociation: ${8|false,true|}",
            "    endpoint_url: ${9:string}",
            "    force_delete: ${10|false,true|}",
            "    link_aggregation_group_id: ${11:string}",
            "    location: ${12:string}",
            "    min_links: ${13:int}",
            "    name: ${14:string}",
            "    num_connections: ${15:int}",
            "    profile: ${16:string}",
            "    region: ${17:string}",
            "    secret_key: ${18:string}",
            "    session_token: ${19:string}",
            "    state: ${20:string}",
            "    validate_certs: ${21|true,false|}",
            "    wait: ${22|false,true|}",
            "    wait_timeout: ${23:120}",
            "$0"
        ],
        "description": "Manage Direct Connect LAG bundles",
        "scope": "ansible"
    },
    "Manage Direct Connect virtual interfaces": {
        "prefix": [
            "community.aws.directconnect_virtual_interface",
            "Manage Direct Connect virtual interfaces"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.directconnect_virtual_interface:",
            "    access_key: ${2:string}",
            "    address_type: ${3:string}",
            "    amazon_address: ${4:string}",
            "    authentication_key: ${5:string}",
            "    aws_ca_bundle: ${6:path}",
            "    bgp_asn: ${8:65000}",
            "    cidr:",
            "      - ${9:element}",
            "    customer_address: ${10:string}",
            "    debug_botocore_endpoint_logs: ${11|false,true|}",
            "    direct_connect_gateway_id: ${12:string}",
            "    endpoint_url: ${13:string}",
            "    id_to_associate: ${14:string}",
            "    name: ${15:string}",
            "    profile: ${16:string}",
            "    public: ${17|false,true|}",
            "    region: ${18:string}",
            "    secret_key: ${19:string}",
            "    session_token: ${20:string}",
            "    state: ${21:string}",
            "    validate_certs: ${22|true,false|}",
            "    virtual_gateway_id: ${23:string}",
            "    virtual_interface_id: ${24:string}",
            "    vlan: ${25:100}",
            "$0"
        ],
        "description": "Manage Direct Connect virtual interfaces",
        "scope": "ansible"
    },
    "Creates or destroys a data migration services endpoint": {
        "prefix": [
            "community.aws.dms_endpoint",
            "Creates or destroys a data migration services endpoint"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.dms_endpoint:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    certificatearn: ${5:string}",
            "    databasename: ${6:string}",
            "    debug_botocore_endpoint_logs: ${7|false,true|}",
            "    endpoint_url: ${11:string}",
            "    endpointidentifier: ${12:string}",
            "    endpointtype: ${13:string}",
            "    enginename: ${14:string}",
            "    externaltabledefinition: ${15:string}",
            "    extraconnectionattributes: ${16:string}",
            "    kmskeyid: ${18:string}",
            "    password: ${20:string}",
            "    port: ${21:int}",
            "    profile: ${22:string}",
            "    purge_tags: ${23|true,false|}",
            "    region: ${24:string}",
            "    retries: ${25:int}",
            "    secret_key: ${27:string}",
            "    servername: ${28:string}",
            "    serviceaccessrolearn: ${29:string}",
            "    session_token: ${30:string}",
            "    sslmode: ${31|none,require,verify-ca,verify-full|}",
            "    state: ${32|present,absent|}",
            "    timeout: ${34:int}",
            "    username: ${35:string}",
            "    validate_certs: ${36|true,false|}",
            "    wait: ${37|false,true|}",
            "$0"
        ],
        "description": "Creates or destroys a data migration services endpoint",
        "scope": "ansible"
    },
    "creates or destroys a data migration services subnet group": {
        "prefix": [
            "community.aws.dms_replication_subnet_group",
            "creates or destroys a data migration services subnet group"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.dms_replication_subnet_group:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    description: ${6:string}",
            "    endpoint_url: ${7:string}",
            "    identifier: ${8:string}",
            "    profile: ${9:string}",
            "    region: ${10:string}",
            "    secret_key: ${11:string}",
            "    session_token: ${12:string}",
            "    state: ${13|present,absent|}",
            "    subnet_ids:",
            "      - ${14:element}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "creates or destroys a data migration services subnet group",
        "scope": "ansible"
    },
    "Create, update or delete AWS Dynamo DB tables": {
        "prefix": [
            "community.aws.dynamodb_table",
            "Create, update or delete AWS Dynamo DB tables"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.dynamodb_table:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    billing_mode: ${5:string}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    hash_key_name: ${8:string}",
            "    hash_key_type: ${9:string}",
            "    indexes:",
            "      - ${10:element}",
            "    name: ${11:string}",
            "    profile: ${12:string}",
            "    purge_tags: ${13|true,false|}",
            "    range_key_name: ${14:string}",
            "    range_key_type: ${15:string}",
            "    read_capacity: ${16:int}",
            "    region: ${17:string}",
            "    secret_key: ${18:string}",
            "    session_token: ${19:string}",
            "    state: ${20|present,absent|}",
            "    table_class: ${21:string}",
            "    validate_certs: ${23|true,false|}",
            "    wait: ${24|true,false|}",
            "    wait_timeout: ${25:300}",
            "    write_capacity: ${26:int}",
            "$0"
        ],
        "description": "Create, update or delete AWS Dynamo DB tables",
        "scope": "ansible"
    },
    "Set TTL for a given DynamoDB table": {
        "prefix": [
            "community.aws.dynamodb_ttl",
            "Set TTL for a given DynamoDB table"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.dynamodb_ttl:",
            "    access_key: ${2:string}",
            "    attribute_name: ${3:string}",
            "    aws_ca_bundle: ${4:path}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    secret_key: ${10:string}",
            "    session_token: ${11:string}",
            "    state: ${12:string}",
            "    table_name: ${13:string}",
            "    validate_certs: ${14|true,false|}",
            "$0"
        ],
        "description": "Set TTL for a given DynamoDB table",
        "scope": "ansible"
    },
    "copies AMI between AWS regions, return new image id": {
        "prefix": [
            "community.aws.ec2_ami_copy",
            "copies AMI between AWS regions, return new image id"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.ec2_ami_copy:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    description: ${6:}",
            "    encrypted: ${7|false,true|}",
            "    endpoint_url: ${8:string}",
            "    kms_key_id: ${9:string}",
            "    name: ${10:default}",
            "    profile: ${11:string}",
            "    region: ${12:string}",
            "    secret_key: ${13:string}",
            "    session_token: ${14:string}",
            "    source_image_id: ${15:string}",
            "    source_region: ${16:string}",
            "    tag_equality: ${17|false,true|}",
            "    validate_certs: ${19|true,false|}",
            "    wait: ${20|false,true|}",
            "    wait_timeout: ${21:600}",
            "$0"
        ],
        "description": "copies AMI between AWS regions, return new image id",
        "scope": "ansible"
    },
    "Manage an AWS customer gateway": {
        "prefix": [
            "community.aws.ec2_customer_gateway",
            "Manage an AWS customer gateway"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.ec2_customer_gateway:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    bgp_asn: ${5:int}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    ip_address: ${8:string}",
            "    name: ${9:string}",
            "    profile: ${10:string}",
            "    region: ${11:string}",
            "    routing: ${12|dynamic,static|}",
            "    secret_key: ${13:string}",
            "    session_token: ${14:string}",
            "    state: ${15|present,absent|}",
            "    validate_certs: ${16|true,false|}",
            "$0"
        ],
        "description": "Manage an AWS customer gateway",
        "scope": "ansible"
    },
    "Gather information about customer gateways in AWS": {
        "prefix": [
            "community.aws.ec2_customer_gateway_info",
            "Gather information about customer gateways in AWS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.ec2_customer_gateway_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    customer_gateway_ids:",
            "      - ${5:element}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    profile: ${9:string}",
            "    region: ${10:string}",
            "    secret_key: ${11:string}",
            "    session_token: ${12:string}",
            "    validate_certs: ${13|true,false|}",
            "$0"
        ],
        "description": "Gather information about customer gateways in AWS",
        "scope": "ansible"
    },
    "Manage EC2 launch templates": {
        "prefix": [
            "community.aws.ec2_launch_template",
            "Manage EC2 launch templates"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.ec2_launch_template:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    block_device_mappings:",
            "      - ${5:element}",
            "    debug_botocore_endpoint_logs: ${8|false,true|}",
            "    default_version: ${9:latest}",
            "    disable_api_termination: ${10|false,true|}",
            "    ebs_optimized: ${11|false,true|}",
            "    elastic_gpu_specifications:",
            "      - ${12:element}",
            "    endpoint_url: ${13:string}",
            "    iam_instance_profile: ${14:string}",
            "    image_id: ${15:string}",
            "    instance_initiated_shutdown_behavior: ${16:string}",
            "    instance_type: ${18:string}",
            "    kernel_id: ${19:string}",
            "    key_name: ${20:string}",
            "    network_interfaces:",
            "      - ${23:element}",
            "    profile: ${25:string}",
            "    ram_disk_id: ${26:string}",
            "    region: ${27:string}",
            "    secret_key: ${28:string}",
            "    security_group_ids:",
            "      - ${29:element}",
            "    security_groups:",
            "      - ${30:element}",
            "    session_token: ${31:string}",
            "    source_version: ${32:latest}",
            "    state: ${33|present,absent|}",
            "    template_id: ${35:string}",
            "    template_name: ${36:string}",
            "    user_data: ${37:string}",
            "    validate_certs: ${38|true,false|}",
            "$0"
        ],
        "description": "Manage EC2 launch templates",
        "scope": "ansible"
    },
    "Create or delete an EC2 Placement Group": {
        "prefix": [
            "community.aws.ec2_placement_group",
            "Create or delete an EC2 Placement Group"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.ec2_placement_group:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    name: ${7:string}",
            "    partition_count: ${8:int}",
            "    profile: ${9:string}",
            "    region: ${10:string}",
            "    secret_key: ${11:string}",
            "    session_token: ${12:string}",
            "    state: ${13|present,absent|}",
            "    strategy: ${14|cluster,spread,partition|}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "Create or delete an EC2 Placement Group",
        "scope": "ansible"
    },
    "List EC2 Placement Group(s) details": {
        "prefix": [
            "community.aws.ec2_placement_group_info",
            "List EC2 Placement Group(s) details"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.ec2_placement_group_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    names:",
            "      - ${7:element}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    secret_key: ${10:string}",
            "    session_token: ${11:string}",
            "    validate_certs: ${12|true,false|}",
            "$0"
        ],
        "description": "List EC2 Placement Group(s) details",
        "scope": "ansible"
    },
    "Copies an EC2 snapshot and returns the new Snapshot ID": {
        "prefix": [
            "community.aws.ec2_snapshot_copy",
            "Copies an EC2 snapshot and returns the new Snapshot ID"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.ec2_snapshot_copy:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    description: ${6:}",
            "    encrypted: ${7|false,true|}",
            "    endpoint_url: ${8:string}",
            "    kms_key_id: ${9:string}",
            "    profile: ${10:string}",
            "    region: ${11:string}",
            "    secret_key: ${12:string}",
            "    session_token: ${13:string}",
            "    source_region: ${14:string}",
            "    source_snapshot_id: ${15:string}",
            "    validate_certs: ${17|true,false|}",
            "    wait: ${18|false,true|}",
            "    wait_timeout: ${19:600}",
            "$0"
        ],
        "description": "Copies an EC2 snapshot and returns the new Snapshot ID",
        "scope": "ansible"
    },
    "Create and delete AWS Transit Gateways": {
        "prefix": [
            "community.aws.ec2_transit_gateway",
            "Create and delete AWS Transit Gateways"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.ec2_transit_gateway:",
            "    access_key: ${2:string}",
            "    asn: ${3:int}",
            "    auto_associate: ${4|true,false|}",
            "    auto_attach: ${5|false,true|}",
            "    auto_propagate: ${6|true,false|}",
            "    aws_ca_bundle: ${7:path}",
            "    debug_botocore_endpoint_logs: ${9|false,true|}",
            "    description: ${10:string}",
            "    dns_support: ${11|true,false|}",
            "    endpoint_url: ${12:string}",
            "    profile: ${13:string}",
            "    purge_tags: ${14|true,false|}",
            "    region: ${15:string}",
            "    secret_key: ${16:string}",
            "    session_token: ${17:string}",
            "    state: ${18|present,absent|}",
            "    transit_gateway_id: ${20:string}",
            "    validate_certs: ${21|true,false|}",
            "    vpn_ecmp_support: ${22|true,false|}",
            "    wait: ${23|true,false|}",
            "    wait_timeout: ${24:300}",
            "$0"
        ],
        "description": "Create and delete AWS Transit Gateways",
        "scope": "ansible"
    },
    "Gather information about ec2 transit gateways in AWS": {
        "prefix": [
            "community.aws.ec2_transit_gateway_info",
            "Gather information about ec2 transit gateways in AWS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.ec2_transit_gateway_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    secret_key: ${10:string}",
            "    session_token: ${11:string}",
            "    transit_gateway_ids:",
            "      - ${12:element}",
            "    validate_certs: ${13|true,false|}",
            "$0"
        ],
        "description": "Gather information about ec2 transit gateways in AWS",
        "scope": "ansible"
    },
    "Create and delete AWS Transit Gateway VPC attachments": {
        "prefix": [
            "community.aws.ec2_transit_gateway_vpc_attachment",
            "Create and delete AWS Transit Gateway VPC attachments"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.ec2_transit_gateway_vpc_attachment:",
            "    access_key: ${2:string}",
            "    appliance_mode_support: ${3|false,true|}",
            "    aws_ca_bundle: ${4:path}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    dns_support: ${7|false,true|}",
            "    endpoint_url: ${8:string}",
            "    id: ${9:string}",
            "    ipv6_support: ${10|false,true|}",
            "    name: ${11:string}",
            "    profile: ${12:string}",
            "    purge_subnets: ${13|true,false|}",
            "    purge_tags: ${14|true,false|}",
            "    region: ${15:string}",
            "    secret_key: ${16:string}",
            "    session_token: ${17:string}",
            "    state: ${18|present,absent|}",
            "    subnets:",
            "      - ${19:element}",
            "    transit_gateway: ${21:string}",
            "    validate_certs: ${22|true,false|}",
            "    wait: ${23|true,false|}",
            "    wait_timeout: ${24:int}",
            "$0"
        ],
        "description": "Create and delete AWS Transit Gateway VPC attachments",
        "scope": "ansible"
    },
    "describes AWS Transit Gateway VPC attachments": {
        "prefix": [
            "community.aws.ec2_transit_gateway_vpc_attachment_info",
            "describes AWS Transit Gateway VPC attachments"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.ec2_transit_gateway_vpc_attachment_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    id: ${8:string}",
            "    include_deleted: ${9|false,true|}",
            "    name: ${10:string}",
            "    profile: ${11:string}",
            "    region: ${12:string}",
            "    secret_key: ${13:string}",
            "    session_token: ${14:string}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "describes AWS Transit Gateway VPC attachments",
        "scope": "ansible"
    },
    "Manage an AWS VPC Egress Only Internet gateway": {
        "prefix": [
            "community.aws.ec2_vpc_egress_igw",
            "Manage an AWS VPC Egress Only Internet gateway"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.ec2_vpc_egress_igw:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    profile: ${7:string}",
            "    region: ${8:string}",
            "    secret_key: ${9:string}",
            "    session_token: ${10:string}",
            "    state: ${11|present,absent|}",
            "    validate_certs: ${12|true,false|}",
            "    vpc_id: ${13:string}",
            "$0"
        ],
        "description": "Manage an AWS VPC Egress Only Internet gateway",
        "scope": "ansible"
    },
    "create and delete Network ACLs": {
        "prefix": [
            "community.aws.ec2_vpc_nacl",
            "create and delete Network ACLs"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.ec2_vpc_nacl:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    egress:",
            "      - ${6:element}",
            "    endpoint_url: ${7:string}",
            "    ingress:",
            "      - ${8:element}",
            "    nacl_id: ${9:string}",
            "    name: ${10:string}",
            "    profile: ${11:string}",
            "    purge_tags: ${12|true,false|}",
            "    region: ${13:string}",
            "    secret_key: ${14:string}",
            "    session_token: ${15:string}",
            "    state: ${16|present,absent|}",
            "    subnets:",
            "      - ${17:element}",
            "    validate_certs: ${19|true,false|}",
            "    vpc_id: ${20:string}",
            "$0"
        ],
        "description": "create and delete Network ACLs",
        "scope": "ansible"
    },
    "Gather information about Network ACLs in an AWS VPC": {
        "prefix": [
            "community.aws.ec2_vpc_nacl_info",
            "Gather information about Network ACLs in an AWS VPC"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.ec2_vpc_nacl_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    nacl_ids:",
            "      - ${8:element}",
            "    profile: ${9:string}",
            "    region: ${10:string}",
            "    secret_key: ${11:string}",
            "    session_token: ${12:string}",
            "    validate_certs: ${13|true,false|}",
            "$0"
        ],
        "description": "Gather information about Network ACLs in an AWS VPC",
        "scope": "ansible"
    },
    "create, delete, accept, and reject VPC peering connections between two VPCs.": {
        "prefix": [
            "community.aws.ec2_vpc_peer",
            "create, delete, accept, and reject VPC peering connections between two VPCs."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.ec2_vpc_peer:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    peer_owner_id: ${7:string}",
            "    peer_region: ${8:string}",
            "    peer_vpc_id: ${9:string}",
            "    peering_id: ${10:string}",
            "    profile: ${11:string}",
            "    purge_tags: ${12|true,false|}",
            "    region: ${13:string}",
            "    secret_key: ${14:string}",
            "    session_token: ${15:string}",
            "    state: ${16|present,absent,accept,reject|}",
            "    validate_certs: ${18|true,false|}",
            "    vpc_id: ${19:string}",
            "    wait: ${20|false,true|}",
            "$0"
        ],
        "description": "create, delete, accept, and reject VPC peering connections between two VPCs.",
        "scope": "ansible"
    },
    "Retrieves AWS VPC Peering details using AWS methods.": {
        "prefix": [
            "community.aws.ec2_vpc_peering_info",
            "Retrieves AWS VPC Peering details using AWS methods."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.ec2_vpc_peering_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    peer_connection_ids:",
            "      - ${8:element}",
            "    profile: ${9:string}",
            "    region: ${10:string}",
            "    secret_key: ${11:string}",
            "    session_token: ${12:string}",
            "    validate_certs: ${13|true,false|}",
            "$0"
        ],
        "description": "Retrieves AWS VPC Peering details using AWS methods.",
        "scope": "ansible"
    },
    "Create and delete AWS VPN Virtual Gateways": {
        "prefix": [
            "community.aws.ec2_vpc_vgw",
            "Create and delete AWS VPN Virtual Gateways"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.ec2_vpc_vgw:",
            "    access_key: ${2:string}",
            "    asn: ${3:int}",
            "    aws_ca_bundle: ${4:path}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    name: ${8:string}",
            "    profile: ${9:string}",
            "    purge_tags: ${10|true,false|}",
            "    region: ${11:string}",
            "    secret_key: ${12:string}",
            "    session_token: ${13:string}",
            "    state: ${14|present,absent|}",
            "    type: ${16|ipsec.1|}",
            "    validate_certs: ${17|true,false|}",
            "    vpc_id: ${18:string}",
            "    vpn_gateway_id: ${19:string}",
            "    wait_timeout: ${20:320}",
            "$0"
        ],
        "description": "Create and delete AWS VPN Virtual Gateways",
        "scope": "ansible"
    },
    "Gather information about virtual gateways in AWS": {
        "prefix": [
            "community.aws.ec2_vpc_vgw_info",
            "Gather information about virtual gateways in AWS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.ec2_vpc_vgw_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    secret_key: ${10:string}",
            "    session_token: ${11:string}",
            "    validate_certs: ${12|true,false|}",
            "    vpn_gateway_ids:",
            "      - ${13:element}",
            "$0"
        ],
        "description": "Gather information about virtual gateways in AWS",
        "scope": "ansible"
    },
    "Create, modify, and delete EC2 VPN connections": {
        "prefix": [
            "community.aws.ec2_vpc_vpn",
            "Create, modify, and delete EC2 VPN connections"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.ec2_vpc_vpn:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    connection_type: ${5:ipsec.1}",
            "    customer_gateway_id: ${6:string}",
            "    debug_botocore_endpoint_logs: ${7|false,true|}",
            "    delay: ${8:15}",
            "    endpoint_url: ${9:string}",
            "    profile: ${11:string}",
            "    purge_routes: ${12|false,true|}",
            "    purge_tags: ${13|true,false|}",
            "    region: ${14:string}",
            "    routes:",
            "      - ${15:element}",
            "    secret_key: ${16:string}",
            "    session_token: ${17:string}",
            "    state: ${18|present,absent|}",
            "    static_only: ${19|false,true|}",
            "    tunnel_options:",
            "      - ${21:element}",
            "    validate_certs: ${22|true,false|}",
            "    vpn_connection_id: ${23:string}",
            "    vpn_gateway_id: ${24:string}",
            "    wait_timeout: ${25:600}",
            "$0"
        ],
        "description": "Create, modify, and delete EC2 VPN connections",
        "scope": "ansible"
    },
    "Gather information about VPN Connections in AWS.": {
        "prefix": [
            "community.aws.ec2_vpc_vpn_info",
            "Gather information about VPN Connections in AWS."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.ec2_vpc_vpn_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    secret_key: ${10:string}",
            "    session_token: ${11:string}",
            "    validate_certs: ${12|true,false|}",
            "    vpn_connection_ids:",
            "      - ${13:element}",
            "$0"
        ],
        "description": "Gather information about VPN Connections in AWS.",
        "scope": "ansible"
    },
    "Gets the default administrator password for EC2 Windows instances": {
        "prefix": [
            "community.aws.ec2_win_password",
            "Gets the default administrator password for EC2 Windows instances"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.ec2_win_password:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    instance_id: ${7:string}",
            "    key_data: ${8:string}",
            "    key_file: ${9:path}",
            "    key_passphrase: ${10:string}",
            "    profile: ${11:string}",
            "    region: ${12:string}",
            "    secret_key: ${13:string}",
            "    session_token: ${14:string}",
            "    validate_certs: ${15|true,false|}",
            "    wait: ${16|false,true|}",
            "    wait_timeout: ${17:120}",
            "$0"
        ],
        "description": "Gets the default administrator password for EC2 Windows instances",
        "scope": "ansible"
    },
    "manage ecs attributes": {
        "prefix": [
            "community.aws.ecs_attribute",
            "manage ecs attributes"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.ecs_attribute:",
            "    access_key: ${2:string}",
            "    attributes:",
            "      - ${3:element}",
            "    aws_ca_bundle: ${4:path}",
            "    cluster: ${6:string}",
            "    debug_botocore_endpoint_logs: ${7|false,true|}",
            "    ec2_instance_id: ${8:string}",
            "    endpoint_url: ${9:string}",
            "    profile: ${10:string}",
            "    region: ${11:string}",
            "    secret_key: ${12:string}",
            "    session_token: ${13:string}",
            "    state: ${14|present,absent|}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "manage ecs attributes",
        "scope": "ansible"
    },
    "Create or terminate ECS clusters.": {
        "prefix": [
            "community.aws.ecs_cluster",
            "Create or terminate ECS clusters."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.ecs_cluster:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    capacity_provider_strategy:",
            "      - ${5:element}",
            "    capacity_providers:",
            "      - ${6:element}",
            "    debug_botocore_endpoint_logs: ${7|false,true|}",
            "    delay: ${8:10}",
            "    endpoint_url: ${9:string}",
            "    name: ${10:string}",
            "    profile: ${11:string}",
            "    purge_capacity_providers: ${12|false,true|}",
            "    region: ${13:string}",
            "    repeat: ${14:10}",
            "    secret_key: ${15:string}",
            "    session_token: ${16:string}",
            "    state: ${17:string}",
            "    validate_certs: ${18|true,false|}",
            "$0"
        ],
        "description": "Create or terminate ECS clusters.",
        "scope": "ansible"
    },
    "Manage Elastic Container Registry repositories": {
        "prefix": [
            "community.aws.ecs_ecr",
            "Manage Elastic Container Registry repositories"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.ecs_ecr:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${7:string}",
            "    force_absent: ${8|false,true|}",
            "    force_set_policy: ${9|false,true|}",
            "    image_tag_mutability: ${10|mutable,immutable|}",
            "    name: ${12:string}",
            "    profile: ${14:string}",
            "    purge_lifecycle_policy: ${15|false,true|}",
            "    purge_policy: ${16|false,true|}",
            "    region: ${17:string}",
            "    registry_id: ${18:string}",
            "    scan_on_push: ${19|false,true|}",
            "    secret_key: ${20:string}",
            "    session_token: ${21:string}",
            "    state: ${22|present,absent|}",
            "    validate_certs: ${23|true,false|}",
            "$0"
        ],
        "description": "Manage Elastic Container Registry repositories",
        "scope": "ansible"
    },
    "Create, terminate, start or stop a service in ECS": {
        "prefix": [
            "community.aws.ecs_service",
            "Create, terminate, start or stop a service in ECS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.ecs_service:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    capacity_provider_strategy:",
            "      - ${5:element}",
            "    client_token: ${6:}",
            "    cluster: ${7:default}",
            "    debug_botocore_endpoint_logs: ${8|false,true|}",
            "    delay: ${9:10}",
            "    desired_count: ${12:int}",
            "    endpoint_url: ${13:string}",
            "    force_deletion: ${14|false,true|}",
            "    force_new_deployment: ${15|false,true|}",
            "    health_check_grace_period_seconds: ${16:int}",
            "    launch_type: ${17:string}",
            "    load_balancers:",
            "      - ${18:element}",
            "    name: ${19:string}",
            "    placement_constraints:",
            "      - ${21:element}",
            "    placement_strategy:",
            "      - ${22:element}",
            "    platform_version: ${23:string}",
            "    profile: ${24:string}",
            "    propagate_tags: ${25:string}",
            "    region: ${26:string}",
            "    repeat: ${27:10}",
            "    role: ${28:}",
            "    scheduling_strategy: ${29:string}",
            "    secret_key: ${30:string}",
            "    service_registries:",
            "      - ${31:element}",
            "    session_token: ${32:string}",
            "    state: ${33:string}",
            "    task_definition: ${35:string}",
            "    validate_certs: ${36|true,false|}",
            "    wait: ${37|false,true|}",
            "$0"
        ],
        "description": "Create, terminate, start or stop a service in ECS",
        "scope": "ansible"
    },
    "List or describe services in ECS": {
        "prefix": [
            "community.aws.ecs_service_info",
            "List or describe services in ECS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.ecs_service_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    cluster: ${5:string}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    details: ${7|false,true|}",
            "    endpoint_url: ${8:string}",
            "    events: ${9|true,false|}",
            "    profile: ${10:string}",
            "    region: ${11:string}",
            "    secret_key: ${12:string}",
            "    service:",
            "      - ${13:element}",
            "    session_token: ${14:string}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "List or describe services in ECS",
        "scope": "ansible"
    },
    "create and remove tags on Amazon ECS resources": {
        "prefix": [
            "community.aws.ecs_tag",
            "create and remove tags on Amazon ECS resources"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.ecs_tag:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    cluster_name: ${5:string}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    profile: ${8:string}",
            "    purge_tags: ${9|false,true|}",
            "    region: ${10:string}",
            "    resource: ${11:string}",
            "    resource_type: ${12|cluster,task,service,task_definition,container|}",
            "    secret_key: ${13:string}",
            "    session_token: ${14:string}",
            "    state: ${15|present,absent|}",
            "    validate_certs: ${17|true,false|}",
            "$0"
        ],
        "description": "create and remove tags on Amazon ECS resources",
        "scope": "ansible"
    },
    "Run, start or stop a task in ECS": {
        "prefix": [
            "community.aws.ecs_task",
            "Run, start or stop a task in ECS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.ecs_task:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    cluster: ${5:default}",
            "    container_instances:",
            "      - ${6:element}",
            "    count: ${7:int}",
            "    debug_botocore_endpoint_logs: ${8|false,true|}",
            "    endpoint_url: ${9:string}",
            "    launch_type: ${10:string}",
            "    operation: ${12:string}",
            "    profile: ${14:string}",
            "    region: ${15:string}",
            "    secret_key: ${16:string}",
            "    session_token: ${17:string}",
            "    started_by: ${18:string}",
            "    task: ${20:string}",
            "    task_definition: ${21:string}",
            "    validate_certs: ${22|true,false|}",
            "    wait: ${23|false,true|}",
            "$0"
        ],
        "description": "Run, start or stop a task in ECS",
        "scope": "ansible"
    },
    "register a task definition in ecs": {
        "prefix": [
            "community.aws.ecs_taskdefinition",
            "register a task definition in ecs"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.ecs_taskdefinition:",
            "    access_key: ${2:string}",
            "    arn: ${3:string}",
            "    aws_ca_bundle: ${4:path}",
            "    containers:",
            "      - ${6:element}",
            "    cpu: ${7:string}",
            "    debug_botocore_endpoint_logs: ${8|false,true|}",
            "    endpoint_url: ${9:string}",
            "    execution_role_arn: ${10:}",
            "    family: ${11:string}",
            "    force_create: ${12|false,true|}",
            "    launch_type: ${13:string}",
            "    memory: ${14:string}",
            "    network_mode: ${15|bridge,default,host,none,awsvpc|}",
            "    placement_constraints:",
            "      - ${16:element}",
            "    profile: ${17:string}",
            "    region: ${18:string}",
            "    revision: ${19:int}",
            "    secret_key: ${20:string}",
            "    session_token: ${21:string}",
            "    state: ${22:string}",
            "    task_role_arn: ${23:}",
            "    validate_certs: ${24|true,false|}",
            "    volumes:",
            "      - ${25:element}",
            "$0"
        ],
        "description": "register a task definition in ecs",
        "scope": "ansible"
    },
    "Describe a task definition in ECS": {
        "prefix": [
            "community.aws.ecs_taskdefinition_info",
            "Describe a task definition in ECS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.ecs_taskdefinition_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    profile: ${7:string}",
            "    region: ${8:string}",
            "    secret_key: ${9:string}",
            "    session_token: ${10:string}",
            "    task_definition: ${11:string}",
            "    validate_certs: ${12|true,false|}",
            "$0"
        ],
        "description": "Describe a task definition in ECS",
        "scope": "ansible"
    },
    "create and maintain EFS file systems": {
        "prefix": [
            "community.aws.efs",
            "create and maintain EFS file systems"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.efs:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    encrypt: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    id: ${8:string}",
            "    kms_key_id: ${9:string}",
            "    name: ${10:string}",
            "    performance_mode: ${11|general_purpose,max_io|}",
            "    profile: ${12:string}",
            "    purge_tags: ${14|true,false|}",
            "    region: ${15:string}",
            "    secret_key: ${16:string}",
            "    session_token: ${17:string}",
            "    state: ${18|present,absent|}",
            "    targets:",
            "      - ${20:element}",
            "    throughput_mode: ${21:string}",
            "    transition_to_ia: ${22:string}",
            "    validate_certs: ${23|true,false|}",
            "    wait: ${24|false,true|}",
            "    wait_timeout: ${25:0}",
            "$0"
        ],
        "description": "create and maintain EFS file systems",
        "scope": "ansible"
    },
    "Get information about Amazon EFS file systems": {
        "prefix": [
            "community.aws.efs_info",
            "Get information about Amazon EFS file systems"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.efs_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    id: ${7:string}",
            "    name: ${8:string}",
            "    profile: ${9:string}",
            "    region: ${10:string}",
            "    secret_key: ${11:string}",
            "    session_token: ${12:string}",
            "    targets:",
            "      - ${14:element}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "Get information about Amazon EFS file systems",
        "scope": "ansible"
    },
    "create and remove tags on Amazon EFS resources": {
        "prefix": [
            "community.aws.efs_tag",
            "create and remove tags on Amazon EFS resources"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.efs_tag:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    profile: ${7:string}",
            "    purge_tags: ${8|false,true|}",
            "    region: ${9:string}",
            "    resource: ${10:string}",
            "    secret_key: ${11:string}",
            "    session_token: ${12:string}",
            "    state: ${13|present,absent|}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "create and remove tags on Amazon EFS resources",
        "scope": "ansible"
    },
    "Manage Elastic Kubernetes Service (EKS) Clusters": {
        "prefix": [
            "community.aws.eks_cluster",
            "Manage Elastic Kubernetes Service (EKS) Clusters"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.eks_cluster:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    name: ${7:string}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    role_arn: ${10:string}",
            "    secret_key: ${11:string}",
            "    security_groups:",
            "      - ${12:element}",
            "    session_token: ${13:string}",
            "    state: ${14|present,absent|}",
            "    subnets:",
            "      - ${15:element}",
            "    validate_certs: ${16|true,false|}",
            "    version: ${17:string}",
            "    wait: ${18|false,true|}",
            "    wait_timeout: ${19:1200}",
            "$0"
        ],
        "description": "Manage Elastic Kubernetes Service (EKS) Clusters",
        "scope": "ansible"
    },
    "Manage EKS Fargate Profile": {
        "prefix": [
            "community.aws.eks_fargate_profile",
            "Manage EKS Fargate Profile"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.eks_fargate_profile:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    cluster_name: ${5:string}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    name: ${8:string}",
            "    profile: ${9:string}",
            "    purge_tags: ${10|true,false|}",
            "    region: ${11:string}",
            "    role_arn: ${12:string}",
            "    secret_key: ${13:string}",
            "    selectors:",
            "      - ${14:element}",
            "    session_token: ${15:string}",
            "    state: ${16|present,absent|}",
            "    subnets:",
            "      - ${17:element}",
            "    validate_certs: ${19|true,false|}",
            "    wait: ${20|false,true|}",
            "    wait_timeout: ${21:1200}",
            "$0"
        ],
        "description": "Manage EKS Fargate Profile",
        "scope": "ansible"
    },
    "Manage cache clusters in Amazon ElastiCache": {
        "prefix": [
            "community.aws.elasticache",
            "Manage cache clusters in Amazon ElastiCache"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.elasticache:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    cache_engine_version: ${5:}",
            "    cache_parameter_group: ${6:}",
            "    cache_port: ${7:int}",
            "    cache_security_groups:",
            "      - ${8:element}",
            "    cache_subnet_group: ${9:}",
            "    debug_botocore_endpoint_logs: ${10|false,true|}",
            "    endpoint_url: ${11:string}",
            "    engine: ${12:memcached}",
            "    hard_modify: ${13|false,true|}",
            "    name: ${14:string}",
            "    node_type: ${15:cache.t2.small}",
            "    num_nodes: ${16:1}",
            "    profile: ${17:string}",
            "    region: ${18:string}",
            "    secret_key: ${19:string}",
            "    security_group_ids:",
            "      - ${20:element}",
            "    session_token: ${21:string}",
            "    state: ${22:string}",
            "    validate_certs: ${23|true,false|}",
            "    wait: ${24|true,false|}",
            "    zone: ${25:string}",
            "$0"
        ],
        "description": "Manage cache clusters in Amazon ElastiCache",
        "scope": "ansible"
    },
    "Retrieve information for AWS ElastiCache clusters": {
        "prefix": [
            "community.aws.elasticache_info",
            "Retrieve information for AWS ElastiCache clusters"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.elasticache_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    name: ${7:string}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    secret_key: ${10:string}",
            "    session_token: ${11:string}",
            "    validate_certs: ${12|true,false|}",
            "$0"
        ],
        "description": "Retrieve information for AWS ElastiCache clusters",
        "scope": "ansible"
    },
    "Manage cache parameter groups in Amazon ElastiCache.": {
        "prefix": [
            "community.aws.elasticache_parameter_group",
            "Manage cache parameter groups in Amazon ElastiCache."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.elasticache_parameter_group:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    description: ${6:}",
            "    endpoint_url: ${7:string}",
            "    group_family: ${8:string}",
            "    name: ${9:string}",
            "    profile: ${10:string}",
            "    region: ${11:string}",
            "    secret_key: ${12:string}",
            "    session_token: ${13:string}",
            "    state: ${14:string}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "Manage cache parameter groups in Amazon ElastiCache.",
        "scope": "ansible"
    },
    "Manage cache snapshots in Amazon ElastiCache": {
        "prefix": [
            "community.aws.elasticache_snapshot",
            "Manage cache snapshots in Amazon ElastiCache"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.elasticache_snapshot:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    bucket: ${5:string}",
            "    cluster_id: ${6:string}",
            "    debug_botocore_endpoint_logs: ${7|false,true|}",
            "    endpoint_url: ${8:string}",
            "    name: ${9:string}",
            "    profile: ${10:string}",
            "    region: ${11:string}",
            "    replication_id: ${12:string}",
            "    secret_key: ${13:string}",
            "    session_token: ${14:string}",
            "    state: ${15:string}",
            "    target: ${16:string}",
            "    validate_certs: ${17|true,false|}",
            "$0"
        ],
        "description": "Manage cache snapshots in Amazon ElastiCache",
        "scope": "ansible"
    },
    "manage ElastiCache subnet groups": {
        "prefix": [
            "community.aws.elasticache_subnet_group",
            "manage ElastiCache subnet groups"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.elasticache_subnet_group:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    description: ${6:string}",
            "    endpoint_url: ${7:string}",
            "    name: ${8:string}",
            "    profile: ${9:string}",
            "    region: ${10:string}",
            "    secret_key: ${11:string}",
            "    session_token: ${12:string}",
            "    state: ${13|present,absent|}",
            "    subnets:",
            "      - ${14:element}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "manage ElastiCache subnet groups",
        "scope": "ansible"
    },
    "Create, update, and delete an Elastic Beanstalk application": {
        "prefix": [
            "community.aws.elasticbeanstalk_app",
            "Create, update, and delete an Elastic Beanstalk application"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.elasticbeanstalk_app:",
            "    access_key: ${2:string}",
            "    app_name: ${3:string}",
            "    aws_ca_bundle: ${4:path}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    description: ${7:string}",
            "    endpoint_url: ${8:string}",
            "    profile: ${9:string}",
            "    region: ${10:string}",
            "    secret_key: ${11:string}",
            "    session_token: ${12:string}",
            "    state: ${13|present,absent|}",
            "    terminate_by_force: ${14|false,true|}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "Create, update, and delete an Elastic Beanstalk application",
        "scope": "ansible"
    },
    "Gather information about EC2 Elastic Load Balancers in AWS": {
        "prefix": [
            "community.aws.elb_classic_lb_info",
            "Gather information about EC2 Elastic Load Balancers in AWS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.elb_classic_lb_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    names:",
            "      - ${7:element}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    secret_key: ${10:string}",
            "    session_token: ${11:string}",
            "    validate_certs: ${12|true,false|}",
            "$0"
        ],
        "description": "Gather information about EC2 Elastic Load Balancers in AWS",
        "scope": "ansible"
    },
    "De-registers or registers instances from EC2 ELBs": {
        "prefix": [
            "community.aws.elb_instance",
            "De-registers or registers instances from EC2 ELBs"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.elb_instance:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    ec2_elbs:",
            "      - ${6:element}",
            "    enable_availability_zone: ${7|true,false|}",
            "    endpoint_url: ${8:string}",
            "    instance_id: ${9:string}",
            "    profile: ${10:string}",
            "    region: ${11:string}",
            "    secret_key: ${12:string}",
            "    session_token: ${13:string}",
            "    state: ${14:string}",
            "    validate_certs: ${15|true,false|}",
            "    wait: ${16|true,false|}",
            "    wait_timeout: ${17:0}",
            "$0"
        ],
        "description": "De-registers or registers instances from EC2 ELBs",
        "scope": "ansible"
    },
    "Manage a Network Load Balancer": {
        "prefix": [
            "community.aws.elb_network_lb",
            "Manage a Network Load Balancer"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.elb_network_lb:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    cross_zone_load_balancing: ${5|false,true|}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    deletion_protection: ${7|false,true|}",
            "    endpoint_url: ${8:string}",
            "    ip_address_type: ${9:string}",
            "    listeners:",
            "      - ${10:element}",
            "    name: ${11:string}",
            "    profile: ${12:string}",
            "    purge_listeners: ${13|true,false|}",
            "    purge_tags: ${14|true,false|}",
            "    region: ${15:string}",
            "    scheme: ${16|internet-facing,internal|}",
            "    secret_key: ${17:string}",
            "    session_token: ${18:string}",
            "    state: ${19|present,absent|}",
            "    subnet_mappings:",
            "      - ${20:element}",
            "    subnets:",
            "      - ${21:element}",
            "    validate_certs: ${23|true,false|}",
            "    wait: ${24|false,true|}",
            "    wait_timeout: ${25:int}",
            "$0"
        ],
        "description": "Manage a Network Load Balancer",
        "scope": "ansible"
    },
    "Manage a target in a target group": {
        "prefix": [
            "community.aws.elb_target",
            "Manage a target in a target group"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.elb_target:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    deregister_unused: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    secret_key: ${10:string}",
            "    session_token: ${11:string}",
            "    state: ${12:string}",
            "    target_az: ${13:string}",
            "    target_group_arn: ${14:string}",
            "    target_group_name: ${15:string}",
            "    target_id: ${16:string}",
            "    target_port: ${17:int}",
            "    target_status: ${18:string}",
            "    target_status_timeout: ${19:60}",
            "    validate_certs: ${20|true,false|}",
            "$0"
        ],
        "description": "Manage a target in a target group",
        "scope": "ansible"
    },
    "Manage a target group for an Application or Network load balancer": {
        "prefix": [
            "community.aws.elb_target_group",
            "Manage a target group for an Application or Network load balancer"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.elb_target_group:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    deregistration_connection_termination: ${6|false,true|}",
            "    deregistration_delay_timeout: ${7:int}",
            "    endpoint_url: ${8:string}",
            "    health_check_interval: ${9:int}",
            "    health_check_path: ${10:string}",
            "    health_check_port: ${11:string}",
            "    health_check_protocol: ${12:string}",
            "    health_check_timeout: ${13:int}",
            "    healthy_threshold_count: ${14:int}",
            "    load_balancing_algorithm_type: ${15:string}",
            "    modify_targets: ${16|true,false|}",
            "    name: ${17:string}",
            "    port: ${18:int}",
            "    preserve_client_ip_enabled: ${19|false,true|}",
            "    profile: ${20:string}",
            "    protocol: ${21:string}",
            "    protocol_version: ${22:string}",
            "    proxy_protocol_v2_enabled: ${23|false,true|}",
            "    purge_tags: ${24|true,false|}",
            "    region: ${25:string}",
            "    secret_key: ${26:string}",
            "    session_token: ${27:string}",
            "    state: ${28:string}",
            "    stickiness_app_cookie_duration: ${29:int}",
            "    stickiness_app_cookie_name: ${30:string}",
            "    stickiness_enabled: ${31|false,true|}",
            "    stickiness_lb_cookie_duration: ${32:int}",
            "    stickiness_type: ${33:string}",
            "    successful_response_codes: ${34:string}",
            "    target_type: ${36:string}",
            "    targets:",
            "      - ${37:element}",
            "    unhealthy_threshold_count: ${38:int}",
            "    validate_certs: ${39|true,false|}",
            "    vpc_id: ${40:string}",
            "    wait: ${41|false,true|}",
            "    wait_timeout: ${42:200}",
            "$0"
        ],
        "description": "Manage a target group for an Application or Network load balancer",
        "scope": "ansible"
    },
    "Gather information about ELB target groups in AWS": {
        "prefix": [
            "community.aws.elb_target_group_info",
            "Gather information about ELB target groups in AWS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.elb_target_group_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    collect_targets_health: ${5|false,true|}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    load_balancer_arn: ${8:string}",
            "    names:",
            "      - ${9:element}",
            "    profile: ${10:string}",
            "    region: ${11:string}",
            "    secret_key: ${12:string}",
            "    session_token: ${13:string}",
            "    target_group_arns:",
            "      - ${14:element}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "Gather information about ELB target groups in AWS",
        "scope": "ansible"
    },
    "Gathers which target groups a target is associated with.": {
        "prefix": [
            "community.aws.elb_target_info",
            "Gathers which target groups a target is associated with."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.elb_target_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    get_unused_target_groups: ${7|true,false|}",
            "    instance_id: ${8:string}",
            "    profile: ${9:string}",
            "    region: ${10:string}",
            "    secret_key: ${11:string}",
            "    session_token: ${12:string}",
            "    validate_certs: ${13|true,false|}",
            "$0"
        ],
        "description": "Gathers which target groups a target is associated with.",
        "scope": "ansible"
    },
    "Manage an AWS Glue connection": {
        "prefix": [
            "community.aws.glue_connection",
            "Manage an AWS Glue connection"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.glue_connection:",
            "    access_key: ${2:string}",
            "    availability_zone: ${3:string}",
            "    aws_ca_bundle: ${4:path}",
            "    catalog_id: ${6:string}",
            "    connection_type: ${8|JDBC,CUSTOM,KAFKA,MARKETPLACE,MONGODB,NETWORK|}",
            "    debug_botocore_endpoint_logs: ${9|false,true|}",
            "    description: ${10:string}",
            "    endpoint_url: ${11:string}",
            "    match_criteria:",
            "      - ${12:element}",
            "    name: ${13:string}",
            "    profile: ${14:string}",
            "    region: ${15:string}",
            "    secret_key: ${16:string}",
            "    security_groups:",
            "      - ${17:element}",
            "    session_token: ${18:string}",
            "    state: ${19:string}",
            "    subnet_id: ${20:string}",
            "    validate_certs: ${21|true,false|}",
            "$0"
        ],
        "description": "Manage an AWS Glue connection",
        "scope": "ansible"
    },
    "Manage an AWS Glue crawler": {
        "prefix": [
            "community.aws.glue_crawler",
            "Manage an AWS Glue crawler"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.glue_crawler:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    database_name: ${5:string}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    description: ${7:string}",
            "    endpoint_url: ${8:string}",
            "    name: ${9:string}",
            "    profile: ${10:string}",
            "    purge_tags: ${11|true,false|}",
            "    region: ${13:string}",
            "    role: ${14:string}",
            "    secret_key: ${16:string}",
            "    session_token: ${17:string}",
            "    state: ${18:string}",
            "    table_prefix: ${19:string}",
            "    validate_certs: ${22|true,false|}",
            "$0"
        ],
        "description": "Manage an AWS Glue crawler",
        "scope": "ansible"
    },
    "Manage an AWS Glue job": {
        "prefix": [
            "community.aws.glue_job",
            "Manage an AWS Glue job"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.glue_job:",
            "    access_key: ${2:string}",
            "    allocated_capacity: ${3:int}",
            "    aws_ca_bundle: ${4:path}",
            "    command_name: ${6:glueetl}",
            "    command_python_version: ${7:string}",
            "    command_script_location: ${8:string}",
            "    connections:",
            "      - ${9:element}",
            "    debug_botocore_endpoint_logs: ${10|false,true|}",
            "    description: ${12:string}",
            "    endpoint_url: ${13:string}",
            "    glue_version: ${14:string}",
            "    max_concurrent_runs: ${15:int}",
            "    max_retries: ${16:int}",
            "    name: ${17:string}",
            "    number_of_workers: ${18:int}",
            "    profile: ${19:string}",
            "    purge_tags: ${20|true,false|}",
            "    region: ${21:string}",
            "    role: ${22:string}",
            "    secret_key: ${23:string}",
            "    session_token: ${24:string}",
            "    state: ${25:string}",
            "    timeout: ${27:int}",
            "    validate_certs: ${28|true,false|}",
            "    worker_type: ${29:string}",
            "$0"
        ],
        "description": "Manage an AWS Glue job",
        "scope": "ansible"
    },
    "Manage AWS IAM User access keys": {
        "prefix": [
            "community.aws.iam_access_key",
            "Manage AWS IAM User access keys"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.iam_access_key:",
            "    access_key: ${2:string}",
            "    active: ${3|false,true|}",
            "    aws_ca_bundle: ${4:path}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    id: ${8:string}",
            "    profile: ${9:string}",
            "    region: ${10:string}",
            "    rotate_keys: ${11|false,true|}",
            "    secret_key: ${12:string}",
            "    session_token: ${13:string}",
            "    state: ${14|present,absent|}",
            "    user_name: ${15:string}",
            "    validate_certs: ${16|true,false|}",
            "$0"
        ],
        "description": "Manage AWS IAM User access keys",
        "scope": "ansible"
    },
    "fetch information about AWS IAM User access keys": {
        "prefix": [
            "community.aws.iam_access_key_info",
            "fetch information about AWS IAM User access keys"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.iam_access_key_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    profile: ${7:string}",
            "    region: ${8:string}",
            "    secret_key: ${9:string}",
            "    session_token: ${10:string}",
            "    user_name: ${11:string}",
            "    validate_certs: ${12|true,false|}",
            "$0"
        ],
        "description": "fetch information about AWS IAM User access keys",
        "scope": "ansible"
    },
    "Manage AWS IAM groups": {
        "prefix": [
            "community.aws.iam_group",
            "Manage AWS IAM groups"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.iam_group:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    managed_policies:",
            "      - ${7:element}",
            "    name: ${8:string}",
            "    profile: ${9:string}",
            "    purge_policies: ${10|false,true|}",
            "    purge_users: ${11|false,true|}",
            "    region: ${12:string}",
            "    secret_key: ${13:string}",
            "    session_token: ${14:string}",
            "    state: ${15:string}",
            "    users:",
            "      - ${16:element}",
            "    validate_certs: ${17|true,false|}",
            "$0"
        ],
        "description": "Manage AWS IAM groups",
        "scope": "ansible"
    },
    "Manage User Managed IAM policies": {
        "prefix": [
            "community.aws.iam_managed_policy",
            "Manage User Managed IAM policies"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.iam_managed_policy:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    make_default: ${7|true,false|}",
            "    only_version: ${8|false,true|}",
            "    policy_description: ${10:}",
            "    policy_name: ${11:string}",
            "    profile: ${12:string}",
            "    region: ${13:string}",
            "    secret_key: ${14:string}",
            "    session_token: ${15:string}",
            "    state: ${16|present,absent|}",
            "    validate_certs: ${17|true,false|}",
            "$0"
        ],
        "description": "Manage User Managed IAM policies",
        "scope": "ansible"
    },
    "List the MFA (Multi-Factor Authentication) devices registered for a user": {
        "prefix": [
            "community.aws.iam_mfa_device_info",
            "List the MFA (Multi-Factor Authentication) devices registered for a user"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.iam_mfa_device_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    profile: ${7:string}",
            "    region: ${8:string}",
            "    secret_key: ${9:string}",
            "    session_token: ${10:string}",
            "    user_name: ${11:string}",
            "    validate_certs: ${12|true,false|}",
            "$0"
        ],
        "description": "List the MFA (Multi-Factor Authentication) devices registered for a user",
        "scope": "ansible"
    },
    "Update an IAM Password Policy": {
        "prefix": [
            "community.aws.iam_password_policy",
            "Update an IAM Password Policy"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.iam_password_policy:",
            "    access_key: ${2:string}",
            "    allow_pw_change: ${3|false,true|}",
            "    aws_ca_bundle: ${4:path}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    min_pw_length: ${8:6}",
            "    profile: ${9:string}",
            "    pw_expire: ${10|false,true|}",
            "    pw_max_age: ${11:0}",
            "    pw_reuse_prevent: ${12:0}",
            "    region: ${13:string}",
            "    require_lowercase: ${14|false,true|}",
            "    require_numbers: ${15|false,true|}",
            "    require_symbols: ${16|false,true|}",
            "    require_uppercase: ${17|false,true|}",
            "    secret_key: ${18:string}",
            "    session_token: ${19:string}",
            "    state: ${20:string}",
            "    validate_certs: ${21|true,false|}",
            "$0"
        ],
        "description": "Update an IAM Password Policy",
        "scope": "ansible"
    },
    "Manage AWS IAM roles": {
        "prefix": [
            "community.aws.iam_role",
            "Manage AWS IAM roles"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.iam_role:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${4:path}",
            "    boundary: ${6:string}",
            "    create_instance_profile: ${7|true,false|}",
            "    debug_botocore_endpoint_logs: ${8|false,true|}",
            "    delete_instance_profile: ${9|false,true|}",
            "    description: ${10:string}",
            "    endpoint_url: ${11:string}",
            "    managed_policies:",
            "      - ${12:element}",
            "    max_session_duration: ${13:int}",
            "    name: ${14:string}",
            "    path: ${15:/}",
            "    profile: ${16:string}",
            "    purge_policies: ${17|true,false|}",
            "    purge_tags: ${18|true,false|}",
            "    region: ${19:string}",
            "    secret_key: ${20:string}",
            "    session_token: ${21:string}",
            "    state: ${22|present,absent|}",
            "    validate_certs: ${24|true,false|}",
            "    wait: ${25|true,false|}",
            "    wait_timeout: ${26:120}",
            "$0"
        ],
        "description": "Manage AWS IAM roles",
        "scope": "ansible"
    },
    "Gather information on IAM roles": {
        "prefix": [
            "community.aws.iam_role_info",
            "Gather information on IAM roles"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.iam_role_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    name: ${7:string}",
            "    path_prefix: ${8:string}",
            "    profile: ${9:string}",
            "    region: ${10:string}",
            "    secret_key: ${11:string}",
            "    session_token: ${12:string}",
            "    validate_certs: ${13|true,false|}",
            "$0"
        ],
        "description": "Gather information on IAM roles",
        "scope": "ansible"
    },
    "Maintain IAM SAML federation configuration.": {
        "prefix": [
            "community.aws.iam_saml_federation",
            "Maintain IAM SAML federation configuration."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.iam_saml_federation:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    name: ${7:string}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    saml_metadata_document: ${10:string}",
            "    secret_key: ${11:string}",
            "    session_token: ${12:string}",
            "    state: ${13|present,absent|}",
            "    validate_certs: ${14|true,false|}",
            "$0"
        ],
        "description": "Maintain IAM SAML federation configuration.",
        "scope": "ansible"
    },
    "Manage IAM server certificates for use on ELBs and CloudFront": {
        "prefix": [
            "community.aws.iam_server_certificate",
            "Manage IAM server certificates for use on ELBs and CloudFront"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.iam_server_certificate:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    cert: ${5:string}",
            "    cert_chain: ${6:string}",
            "    debug_botocore_endpoint_logs: ${7|false,true|}",
            "    dup_ok: ${8|true,false|}",
            "    endpoint_url: ${9:string}",
            "    key: ${10:string}",
            "    name: ${11:string}",
            "    new_name: ${12:string}",
            "    new_path: ${13:string}",
            "    path: ${14:/}",
            "    profile: ${15:string}",
            "    region: ${16:string}",
            "    secret_key: ${17:string}",
            "    session_token: ${18:string}",
            "    state: ${19:string}",
            "    validate_certs: ${20|true,false|}",
            "$0"
        ],
        "description": "Manage IAM server certificates for use on ELBs and CloudFront",
        "scope": "ansible"
    },
    "Retrieve the information of a server certificate": {
        "prefix": [
            "community.aws.iam_server_certificate_info",
            "Retrieve the information of a server certificate"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.iam_server_certificate_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    name: ${7:string}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    secret_key: ${10:string}",
            "    session_token: ${11:string}",
            "    validate_certs: ${12|true,false|}",
            "$0"
        ],
        "description": "Retrieve the information of a server certificate",
        "scope": "ansible"
    },
    "Create, Update and Delete Amazon Inspector Assessment Targets": {
        "prefix": [
            "community.aws.inspector_target",
            "Create, Update and Delete Amazon Inspector Assessment Targets"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.inspector_target:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    name: ${7:string}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    secret_key: ${10:string}",
            "    session_token: ${11:string}",
            "    state: ${12|present,absent|}",
            "    validate_certs: ${14|true,false|}",
            "$0"
        ],
        "description": "Create, Update and Delete Amazon Inspector Assessment Targets",
        "scope": "ansible"
    },
    "Manage a Kinesis Stream.": {
        "prefix": [
            "community.aws.kinesis_stream",
            "Manage a Kinesis Stream."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.kinesis_stream:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    encryption_state: ${6:string}",
            "    encryption_type: ${7:string}",
            "    endpoint_url: ${8:string}",
            "    key_id: ${9:string}",
            "    name: ${10:string}",
            "    profile: ${11:string}",
            "    region: ${12:string}",
            "    retention_period: ${13:int}",
            "    secret_key: ${14:string}",
            "    session_token: ${15:string}",
            "    shards: ${16:int}",
            "    state: ${17|present,absent|}",
            "    validate_certs: ${19|true,false|}",
            "    wait: ${20|true,false|}",
            "    wait_timeout: ${21:300}",
            "$0"
        ],
        "description": "Manage a Kinesis Stream.",
        "scope": "ansible"
    },
    "Manage instances in AWS Lightsail": {
        "prefix": [
            "community.aws.lightsail",
            "Manage instances in AWS Lightsail"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.lightsail:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    blueprint_id: ${5:string}",
            "    bundle_id: ${6:string}",
            "    debug_botocore_endpoint_logs: ${7|false,true|}",
            "    endpoint_url: ${8:string}",
            "    key_pair_name: ${9:string}",
            "    name: ${10:string}",
            "    profile: ${11:string}",
            "    region: ${12:string}",
            "    secret_key: ${13:string}",
            "    session_token: ${14:string}",
            "    state: ${15|present,absent,running,restarted,rebooted,stopped|}",
            "    user_data: ${16:}",
            "    validate_certs: ${17|true,false|}",
            "    wait: ${18|true,false|}",
            "    wait_timeout: ${19:300}",
            "    zone: ${20:string}",
            "$0"
        ],
        "description": "Manage instances in AWS Lightsail",
        "scope": "ansible"
    },
    "Manage static IP addresses in AWS Lightsail": {
        "prefix": [
            "community.aws.lightsail_static_ip",
            "Manage static IP addresses in AWS Lightsail"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.lightsail_static_ip:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    name: ${7:string}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    secret_key: ${10:string}",
            "    session_token: ${11:string}",
            "    state: ${12|present,absent|}",
            "    validate_certs: ${13|true,false|}",
            "$0"
        ],
        "description": "Manage static IP addresses in AWS Lightsail",
        "scope": "ansible"
    },
    "Manage Amazon MSK clusters": {
        "prefix": [
            "community.aws.msk_cluster",
            "Manage Amazon MSK clusters"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.msk_cluster:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${4:path}",
            "    configuration_arn: ${6:string}",
            "    configuration_revision: ${7:int}",
            "    debug_botocore_endpoint_logs: ${8|false,true|}",
            "    ebs_volume_size: ${9:100}",
            "    endpoint_url: ${11:string}",
            "    enhanced_monitoring: ${12|DEFAULT,PER_BROKER,PER_TOPIC_PER_BROKER,PER_TOPIC_PER_PARTITION|}",
            "    instance_type: ${13|kafka.t3.small,kafka.m5.large,kafka.m5.xlarge,kafka.m5.2xlarge,kafka.m5.4xlarge|}",
            "    name: ${15:string}",
            "    nodes: ${16:3}",
            "    profile: ${18:string}",
            "    purge_tags: ${19|true,false|}",
            "    region: ${20:string}",
            "    secret_key: ${21:string}",
            "    security_groups:",
            "      - ${22:element}",
            "    session_token: ${23:string}",
            "    state: ${24|present,absent|}",
            "    subnets:",
            "      - ${25:element}",
            "    validate_certs: ${27|true,false|}",
            "    version: ${28:string}",
            "    wait: ${29|false,true|}",
            "    wait_timeout: ${30:3600}",
            "$0"
        ],
        "description": "Manage Amazon MSK clusters",
        "scope": "ansible"
    },
    "Manage Amazon MSK cluster configurations": {
        "prefix": [
            "community.aws.msk_config",
            "Manage Amazon MSK cluster configurations"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.msk_config:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    description: ${7:}",
            "    endpoint_url: ${8:string}",
            "    kafka_versions:",
            "      - ${9:element}",
            "    name: ${10:string}",
            "    profile: ${11:string}",
            "    region: ${12:string}",
            "    secret_key: ${13:string}",
            "    session_token: ${14:string}",
            "    state: ${15|present,absent|}",
            "    validate_certs: ${16|true,false|}",
            "$0"
        ],
        "description": "Manage Amazon MSK cluster configurations",
        "scope": "ansible"
    },
    "manage AWS Network Firewall firewalls": {
        "prefix": [
            "community.aws.networkfirewall",
            "manage AWS Network Firewall firewalls"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.networkfirewall:",
            "    access_key: ${2:string}",
            "    arn: ${3:string}",
            "    aws_ca_bundle: ${4:path}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    delete_protection: ${7|false,true|}",
            "    description: ${8:string}",
            "    endpoint_url: ${9:string}",
            "    name: ${10:string}",
            "    policy: ${11:string}",
            "    policy_change_protection: ${12|false,true|}",
            "    profile: ${13:string}",
            "    purge_subnets: ${14|true,false|}",
            "    purge_tags: ${15|true,false|}",
            "    region: ${16:string}",
            "    secret_key: ${17:string}",
            "    session_token: ${18:string}",
            "    state: ${19|present,absent|}",
            "    subnet_change_protection: ${20|false,true|}",
            "    subnets:",
            "      - ${21:element}",
            "    validate_certs: ${23|true,false|}",
            "    wait: ${24|true,false|}",
            "    wait_timeout: ${25:int}",
            "$0"
        ],
        "description": "manage AWS Network Firewall firewalls",
        "scope": "ansible"
    },
    "describe AWS Network Firewall firewalls": {
        "prefix": [
            "community.aws.networkfirewall_info",
            "describe AWS Network Firewall firewalls"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.networkfirewall_info:",
            "    access_key: ${2:string}",
            "    arn: ${3:string}",
            "    aws_ca_bundle: ${4:path}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    name: ${8:string}",
            "    profile: ${9:string}",
            "    region: ${10:string}",
            "    secret_key: ${11:string}",
            "    session_token: ${12:string}",
            "    validate_certs: ${13|true,false|}",
            "    vpc_ids:",
            "      - ${14:element}",
            "$0"
        ],
        "description": "describe AWS Network Firewall firewalls",
        "scope": "ansible"
    },
    "manage AWS Network Firewall policies": {
        "prefix": [
            "community.aws.networkfirewall_policy",
            "manage AWS Network Firewall policies"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.networkfirewall_policy:",
            "    access_key: ${2:string}",
            "    arn: ${3:string}",
            "    aws_ca_bundle: ${4:path}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    description: ${7:string}",
            "    endpoint_url: ${8:string}",
            "    name: ${9:string}",
            "    profile: ${10:string}",
            "    purge_stateless_custom_actions: ${11|true,false|}",
            "    purge_tags: ${12|true,false|}",
            "    region: ${13:string}",
            "    secret_key: ${14:string}",
            "    session_token: ${15:string}",
            "    state: ${16|present,absent|}",
            "    stateful_default_actions:",
            "      - ${17:element}",
            "    stateful_rule_groups:",
            "      - ${18:element}",
            "    stateful_rule_order: ${19:string}",
            "    stateless_custom_actions:",
            "      - ${20:element}",
            "    stateless_default_actions:",
            "      - ${21:element}",
            "    stateless_fragment_default_actions:",
            "      - ${22:element}",
            "    stateless_rule_groups:",
            "      - ${23:element}",
            "    validate_certs: ${25|true,false|}",
            "    wait: ${26|true,false|}",
            "    wait_timeout: ${27:int}",
            "$0"
        ],
        "description": "manage AWS Network Firewall policies",
        "scope": "ansible"
    },
    "describe AWS Network Firewall policies": {
        "prefix": [
            "community.aws.networkfirewall_policy_info",
            "describe AWS Network Firewall policies"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.networkfirewall_policy_info:",
            "    access_key: ${2:string}",
            "    arn: ${3:string}",
            "    aws_ca_bundle: ${4:path}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    name: ${8:string}",
            "    profile: ${9:string}",
            "    region: ${10:string}",
            "    secret_key: ${11:string}",
            "    session_token: ${12:string}",
            "    validate_certs: ${13|true,false|}",
            "$0"
        ],
        "description": "describe AWS Network Firewall policies",
        "scope": "ansible"
    },
    "create, delete and modify AWS Network Firewall rule groups": {
        "prefix": [
            "community.aws.networkfirewall_rule_group",
            "create, delete and modify AWS Network Firewall rule groups"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.networkfirewall_rule_group:",
            "    access_key: ${2:string}",
            "    arn: ${3:string}",
            "    aws_ca_bundle: ${4:path}",
            "    capacity: ${6:int}",
            "    debug_botocore_endpoint_logs: ${7|false,true|}",
            "    description: ${8:string}",
            "    endpoint_url: ${10:string}",
            "    name: ${12:string}",
            "    profile: ${14:string}",
            "    purge_ip_variables: ${15|true,false|}",
            "    purge_port_variables: ${16|true,false|}",
            "    purge_tags: ${17|true,false|}",
            "    region: ${18:string}",
            "    rule_list:",
            "      - ${19:element}",
            "    rule_order: ${20:string}",
            "    rule_strings:",
            "      - ${21:element}",
            "    rule_type: ${22:string}",
            "    secret_key: ${23:string}",
            "    session_token: ${24:string}",
            "    state: ${25|present,absent|}",
            "    validate_certs: ${27|true,false|}",
            "    wait: ${28|true,false|}",
            "    wait_timeout: ${29:int}",
            "$0"
        ],
        "description": "create, delete and modify AWS Network Firewall rule groups",
        "scope": "ansible"
    },
    "describe AWS Network Firewall rule groups": {
        "prefix": [
            "community.aws.networkfirewall_rule_group_info",
            "describe AWS Network Firewall rule groups"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.networkfirewall_rule_group_info:",
            "    access_key: ${2:string}",
            "    arn: ${3:string}",
            "    aws_ca_bundle: ${4:path}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    name: ${8:string}",
            "    profile: ${9:string}",
            "    region: ${10:string}",
            "    rule_type: ${11:string}",
            "    scope: ${12:string}",
            "    secret_key: ${13:string}",
            "    session_token: ${14:string}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "describe AWS Network Firewall rule groups",
        "scope": "ansible"
    },
    "Creates OpenSearch or ElasticSearch domain": {
        "prefix": [
            "community.aws.opensearch",
            "Creates OpenSearch or ElasticSearch domain"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.opensearch:",
            "    access_key: ${2:string}",
            "    allow_intermediate_upgrades: ${5|true,false|}",
            "    aws_ca_bundle: ${7:path}",
            "    debug_botocore_endpoint_logs: ${11|false,true|}",
            "    domain_name: ${13:string}",
            "    endpoint_url: ${16:string}",
            "    engine_version: ${17:string}",
            "    profile: ${19:string}",
            "    purge_tags: ${20|true,false|}",
            "    region: ${21:string}",
            "    secret_key: ${22:string}",
            "    session_token: ${23:string}",
            "    state: ${25|present,absent|}",
            "    validate_certs: ${27|true,false|}",
            "    wait: ${29|false,true|}",
            "    wait_timeout: ${30:300}",
            "$0"
        ],
        "description": "Creates OpenSearch or ElasticSearch domain",
        "scope": "ansible"
    },
    "obtain information about one or more OpenSearch or ElasticSearch domain": {
        "prefix": [
            "community.aws.opensearch_info",
            "obtain information about one or more OpenSearch or ElasticSearch domain"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.opensearch_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    domain_name: ${6:string}",
            "    endpoint_url: ${7:string}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    secret_key: ${10:string}",
            "    session_token: ${11:string}",
            "    validate_certs: ${13|true,false|}",
            "$0"
        ],
        "description": "obtain information about one or more OpenSearch or ElasticSearch domain",
        "scope": "ansible"
    },
    "create, delete, or modify an Amazon Redshift instance": {
        "prefix": [
            "community.aws.redshift",
            "create, delete, or modify an Amazon Redshift instance"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.redshift:",
            "    access_key: ${2:string}",
            "    allow_version_upgrade: ${3|true,false|}",
            "    automated_snapshot_retention_period: ${4:int}",
            "    availability_zone: ${5:string}",
            "    aws_ca_bundle: ${6:path}",
            "    cluster_parameter_group_name: ${8:string}",
            "    cluster_security_groups:",
            "      - ${9:element}",
            "    cluster_subnet_group_name: ${10:string}",
            "    cluster_type: ${11|single-node,multi-node|}",
            "    cluster_version: ${12:string}",
            "    command: ${13:string}",
            "    db_name: ${14:string}",
            "    debug_botocore_endpoint_logs: ${15|false,true|}",
            "    elastic_ip: ${16:string}",
            "    encrypted: ${17|false,true|}",
            "    endpoint_url: ${18:string}",
            "    enhanced_vpc_routing: ${19|false,true|}",
            "    final_cluster_snapshot_identifier: ${20:string}",
            "    identifier: ${21:string}",
            "    new_cluster_identifier: ${22:string}",
            "    node_type: ${23:string}",
            "    number_of_nodes: ${24:int}",
            "    password: ${25:string}",
            "    port: ${26:int}",
            "    preferred_maintenance_window: ${27:string}",
            "    profile: ${28:string}",
            "    publicly_accessible: ${29|false,true|}",
            "    purge_tags: ${30|true,false|}",
            "    region: ${31:string}",
            "    secret_key: ${32:string}",
            "    session_token: ${33:string}",
            "    skip_final_cluster_snapshot: ${34|false,true|}",
            "    username: ${36:string}",
            "    validate_certs: ${37|true,false|}",
            "    vpc_security_group_ids:",
            "      - ${38:element}",
            "    wait: ${39|false,true|}",
            "    wait_timeout: ${40:300}",
            "$0"
        ],
        "description": "create, delete, or modify an Amazon Redshift instance",
        "scope": "ansible"
    },
    "Manage Redshift Cross Region Snapshots": {
        "prefix": [
            "community.aws.redshift_cross_region_snapshots",
            "Manage Redshift Cross Region Snapshots"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.redshift_cross_region_snapshots:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    cluster_name: ${5:string}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    destination_region: ${7:string}",
            "    endpoint_url: ${8:string}",
            "    profile: ${9:string}",
            "    region: ${10:string}",
            "    secret_key: ${11:string}",
            "    session_token: ${12:string}",
            "    snapshot_copy_grant: ${13:string}",
            "    snapshot_retention_period: ${14:int}",
            "    state: ${15|present,absent|}",
            "    validate_certs: ${16|true,false|}",
            "$0"
        ],
        "description": "Manage Redshift Cross Region Snapshots",
        "scope": "ansible"
    },
    "Gather information about Redshift cluster(s)": {
        "prefix": [
            "community.aws.redshift_info",
            "Gather information about Redshift cluster(s)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.redshift_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    cluster_identifier: ${5:string}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    secret_key: ${10:string}",
            "    session_token: ${11:string}",
            "    validate_certs: ${13|true,false|}",
            "$0"
        ],
        "description": "Gather information about Redshift cluster(s)",
        "scope": "ansible"
    },
    "manage Redshift cluster subnet groups": {
        "prefix": [
            "community.aws.redshift_subnet_group",
            "manage Redshift cluster subnet groups"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.redshift_subnet_group:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    description: ${6:string}",
            "    endpoint_url: ${7:string}",
            "    name: ${8:string}",
            "    profile: ${9:string}",
            "    region: ${10:string}",
            "    secret_key: ${11:string}",
            "    session_token: ${12:string}",
            "    state: ${13|present,absent|}",
            "    subnets:",
            "      - ${14:element}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "manage Redshift cluster subnet groups",
        "scope": "ansible"
    },
    "Lists S3 buckets in AWS": {
        "prefix": [
            "community.aws.s3_bucket_info",
            "Lists S3 buckets in AWS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.s3_bucket_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    name: ${8:}",
            "    name_filter: ${9:}",
            "    profile: ${10:string}",
            "    region: ${11:string}",
            "    secret_key: ${12:string}",
            "    session_token: ${13:string}",
            "    transform_location: ${14|false,true|}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "Lists S3 buckets in AWS",
        "scope": "ansible"
    },
    "Creates, updates or deletes S3 Bucket notifications targeting Lambda functions, SNS or SQS.": {
        "prefix": [
            "community.aws.s3_bucket_notification",
            "Creates, updates or deletes S3 Bucket notifications targeting Lambda functions, SNS or SQS."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.s3_bucket_notification:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    bucket_name: ${5:string}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    event_name: ${8:string}",
            "    events:",
            "      - ${9:element}",
            "    lambda_alias: ${10:string}",
            "    lambda_function_arn: ${11:string}",
            "    lambda_version: ${12:0}",
            "    prefix: ${13:}",
            "    profile: ${14:string}",
            "    queue_arn: ${15:string}",
            "    region: ${16:string}",
            "    secret_key: ${17:string}",
            "    session_token: ${18:string}",
            "    state: ${19|present,absent|}",
            "    suffix: ${20:}",
            "    topic_arn: ${21:string}",
            "    validate_certs: ${22|true,false|}",
            "$0"
        ],
        "description": "Creates, updates or deletes S3 Bucket notifications targeting Lambda functions, SNS or SQS.",
        "scope": "ansible"
    },
    "Manage CORS for S3 buckets in AWS": {
        "prefix": [
            "community.aws.s3_cors",
            "Manage CORS for S3 buckets in AWS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.s3_cors:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    name: ${7:string}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    rules:",
            "      - ${10:element}",
            "    secret_key: ${11:string}",
            "    session_token: ${12:string}",
            "    state: ${13:string}",
            "    validate_certs: ${14|true,false|}",
            "$0"
        ],
        "description": "Manage CORS for S3 buckets in AWS",
        "scope": "ansible"
    },
    "Manage S3 bucket lifecycle rules in AWS": {
        "prefix": [
            "community.aws.s3_lifecycle",
            "Manage S3 bucket lifecycle rules in AWS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.s3_lifecycle:",
            "    abort_incomplete_multipart_upload_days: ${2:int}",
            "    access_key: ${3:string}",
            "    aws_ca_bundle: ${4:path}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    expiration_date: ${8:string}",
            "    expiration_days: ${9:int}",
            "    expire_object_delete_marker: ${10|false,true|}",
            "    name: ${11:string}",
            "    noncurrent_version_expiration_days: ${12:int}",
            "    noncurrent_version_storage_class: ${13|glacier,onezone_ia,standard_ia,intelligent_tiering,deep_archive|}",
            "    noncurrent_version_transition_days: ${14:int}",
            "    noncurrent_version_transitions:",
            "      - ${15:element}",
            "    prefix: ${16:string}",
            "    profile: ${17:string}",
            "    purge_transitions: ${18|true,false|}",
            "    region: ${19:string}",
            "    rule_id: ${20:string}",
            "    secret_key: ${21:string}",
            "    session_token: ${22:string}",
            "    state: ${23|present,absent|}",
            "    status: ${24|enabled,disabled|}",
            "    storage_class: ${25|glacier,onezone_ia,standard_ia,intelligent_tiering,deep_archive|}",
            "    transition_date: ${26:string}",
            "    transition_days: ${27:int}",
            "    transitions:",
            "      - ${28:element}",
            "    validate_certs: ${29|true,false|}",
            "    wait: ${30|false,true|}",
            "$0"
        ],
        "description": "Manage S3 bucket lifecycle rules in AWS",
        "scope": "ansible"
    },
    "Manage logging facility of an s3 bucket in AWS": {
        "prefix": [
            "community.aws.s3_logging",
            "Manage logging facility of an s3 bucket in AWS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.s3_logging:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    name: ${7:string}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    secret_key: ${10:string}",
            "    session_token: ${11:string}",
            "    state: ${12|present,absent|}",
            "    target_bucket: ${13:string}",
            "    target_prefix: ${14:}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "Manage logging facility of an s3 bucket in AWS",
        "scope": "ansible"
    },
    "Manage s3 bucket metrics configuration in AWS": {
        "prefix": [
            "community.aws.s3_metrics_configuration",
            "Manage s3 bucket metrics configuration in AWS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.s3_metrics_configuration:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    bucket_name: ${5:string}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    filter_prefix: ${8:string}",
            "    id: ${10:string}",
            "    profile: ${11:string}",
            "    region: ${12:string}",
            "    secret_key: ${13:string}",
            "    session_token: ${14:string}",
            "    state: ${15|present,absent|}",
            "    validate_certs: ${16|true,false|}",
            "$0"
        ],
        "description": "Manage s3 bucket metrics configuration in AWS",
        "scope": "ansible"
    },
    "Efficiently upload multiple files to S3": {
        "prefix": [
            "community.aws.s3_sync",
            "Efficiently upload multiple files to S3"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.s3_sync:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    bucket: ${5:string}",
            "    cache_control: ${6:}",
            "    debug_botocore_endpoint_logs: ${7|false,true|}",
            "    delete: ${8|false,true|}",
            "    endpoint_url: ${9:string}",
            "    exclude: ${10:.*}",
            "    file_change_strategy: ${11|date_size,force,checksum|}",
            "    file_root: ${12:path}",
            "    include: ${13:*}",
            "    key_prefix: ${14:}",
            "    mode: ${16|push|}",
            "    permission: ${17:string}",
            "    profile: ${18:string}",
            "    region: ${19:string}",
            "    secret_key: ${20:string}",
            "    session_token: ${21:string}",
            "    storage_class: ${22|STANDARD,REDUCED_REDUNDANCY,STANDARD_IA,ONEZONE_IA,INTELLIGENT_TIERING,GLACIER,DEEP_ARCHIVE,OUTPOSTS|}",
            "    validate_certs: ${23|true,false|}",
            "$0"
        ],
        "description": "Efficiently upload multiple files to S3",
        "scope": "ansible"
    },
    "Configure an s3 bucket as a website": {
        "prefix": [
            "community.aws.s3_website",
            "Configure an s3 bucket as a website"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.s3_website:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    error_key: ${7:string}",
            "    name: ${8:string}",
            "    profile: ${9:string}",
            "    redirect_all_requests: ${10:string}",
            "    region: ${11:string}",
            "    secret_key: ${12:string}",
            "    session_token: ${13:string}",
            "    state: ${14:string}",
            "    suffix: ${15:index.html}",
            "    validate_certs: ${16|true,false|}",
            "$0"
        ],
        "description": "Configure an s3 bucket as a website",
        "scope": "ansible"
    },
    "Manage secrets stored in AWS Secrets Manager": {
        "prefix": [
            "community.aws.secretsmanager_secret",
            "Manage secrets stored in AWS Secrets Manager"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.secretsmanager_secret:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    description: ${6:}",
            "    endpoint_url: ${7:string}",
            "    kms_key_id: ${9:string}",
            "    name: ${10:string}",
            "    profile: ${11:string}",
            "    purge_tags: ${12|true,false|}",
            "    recovery_window: ${13:30}",
            "    region: ${14:string}",
            "    rotation_interval: ${16:30}",
            "    rotation_lambda: ${17:string}",
            "    secret: ${18:}",
            "    secret_key: ${19:string}",
            "    secret_type: ${20|string,binary|}",
            "    session_token: ${21:string}",
            "    state: ${22|present,absent|}",
            "    validate_certs: ${24|true,false|}",
            "$0"
        ],
        "description": "Manage secrets stored in AWS Secrets Manager",
        "scope": "ansible"
    },
    "Manages SES email and domain identity": {
        "prefix": [
            "community.aws.ses_identity",
            "Manages SES email and domain identity"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.ses_identity:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${7|false,true|}",
            "    endpoint_url: ${9:string}",
            "    feedback_forwarding: ${10|true,false|}",
            "    identity: ${11:string}",
            "    profile: ${12:string}",
            "    region: ${13:string}",
            "    secret_key: ${14:string}",
            "    session_token: ${15:string}",
            "    state: ${16|present,absent|}",
            "    validate_certs: ${17|true,false|}",
            "$0"
        ],
        "description": "Manages SES email and domain identity",
        "scope": "ansible"
    },
    "Manages SES sending authorization policies": {
        "prefix": [
            "community.aws.ses_identity_policy",
            "Manages SES sending authorization policies"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.ses_identity_policy:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    identity: ${7:string}",
            "    policy_name: ${9:string}",
            "    profile: ${10:string}",
            "    region: ${11:string}",
            "    secret_key: ${12:string}",
            "    session_token: ${13:string}",
            "    state: ${14|present,absent|}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "Manages SES sending authorization policies",
        "scope": "ansible"
    },
    "Manages SES inbound receipt rule sets": {
        "prefix": [
            "community.aws.ses_rule_set",
            "Manages SES inbound receipt rule sets"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.ses_rule_set:",
            "    access_key: ${2:string}",
            "    active: ${3|false,true|}",
            "    aws_ca_bundle: ${4:path}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    force: ${8|false,true|}",
            "    name: ${9:string}",
            "    profile: ${10:string}",
            "    region: ${11:string}",
            "    secret_key: ${12:string}",
            "    session_token: ${13:string}",
            "    state: ${14|present,absent|}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "Manages SES inbound receipt rule sets",
        "scope": "ansible"
    },
    "Send Amazon Simple Notification Service messages": {
        "prefix": [
            "community.aws.sns",
            "Send Amazon Simple Notification Service messages"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.sns:",
            "    access_key: ${2:string}",
            "    application: ${3:string}",
            "    aws_ca_bundle: ${4:path}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    email: ${7:string}",
            "    email_json: ${8:string}",
            "    endpoint_url: ${9:string}",
            "    http: ${10:string}",
            "    https: ${11:string}",
            "    lambda: ${12:string}",
            "    message_structure: ${14|json,string|}",
            "    msg: ${15:string}",
            "    profile: ${16:string}",
            "    region: ${17:string}",
            "    secret_key: ${18:string}",
            "    session_token: ${19:string}",
            "    sms: ${20:string}",
            "    sqs: ${21:string}",
            "    subject: ${22:string}",
            "    topic: ${23:string}",
            "    validate_certs: ${24|true,false|}",
            "$0"
        ],
        "description": "Send Amazon Simple Notification Service messages",
        "scope": "ansible"
    },
    "Manages AWS SNS topics and subscriptions": {
        "prefix": [
            "community.aws.sns_topic",
            "Manages AWS SNS topics and subscriptions"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.sns_topic:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    display_name: ${7:string}",
            "    endpoint_url: ${8:string}",
            "    name: ${9:string}",
            "    profile: ${11:string}",
            "    purge_subscriptions: ${12|true,false|}",
            "    region: ${13:string}",
            "    secret_key: ${14:string}",
            "    session_token: ${15:string}",
            "    state: ${16|present,absent|}",
            "    subscriptions:",
            "      - ${17:element}",
            "    topic_type: ${18|standard,fifo|}",
            "    validate_certs: ${19|true,false|}",
            "$0"
        ],
        "description": "Manages AWS SNS topics and subscriptions",
        "scope": "ansible"
    },
    "sns_topic_info module": {
        "prefix": [
            "community.aws.sns_topic_info",
            "sns_topic_info module"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.sns_topic_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    profile: ${7:string}",
            "    region: ${8:string}",
            "    secret_key: ${9:string}",
            "    session_token: ${10:string}",
            "    topic_arn: ${11:string}",
            "    validate_certs: ${12|true,false|}",
            "$0"
        ],
        "description": "sns_topic_info module",
        "scope": "ansible"
    },
    "Creates or deletes AWS SQS queues": {
        "prefix": [
            "community.aws.sqs_queue",
            "Creates or deletes AWS SQS queues"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.sqs_queue:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    content_based_deduplication: ${5|false,true|}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    delay_seconds: ${7:int}",
            "    endpoint_url: ${8:string}",
            "    kms_data_key_reuse_period_seconds: ${9:int}",
            "    kms_master_key_id: ${10:string}",
            "    maximum_message_size: ${11:int}",
            "    message_retention_period: ${12:int}",
            "    name: ${13:string}",
            "    profile: ${15:string}",
            "    purge_tags: ${16|true,false|}",
            "    queue_type: ${17|standard,fifo|}",
            "    receive_message_wait_time_seconds: ${18:int}",
            "    region: ${20:string}",
            "    secret_key: ${21:string}",
            "    session_token: ${22:string}",
            "    state: ${23|present,absent|}",
            "    validate_certs: ${25|true,false|}",
            "    visibility_timeout: ${26:int}",
            "$0"
        ],
        "description": "Creates or deletes AWS SQS queues",
        "scope": "ansible"
    },
    "Manage key-value pairs in AWS Systems Manager Parameter Store": {
        "prefix": [
            "community.aws.ssm_parameter",
            "Manage key-value pairs in AWS Systems Manager Parameter Store"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.ssm_parameter:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    decryption: ${6|true,false|}",
            "    description: ${7:string}",
            "    endpoint_url: ${8:string}",
            "    key_id: ${9:alias/aws/ssm}",
            "    name: ${10:string}",
            "    overwrite_value: ${11|changed,never,always|}",
            "    profile: ${12:string}",
            "    region: ${13:string}",
            "    secret_key: ${14:string}",
            "    session_token: ${15:string}",
            "    state: ${16|present,absent|}",
            "    string_type: ${17|String,StringList,SecureString|}",
            "    tier: ${18|Standard,Advanced,Intelligent-Tiering|}",
            "    validate_certs: ${19|true,false|}",
            "    value: ${20:string}",
            "$0"
        ],
        "description": "Manage key-value pairs in AWS Systems Manager Parameter Store",
        "scope": "ansible"
    },
    "Manage AWS Step Functions state machines": {
        "prefix": [
            "community.aws.stepfunctions_state_machine",
            "Manage AWS Step Functions state machines"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.stepfunctions_state_machine:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${7:string}",
            "    name: ${8:string}",
            "    profile: ${9:string}",
            "    purge_tags: ${10|true,false|}",
            "    region: ${11:string}",
            "    role_arn: ${12:string}",
            "    secret_key: ${13:string}",
            "    session_token: ${14:string}",
            "    state: ${15|present,absent|}",
            "    validate_certs: ${17|true,false|}",
            "$0"
        ],
        "description": "Manage AWS Step Functions state machines",
        "scope": "ansible"
    },
    "Start or stop execution of an AWS Step Functions state machine": {
        "prefix": [
            "community.aws.stepfunctions_state_machine_execution",
            "Start or stop execution of an AWS Step Functions state machine"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.stepfunctions_state_machine_execution:",
            "    access_key: ${2:string}",
            "    action: ${3|start,stop|}",
            "    aws_ca_bundle: ${4:path}",
            "    cause: ${6:}",
            "    debug_botocore_endpoint_logs: ${7|false,true|}",
            "    endpoint_url: ${8:string}",
            "    error: ${9:}",
            "    execution_arn: ${10:string}",
            "    name: ${12:string}",
            "    profile: ${13:string}",
            "    region: ${14:string}",
            "    secret_key: ${15:string}",
            "    session_token: ${16:string}",
            "    state_machine_arn: ${17:string}",
            "    validate_certs: ${18|true,false|}",
            "$0"
        ],
        "description": "Start or stop execution of an AWS Step Functions state machine",
        "scope": "ansible"
    },
    "Fetch AWS Storage Gateway information": {
        "prefix": [
            "community.aws.storagegateway_info",
            "Fetch AWS Storage Gateway information"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.storagegateway_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    gather_file_shares: ${7|true,false|}",
            "    gather_local_disks: ${8|true,false|}",
            "    gather_tapes: ${9|true,false|}",
            "    gather_volumes: ${10|true,false|}",
            "    profile: ${11:string}",
            "    region: ${12:string}",
            "    secret_key: ${13:string}",
            "    session_token: ${14:string}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "Fetch AWS Storage Gateway information",
        "scope": "ansible"
    },
    "Assume a role using AWS Security Token Service and obtain temporary credentials": {
        "prefix": [
            "community.aws.sts_assume_role",
            "Assume a role using AWS Security Token Service and obtain temporary credentials"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.sts_assume_role:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    duration_seconds: ${6:int}",
            "    endpoint_url: ${7:string}",
            "    external_id: ${8:string}",
            "    mfa_serial_number: ${9:string}",
            "    mfa_token: ${10:string}",
            "    policy: ${11:string}",
            "    profile: ${12:string}",
            "    region: ${13:string}",
            "    role_arn: ${14:string}",
            "    role_session_name: ${15:string}",
            "    secret_key: ${16:string}",
            "    session_token: ${17:string}",
            "    validate_certs: ${18|true,false|}",
            "$0"
        ],
        "description": "Assume a role using AWS Security Token Service and obtain temporary credentials",
        "scope": "ansible"
    },
    "Obtain a session token from the AWS Security Token Service": {
        "prefix": [
            "community.aws.sts_session_token",
            "Obtain a session token from the AWS Security Token Service"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.sts_session_token:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    duration_seconds: ${6:int}",
            "    endpoint_url: ${7:string}",
            "    mfa_serial_number: ${8:string}",
            "    mfa_token: ${9:string}",
            "    profile: ${10:string}",
            "    region: ${11:string}",
            "    secret_key: ${12:string}",
            "    session_token: ${13:string}",
            "    validate_certs: ${14|true,false|}",
            "$0"
        ],
        "description": "Obtain a session token from the AWS Security Token Service",
        "scope": "ansible"
    },
    "Create and delete WAF Conditions": {
        "prefix": [
            "community.aws.waf_condition",
            "Create and delete WAF Conditions"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.waf_condition:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    filters:",
            "      - ${7:element}",
            "    name: ${8:string}",
            "    profile: ${9:string}",
            "    purge_filters: ${10|false,true|}",
            "    region: ${11:string}",
            "    secret_key: ${12:string}",
            "    session_token: ${13:string}",
            "    state: ${14|present,absent|}",
            "    type: ${15:string}",
            "    validate_certs: ${16|true,false|}",
            "    waf_regional: ${17|false,true|}",
            "$0"
        ],
        "description": "Create and delete WAF Conditions",
        "scope": "ansible"
    },
    "Retrieve information for WAF ACLs, Rules, Conditions and Filters": {
        "prefix": [
            "community.aws.waf_info",
            "Retrieve information for WAF ACLs, Rules, Conditions and Filters"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.waf_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    name: ${7:string}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    secret_key: ${10:string}",
            "    session_token: ${11:string}",
            "    validate_certs: ${12|true,false|}",
            "    waf_regional: ${13|false,true|}",
            "$0"
        ],
        "description": "Retrieve information for WAF ACLs, Rules, Conditions and Filters",
        "scope": "ansible"
    },
    "Create and delete WAF Rules": {
        "prefix": [
            "community.aws.waf_rule",
            "Create and delete WAF Rules"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.waf_rule:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    conditions:",
            "      - ${5:element}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    metric_name: ${8:string}",
            "    name: ${9:string}",
            "    profile: ${10:string}",
            "    purge_conditions: ${11|false,true|}",
            "    region: ${12:string}",
            "    secret_key: ${13:string}",
            "    session_token: ${14:string}",
            "    state: ${15|present,absent|}",
            "    validate_certs: ${16|true,false|}",
            "    waf_regional: ${17|false,true|}",
            "$0"
        ],
        "description": "Create and delete WAF Rules",
        "scope": "ansible"
    },
    "Create and delete WAF Web ACLs": {
        "prefix": [
            "community.aws.wafv2_web_acl",
            "Create and delete WAF Web ACLs"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.wafv2_web_acl:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    cloudwatch_metrics: ${5|true,false|}",
            "    debug_botocore_endpoint_logs: ${7|false,true|}",
            "    default_action: ${8:string}",
            "    description: ${9:string}",
            "    endpoint_url: ${10:string}",
            "    metric_name: ${11:string}",
            "    name: ${12:string}",
            "    profile: ${13:string}",
            "    purge_rules: ${14|true,false|}",
            "    purge_tags: ${15|true,false|}",
            "    region: ${16:string}",
            "    rules:",
            "      - ${17:element}",
            "    sampled_requests: ${18|false,true|}",
            "    scope: ${19:string}",
            "    secret_key: ${20:string}",
            "    session_token: ${21:string}",
            "    state: ${22:string}",
            "    validate_certs: ${24|true,false|}",
            "$0"
        ],
        "description": "Create and delete WAF Web ACLs",
        "scope": "ansible"
    },
    "wafv2_ip_set": {
        "prefix": [
            "community.aws.wafv2_ip_set",
            "wafv2_ip_set"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.wafv2_ip_set:",
            "    access_key: ${2:string}",
            "    addresses:",
            "      - ${3:element}",
            "    aws_ca_bundle: ${4:path}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    description: ${7:string}",
            "    endpoint_url: ${8:string}",
            "    ip_address_version: ${9:string}",
            "    name: ${10:string}",
            "    profile: ${11:string}",
            "    purge_addresses: ${12|true,false|}",
            "    purge_tags: ${13|true,false|}",
            "    region: ${14:string}",
            "    scope: ${15:string}",
            "    secret_key: ${16:string}",
            "    session_token: ${17:string}",
            "    state: ${18:string}",
            "    validate_certs: ${20|true,false|}",
            "$0"
        ],
        "description": "wafv2_ip_set",
        "scope": "ansible"
    },
    "Get information about wafv2 ip sets": {
        "prefix": [
            "community.aws.wafv2_ip_set_info",
            "Get information about wafv2 ip sets"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.wafv2_ip_set_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    name: ${7:string}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    scope: ${10:string}",
            "    secret_key: ${11:string}",
            "    session_token: ${12:string}",
            "    validate_certs: ${13|true,false|}",
            "$0"
        ],
        "description": "Get information about wafv2 ip sets",
        "scope": "ansible"
    },
    "wafv2_web_acl": {
        "prefix": [
            "community.aws.wafv2_web_acl_info",
            "wafv2_web_acl"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.wafv2_web_acl_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    name: ${7:string}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    scope: ${10:string}",
            "    secret_key: ${11:string}",
            "    session_token: ${12:string}",
            "    validate_certs: ${13|true,false|}",
            "$0"
        ],
        "description": "wafv2_web_acl",
        "scope": "ansible"
    },
    "wafv2_resources_info": {
        "prefix": [
            "community.aws.wafv2_resources_info",
            "wafv2_resources_info"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.wafv2_resources_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    name: ${7:string}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    scope: ${10:string}",
            "    secret_key: ${11:string}",
            "    session_token: ${12:string}",
            "    validate_certs: ${13|true,false|}",
            "$0"
        ],
        "description": "wafv2_resources_info",
        "scope": "ansible"
    },
    "wafv2_web_acl_info": {
        "prefix": [
            "community.aws.wafv2_rule_group_info",
            "wafv2_web_acl_info"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.aws.wafv2_rule_group_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    name: ${7:string}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    scope: ${10:string}",
            "    secret_key: ${11:string}",
            "    session_token: ${12:string}",
            "    state: ${13:string}",
            "    validate_certs: ${14|true,false|}",
            "$0"
        ],
        "description": "wafv2_web_acl_info",
        "scope": "ansible"
    }
}