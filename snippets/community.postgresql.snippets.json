{
    "Copy data between a file/program and a PostgreSQL table": {
        "prefix": [
            "community.postgresql.postgresql_copy",
            "postgresql_copy Copy data between a file/program and a PostgreSQL table"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.postgresql.postgresql_copy:",
            "    ca_cert: ${2:string}",
            "    columns:",
            "      - ${3:element}",
            "    copy_from: ${5:/tmp/test}",
            "    copy_to: ${6:/tmp/test}",
            "    db: ${7:string}",
            "    dst: ${8:string}",
            "    login_host: ${9:}",
            "    login_password: ${10:}",
            "    login_unix_socket: ${11:}",
            "    login_user: ${12:postgres}",
            "    port: ${14:5432}",
            "    program: ${15|false,true|}",
            "    session_role: ${16:string}",
            "    src: ${17:string}",
            "    ssl_mode: ${18|prefer,allow,disable,require,verify-ca,verify-full|}",
            "    trust_input: ${19|true,false|}",
            "$0"
        ],
        "description": "Copy data between a file/program and a PostgreSQL table",
        "scope": "ansible"
    },
    "Add or remove PostgreSQL databases from a remote host": {
        "prefix": [
            "community.postgresql.postgresql_db",
            "postgresql_db Add or remove PostgreSQL databases from a remote host"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.postgresql.postgresql_db:",
            "    ca_cert: ${2:string}",
            "    conn_limit: ${3:}",
            "    dump_extra_args: ${5:string}",
            "    encoding: ${6:}",
            "    force: ${7|false,true|}",
            "    lc_collate: ${8:}",
            "    lc_ctype: ${9:}",
            "    login_host: ${10:}",
            "    login_password: ${11:}",
            "    login_unix_socket: ${12:}",
            "    login_user: ${13:postgres}",
            "    maintenance_db: ${14:postgres}",
            "    name: ${15:string}",
            "    owner: ${16:}",
            "    port: ${17:5432}",
            "    session_role: ${18:string}",
            "    ssl_mode: ${19|prefer,allow,disable,require,verify-ca,verify-full|}",
            "    state: ${20|present,absent,dump,rename,restore|}",
            "    tablespace: ${21:/tmp/test}",
            "    target: ${22:/tmp/test}",
            "    target_opts: ${23:}",
            "    template: ${24:}",
            "    trust_input: ${25|true,false|}",
            "$0"
        ],
        "description": "Add or remove PostgreSQL databases from a remote host",
        "scope": "ansible"
    },
    "Add or remove PostgreSQL extensions from a database": {
        "prefix": [
            "community.postgresql.postgresql_ext",
            "postgresql_ext Add or remove PostgreSQL extensions from a database"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.postgresql.postgresql_ext:",
            "    ca_cert: ${2:string}",
            "    cascade: ${3|false,true|}",
            "    db: ${5:string}",
            "    login_host: ${6:}",
            "    login_password: ${7:}",
            "    login_unix_socket: ${8:}",
            "    login_user: ${9:postgres}",
            "    name: ${10:string}",
            "    port: ${11:5432}",
            "    schema: ${12:string}",
            "    session_role: ${13:string}",
            "    ssl_mode: ${14|prefer,allow,disable,require,verify-ca,verify-full|}",
            "    state: ${15|present,absent|}",
            "    trust_input: ${16|true,false|}",
            "    version: ${17:string}",
            "$0"
        ],
        "description": "Add or remove PostgreSQL extensions from a database",
        "scope": "ansible"
    },
    "Create or drop indexes from a PostgreSQL database": {
        "prefix": [
            "community.postgresql.postgresql_idx",
            "postgresql_idx Create or drop indexes from a PostgreSQL database"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.postgresql.postgresql_idx:",
            "    ca_cert: ${2:string}",
            "    cascade: ${3|false,true|}",
            "    columns:",
            "      - ${4:element}",
            "    concurrent: ${5|true,false|}",
            "    cond: ${6:string}",
            "    db: ${8:string}",
            "    idxname: ${9:string}",
            "    idxtype: ${10:string}",
            "    login_host: ${11:}",
            "    login_password: ${12:}",
            "    login_unix_socket: ${13:}",
            "    login_user: ${14:postgres}",
            "    port: ${15:5432}",
            "    schema: ${16:string}",
            "    session_role: ${17:string}",
            "    ssl_mode: ${18|prefer,allow,disable,require,verify-ca,verify-full|}",
            "    state: ${19|present,absent|}",
            "    storage_params:",
            "      - ${20:element}",
            "    table: ${21:string}",
            "    tablespace: ${22:string}",
            "    trust_input: ${23|true,false|}",
            "    unique: ${24|false,true|}",
            "$0"
        ],
        "description": "Create or drop indexes from a PostgreSQL database",
        "scope": "ansible"
    },
    "Gather information about PostgreSQL servers": {
        "prefix": [
            "community.postgresql.postgresql_info",
            "postgresql_info Gather information about PostgreSQL servers"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.postgresql.postgresql_info:",
            "    ca_cert: ${2:string}",
            "    db: ${4:string}",
            "    filter:",
            "      - ${5:element}",
            "    login_host: ${6:}",
            "    login_password: ${7:}",
            "    login_unix_socket: ${8:}",
            "    login_user: ${9:postgres}",
            "    port: ${10:5432}",
            "    session_role: ${11:string}",
            "    ssl_mode: ${12|prefer,allow,disable,require,verify-ca,verify-full|}",
            "    trust_input: ${13|true,false|}",
            "$0"
        ],
        "description": "Gather information about PostgreSQL servers",
        "scope": "ansible"
    },
    "Adds, removes or changes procedural languages with a PostgreSQL database": {
        "prefix": [
            "community.postgresql.postgresql_lang",
            "postgresql_lang Adds, removes or changes procedural languages with a PostgreSQL database"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.postgresql.postgresql_lang:",
            "    ca_cert: ${2:string}",
            "    cascade: ${3|true,false|}",
            "    db: ${5:string}",
            "    fail_on_drop: ${6|true,false|}",
            "    force_trust: ${7|true,false|}",
            "    lang: ${8:string}",
            "    login_host: ${9:}",
            "    login_password: ${10:}",
            "    login_unix_socket: ${11:}",
            "    login_user: ${12:postgres}",
            "    owner: ${13:string}",
            "    port: ${14:5432}",
            "    session_role: ${15:string}",
            "    ssl_mode: ${16|prefer,allow,disable,require,verify-ca,verify-full|}",
            "    state: ${17|present,absent|}",
            "    trust: ${18|true,false|}",
            "    trust_input: ${19|true,false|}",
            "$0"
        ],
        "description": "Adds, removes or changes procedural languages with a PostgreSQL database",
        "scope": "ansible"
    },
    "Add or remove PostgreSQL roles from groups": {
        "prefix": [
            "community.postgresql.postgresql_membership",
            "postgresql_membership Add or remove PostgreSQL roles from groups"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.postgresql.postgresql_membership:",
            "    ca_cert: ${2:string}",
            "    db: ${4:string}",
            "    fail_on_role: ${5|true,false|}",
            "    groups:",
            "      - ${6:element}",
            "    login_host: ${7:}",
            "    login_password: ${8:}",
            "    login_unix_socket: ${9:}",
            "    login_user: ${10:postgres}",
            "    port: ${11:5432}",
            "    session_role: ${12:string}",
            "    ssl_mode: ${13|prefer,allow,disable,require,verify-ca,verify-full|}",
            "    state: ${14|present,absent,exact|}",
            "    target_roles:",
            "      - ${15:element}",
            "    trust_input: ${16|true,false|}",
            "$0"
        ],
        "description": "Add or remove PostgreSQL roles from groups",
        "scope": "ansible"
    },
    "Change an owner of PostgreSQL database object": {
        "prefix": [
            "community.postgresql.postgresql_owner",
            "postgresql_owner Change an owner of PostgreSQL database object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.postgresql.postgresql_owner:",
            "    ca_cert: ${2:string}",
            "    db: ${4:string}",
            "    fail_on_role: ${5|true,false|}",
            "    login_host: ${6:}",
            "    login_password: ${7:}",
            "    login_unix_socket: ${8:}",
            "    login_user: ${9:postgres}",
            "    new_owner: ${10:string}",
            "    obj_name: ${11:string}",
            "    obj_type: ${12|database,function,matview,sequence,schema,table,tablespace,view|}",
            "    port: ${13:5432}",
            "    reassign_owned_by:",
            "      - ${14:element}",
            "    session_role: ${15:string}",
            "    ssl_mode: ${16|prefer,allow,disable,require,verify-ca,verify-full|}",
            "    trust_input: ${17|true,false|}",
            "$0"
        ],
        "description": "Change an owner of PostgreSQL database object",
        "scope": "ansible"
    },
    "Add, remove or modify a rule in a pg_hba file": {
        "prefix": [
            "community.postgresql.postgresql_pg_hba",
            "postgresql_pg_hba Add, remove or modify a rule in a pg_hba file"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.postgresql.postgresql_pg_hba:",
            "    address: ${2:samehost}",
            "    attributes: ${3:string}",
            "    backup: ${4|false,true|}",
            "    backup_file: ${5:string}",
            "    comment: ${6:string}",
            "    contype: ${7|local,host,hostnossl,hostssl,hostgssenc,hostnogssenc|}",
            "    create: ${8|false,true|}",
            "    databases: ${9:all}",
            "    dest: ${10:/tmp/test}",
            "    group: ${11:string}",
            "    keep_comments_at_rules: ${12|false,true|}",
            "    method: ${13|md5,cert,gss,ident,krb5,ldap,pam,password,peer,radius,reject,scram-sha-256,sspi,trust|}",
            "    mode: ${14|\"0755\",\"0750\",\"0700\",\"0644\",\"0640\",\"0600\"|}",
            "    netmask: ${15:string}",
            "    options: ${16:string}",
            "    order: ${17|sdu,sud,dsu,dus,usd,uds|}",
            "    overwrite: ${18|false,true|}",
            "    owner: ${19:string}",
            "    rules:",
            "      - ${20:element}",
            "    rules_behavior: ${21|conflict,combine|}",
            "    selevel: ${22:string}",
            "    serole: ${23:string}",
            "    setype: ${24:string}",
            "    seuser: ${25:string}",
            "    state: ${26|present,absent|}",
            "    unsafe_writes: ${27|false,true|}",
            "    users: ${28:all}",
            "$0"
        ],
        "description": "Add, remove or modify a rule in a pg_hba file",
        "scope": "ansible"
    },
    "Check remote PostgreSQL server availability": {
        "prefix": [
            "community.postgresql.postgresql_ping",
            "postgresql_ping Check remote PostgreSQL server availability"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.postgresql.postgresql_ping:",
            "    ca_cert: ${2:string}",
            "    db: ${4:string}",
            "    login_host: ${5:}",
            "    login_password: ${6:}",
            "    login_unix_socket: ${7:}",
            "    login_user: ${8:postgres}",
            "    port: ${9:5432}",
            "    session_role: ${10:string}",
            "    ssl_mode: ${11|prefer,allow,disable,require,verify-ca,verify-full|}",
            "    trust_input: ${12|true,false|}",
            "$0"
        ],
        "description": "Check remote PostgreSQL server availability",
        "scope": "ansible"
    },
    "Grant or revoke privileges on PostgreSQL database objects": {
        "prefix": [
            "community.postgresql.postgresql_privs",
            "postgresql_privs Grant or revoke privileges on PostgreSQL database objects"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.postgresql.postgresql_privs:",
            "    ca_cert: ${2:string}",
            "    database: ${4:string}",
            "    fail_on_role: ${5|true,false|}",
            "    grant_option: ${6|false,true|}",
            "    host: ${7:}",
            "    login: ${8:postgres}",
            "    login_host: ${9:}",
            "    login_password: ${10:}",
            "    login_unix_socket: ${11:}",
            "    login_user: ${12:postgres}",
            "    objs: ${13:string}",
            "    password: ${14:}",
            "    port: ${15:5432}",
            "    privs: ${16:string}",
            "    roles: ${17:string}",
            "    schema: ${18:string}",
            "    session_role: ${19:string}",
            "    ssl_mode: ${20|prefer,allow,disable,require,verify-ca,verify-full|}",
            "    state: ${21|present,absent|}",
            "    target_roles: ${22:string}",
            "    trust_input: ${23|true,false|}",
            "    type: ${24|table,database,default_privs,foreign_data_wrapper,foreign_server,function,group,language,tablespace,schema,sequence,type,procedure|}",
            "    unix_socket: ${25:}",
            "    usage_on_types: ${26|true,false|}",
            "$0"
        ],
        "description": "Grant or revoke privileges on PostgreSQL database objects",
        "scope": "ansible"
    },
    "Add, update, or remove PostgreSQL publication": {
        "prefix": [
            "community.postgresql.postgresql_publication",
            "postgresql_publication Add, update, or remove PostgreSQL publication"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.postgresql.postgresql_publication:",
            "    ca_cert: ${2:string}",
            "    cascade: ${3|false,true|}",
            "    db: ${5:string}",
            "    login_host: ${6:}",
            "    login_password: ${7:}",
            "    login_unix_socket: ${8:}",
            "    login_user: ${9:postgres}",
            "    name: ${10:string}",
            "    owner: ${11:string}",
            "    port: ${13:5432}",
            "    session_role: ${14:string}",
            "    ssl_mode: ${15|prefer,allow,disable,require,verify-ca,verify-full|}",
            "    state: ${16|present,absent|}",
            "    tables:",
            "      - ${17:element}",
            "    trust_input: ${18|true,false|}",
            "$0"
        ],
        "description": "Add, update, or remove PostgreSQL publication",
        "scope": "ansible"
    },
    "Run PostgreSQL queries": {
        "prefix": [
            "community.postgresql.postgresql_query",
            "postgresql_query Run PostgreSQL queries"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.postgresql.postgresql_query:",
            "    as_single_query: ${2|true,false|}",
            "    autocommit: ${3|false,true|}",
            "    ca_cert: ${4:string}",
            "    db: ${6:string}",
            "    encoding: ${7:string}",
            "    login_host: ${8:}",
            "    login_password: ${9:}",
            "    login_unix_socket: ${10:}",
            "    login_user: ${11:postgres}",
            "    path_to_script: ${13:/tmp/test}",
            "    port: ${14:5432}",
            "    positional_args:",
            "      - ${15:element}",
            "    query: ${16:string}",
            "    search_path:",
            "      - ${17:element}",
            "    session_role: ${18:string}",
            "    ssl_mode: ${19|prefer,allow,disable,require,verify-ca,verify-full|}",
            "    trust_input: ${20|true,false|}",
            "$0"
        ],
        "description": "Run PostgreSQL queries",
        "scope": "ansible"
    },
    "Add or remove PostgreSQL schema": {
        "prefix": [
            "community.postgresql.postgresql_schema",
            "postgresql_schema Add or remove PostgreSQL schema"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.postgresql.postgresql_schema:",
            "    ca_cert: ${2:string}",
            "    cascade_drop: ${3|false,true|}",
            "    database: ${5:postgres}",
            "    login_host: ${6:}",
            "    login_password: ${7:}",
            "    login_unix_socket: ${8:}",
            "    login_user: ${9:postgres}",
            "    name: ${10:string}",
            "    owner: ${11:}",
            "    port: ${12:5432}",
            "    session_role: ${13:string}",
            "    ssl_mode: ${14|prefer,allow,disable,require,verify-ca,verify-full|}",
            "    state: ${15|present,absent|}",
            "    trust_input: ${16|true,false|}",
            "$0"
        ],
        "description": "Add or remove PostgreSQL schema",
        "scope": "ansible"
    },
    "Run PostgreSQL statements from a file": {
        "prefix": [
            "community.postgresql.postgresql_script",
            "postgresql_script Run PostgreSQL statements from a file"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.postgresql.postgresql_script:",
            "    ca_cert: ${2:string}",
            "    db: ${4:string}",
            "    encoding: ${5:string}",
            "    login_host: ${6:}",
            "    login_password: ${7:}",
            "    login_unix_socket: ${8:}",
            "    login_user: ${9:postgres}",
            "    path: ${11:/tmp/test}",
            "    port: ${12:5432}",
            "    positional_args:",
            "      - ${13:element}",
            "    search_path:",
            "      - ${14:element}",
            "    session_role: ${15:string}",
            "    ssl_mode: ${16|prefer,allow,disable,require,verify-ca,verify-full|}",
            "    trust_input: ${17|true,false|}",
            "$0"
        ],
        "description": "Run PostgreSQL statements from a file",
        "scope": "ansible"
    },
    "Create, drop, or alter a PostgreSQL sequence": {
        "prefix": [
            "community.postgresql.postgresql_sequence",
            "postgresql_sequence Create, drop, or alter a PostgreSQL sequence"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.postgresql.postgresql_sequence:",
            "    ca_cert: ${2:string}",
            "    cache: ${3:int}",
            "    cascade: ${4|false,true|}",
            "    cycle: ${6|false,true|}",
            "    data_type: ${7|bigint,integer,smallint|}",
            "    db: ${8:}",
            "    increment: ${9:int}",
            "    login_host: ${10:}",
            "    login_password: ${11:}",
            "    login_unix_socket: ${12:}",
            "    login_user: ${13:postgres}",
            "    maxvalue: ${14:int}",
            "    minvalue: ${15:int}",
            "    newschema: ${16:string}",
            "    owner: ${17:string}",
            "    port: ${18:5432}",
            "    rename_to: ${19:string}",
            "    schema: ${20:public}",
            "    sequence: ${21:string}",
            "    session_role: ${22:string}",
            "    ssl_mode: ${23|prefer,allow,disable,require,verify-ca,verify-full|}",
            "    start: ${24:int}",
            "    state: ${25|present,absent|}",
            "    trust_input: ${26|true,false|}",
            "$0"
        ],
        "description": "Create, drop, or alter a PostgreSQL sequence",
        "scope": "ansible"
    },
    "Change a PostgreSQL server configuration parameter": {
        "prefix": [
            "community.postgresql.postgresql_set",
            "postgresql_set Change a PostgreSQL server configuration parameter"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.postgresql.postgresql_set:",
            "    ca_cert: ${2:string}",
            "    db: ${4:string}",
            "    login_host: ${5:}",
            "    login_password: ${6:}",
            "    login_unix_socket: ${7:}",
            "    login_user: ${8:postgres}",
            "    name: ${9:string}",
            "    port: ${10:5432}",
            "    reset: ${11|false,true|}",
            "    session_role: ${12:string}",
            "    ssl_mode: ${13|prefer,allow,disable,require,verify-ca,verify-full|}",
            "    trust_input: ${14|true,false|}",
            "    value: ${15:string}",
            "$0"
        ],
        "description": "Change a PostgreSQL server configuration parameter",
        "scope": "ansible"
    },
    "Add or remove replication slots from a PostgreSQL database": {
        "prefix": [
            "community.postgresql.postgresql_slot",
            "postgresql_slot Add or remove replication slots from a PostgreSQL database"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.postgresql.postgresql_slot:",
            "    ca_cert: ${2:string}",
            "    db: ${4:string}",
            "    immediately_reserve: ${5|false,true|}",
            "    login_host: ${6:}",
            "    login_password: ${7:}",
            "    login_unix_socket: ${8:}",
            "    login_user: ${9:postgres}",
            "    name: ${10:string}",
            "    output_plugin: ${11:test_decoding}",
            "    port: ${12:5432}",
            "    session_role: ${13:string}",
            "    slot_type: ${14|physical,logical|}",
            "    ssl_mode: ${15|prefer,allow,disable,require,verify-ca,verify-full|}",
            "    state: ${16|present,absent|}",
            "    trust_input: ${17|true,false|}",
            "$0"
        ],
        "description": "Add or remove replication slots from a PostgreSQL database",
        "scope": "ansible"
    },
    "Add, update, or remove PostgreSQL subscription": {
        "prefix": [
            "community.postgresql.postgresql_subscription",
            "postgresql_subscription Add, update, or remove PostgreSQL subscription"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.postgresql.postgresql_subscription:",
            "    ca_cert: ${2:string}",
            "    cascade: ${3|false,true|}",
            "    db: ${6:string}",
            "    login_host: ${7:}",
            "    login_password: ${8:}",
            "    login_unix_socket: ${9:}",
            "    login_user: ${10:postgres}",
            "    name: ${11:string}",
            "    owner: ${12:string}",
            "    port: ${13:5432}",
            "    publications:",
            "      - ${14:element}",
            "    session_role: ${15:string}",
            "    ssl_mode: ${16|prefer,allow,disable,require,verify-ca,verify-full|}",
            "    state: ${17|present,absent,refresh|}",
            "    trust_input: ${19|true,false|}",
            "$0"
        ],
        "description": "Add, update, or remove PostgreSQL subscription",
        "scope": "ansible"
    },
    "Create, drop, or modify a PostgreSQL table": {
        "prefix": [
            "community.postgresql.postgresql_table",
            "postgresql_table Create, drop, or modify a PostgreSQL table"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.postgresql.postgresql_table:",
            "    ca_cert: ${2:string}",
            "    cascade: ${3|false,true|}",
            "    columns:",
            "      - ${4:element}",
            "    db: ${6:}",
            "    including: ${7:string}",
            "    like: ${8:string}",
            "    login_host: ${9:}",
            "    login_password: ${10:}",
            "    login_unix_socket: ${11:}",
            "    login_user: ${12:postgres}",
            "    owner: ${13:string}",
            "    port: ${14:5432}",
            "    rename: ${15:string}",
            "    session_role: ${16:string}",
            "    ssl_mode: ${17|prefer,allow,disable,require,verify-ca,verify-full|}",
            "    state: ${18|present,absent|}",
            "    storage_params:",
            "      - ${19:element}",
            "    table: ${20:string}",
            "    tablespace: ${21:string}",
            "    truncate: ${22|false,true|}",
            "    trust_input: ${23|true,false|}",
            "    unlogged: ${24|false,true|}",
            "$0"
        ],
        "description": "Create, drop, or modify a PostgreSQL table",
        "scope": "ansible"
    },
    "Add or remove PostgreSQL tablespaces from remote hosts": {
        "prefix": [
            "community.postgresql.postgresql_tablespace",
            "postgresql_tablespace Add or remove PostgreSQL tablespaces from remote hosts"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.postgresql.postgresql_tablespace:",
            "    ca_cert: ${2:string}",
            "    db: ${4:string}",
            "    location: ${5:/tmp/test}",
            "    login_host: ${6:}",
            "    login_password: ${7:}",
            "    login_unix_socket: ${8:}",
            "    login_user: ${9:postgres}",
            "    owner: ${10:string}",
            "    port: ${11:5432}",
            "    rename_to: ${12:string}",
            "    session_role: ${13:string}",
            "    ssl_mode: ${15|prefer,allow,disable,require,verify-ca,verify-full|}",
            "    state: ${16|present,absent|}",
            "    tablespace: ${17:string}",
            "    trust_input: ${18|true,false|}",
            "$0"
        ],
        "description": "Add or remove PostgreSQL tablespaces from remote hosts",
        "scope": "ansible"
    },
    "Create, alter, or remove a user (role) from a PostgreSQL server instance": {
        "prefix": [
            "community.postgresql.postgresql_user",
            "postgresql_user Create, alter, or remove a user (role) from a PostgreSQL server instance"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.postgresql.postgresql_user:",
            "    ca_cert: ${2:string}",
            "    comment: ${3:string}",
            "    conn_limit: ${4:int}",
            "    db: ${6:}",
            "    encrypted: ${7|true,false|}",
            "    expires: ${8:string}",
            "    fail_on_user: ${9|true,false|}",
            "    groups:",
            "      - ${10:element}",
            "    login_host: ${11:}",
            "    login_password: ${12:}",
            "    login_unix_socket: ${13:}",
            "    login_user: ${14:postgres}",
            "    name: ${15:string}",
            "    no_password_changes: ${16|false,true|}",
            "    password: ${17:string}",
            "    port: ${18:5432}",
            "    priv: ${19:string}",
            "    role_attr_flags: ${20:}",
            "    session_role: ${21:string}",
            "    ssl_mode: ${22|prefer,allow,disable,require,verify-ca,verify-full|}",
            "    state: ${23|present,absent|}",
            "    trust_input: ${24|true,false|}",
            "$0"
        ],
        "description": "Create, alter, or remove a user (role) from a PostgreSQL server instance",
        "scope": "ansible"
    },
    "Gather statistics about PostgreSQL user objects": {
        "prefix": [
            "community.postgresql.postgresql_user_obj_stat_info",
            "postgresql_user_obj_stat_info Gather statistics about PostgreSQL user objects"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.postgresql.postgresql_user_obj_stat_info:",
            "    ca_cert: ${2:string}",
            "    db: ${4:string}",
            "    filter:",
            "      - ${5:element}",
            "    login_host: ${6:}",
            "    login_password: ${7:}",
            "    login_unix_socket: ${8:}",
            "    login_user: ${9:postgres}",
            "    port: ${10:5432}",
            "    schema: ${11:string}",
            "    session_role: ${12:string}",
            "    ssl_mode: ${13|prefer,allow,disable,require,verify-ca,verify-full|}",
            "    trust_input: ${14|true,false|}",
            "$0"
        ],
        "description": "Gather statistics about PostgreSQL user objects",
        "scope": "ansible"
    }
}