{
    "Create or delete address scopes from OpenStack": {
        "prefix": [
            "openstack.cloud.address_scope",
            "Create or delete address scopes from OpenStack"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.address_scope:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    interface: ${11|public,admin,internal|}",
            "    ip_version: ${12|4,6|}",
            "    name: ${13:string}",
            "    project: ${14:string}",
            "    region_name: ${15:string}",
            "    sdk_log_level: ${16|INFO,DEBUG|}",
            "    sdk_log_path: ${17:string}",
            "    shared: ${18|true,false|}",
            "    state: ${19|present,absent|}",
            "    timeout: ${20:180}",
            "    validate_certs: ${21|false,true|}",
            "    wait: ${22|true,false|}",
            "$0"
        ],
        "description": "Create or delete address scopes from OpenStack",
        "scope": "ansible"
    },
    "Retrieve an auth token": {
        "prefix": [
            "openstack.cloud.auth",
            "Retrieve an auth token"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.auth:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    interface: ${10|public,admin,internal|}",
            "    region_name: ${11:string}",
            "    sdk_log_level: ${12|INFO,DEBUG|}",
            "    sdk_log_path: ${13:string}",
            "    timeout: ${14:180}",
            "    validate_certs: ${15|false,true|}",
            "    wait: ${16|true,false|}",
            "$0"
        ],
        "description": "Retrieve an auth token",
        "scope": "ansible"
    },
    "Explicitly triggers baremetal node introspection in ironic.": {
        "prefix": [
            "openstack.cloud.baremetal_inspect",
            "Explicitly triggers baremetal node introspection in ironic."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.baremetal_inspect:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    interface: ${10|public,admin,internal|}",
            "    ironic_url: ${11:string}",
            "    mac: ${12:string}",
            "    name: ${13:string}",
            "    region_name: ${14:string}",
            "    sdk_log_level: ${15|INFO,DEBUG|}",
            "    sdk_log_path: ${16:string}",
            "    timeout: ${17:1200}",
            "    uuid: ${18:string}",
            "    validate_certs: ${19|false,true|}",
            "    wait: ${20|true,false|}",
            "$0"
        ],
        "description": "Explicitly triggers baremetal node introspection in ironic.",
        "scope": "ansible"
    },
    "Create/Delete Bare Metal Resources from OpenStack": {
        "prefix": [
            "openstack.cloud.baremetal_node",
            "Create/Delete Bare Metal Resources from OpenStack"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.baremetal_node:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    bios_interface: ${6:string}",
            "    boot_interface: ${7:string}",
            "    ca_cert: ${8:string}",
            "    chassis_uuid: ${9:string}",
            "    client_cert: ${10:string}",
            "    client_key: ${11:string}",
            "    cloud: ${12:\"raw\"}",
            "    console_interface: ${13:string}",
            "    deploy_interface: ${14:string}",
            "    driver: ${15:string}",
            "    inspect_interface: ${17:string}",
            "    interface: ${18|public,admin,internal|}",
            "    ironic_url: ${19:string}",
            "    management_interface: ${20:string}",
            "    name: ${21:string}",
            "    network_interface: ${22:string}",
            "    nics:",
            "      - ${23:element}",
            "    power_interface: ${24:string}",
            "    raid_interface: ${26:string}",
            "    region_name: ${27:string}",
            "    rescue_interface: ${28:string}",
            "    resource_class: ${29:string}",
            "    sdk_log_level: ${30|INFO,DEBUG|}",
            "    sdk_log_path: ${31:string}",
            "    skip_update_of_masked_password: ${32|false,true|}",
            "    state: ${33|present,absent|}",
            "    storage_interface: ${34:string}",
            "    timeout: ${35:180}",
            "    uuid: ${36:string}",
            "    validate_certs: ${37|false,true|}",
            "    vendor_interface: ${38:string}",
            "    wait: ${39|true,false|}",
            "$0"
        ],
        "description": "Create/Delete Bare Metal Resources from OpenStack",
        "scope": "ansible"
    },
    "Activate/Deactivate Bare Metal Resources from OpenStack": {
        "prefix": [
            "openstack.cloud.baremetal_node_action",
            "Activate/Deactivate Bare Metal Resources from OpenStack"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.baremetal_node_action:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    config_drive: ${10:\"raw\"}",
            "    deploy: ${11:yes}",
            "    interface: ${13|public,admin,internal|}",
            "    ironic_url: ${14:string}",
            "    maintenance: ${15:string}",
            "    maintenance_reason: ${16:string}",
            "    name: ${17:string}",
            "    power: ${18:present}",
            "    region_name: ${19:string}",
            "    sdk_log_level: ${20|INFO,DEBUG|}",
            "    sdk_log_path: ${21:string}",
            "    state: ${22:present}",
            "    timeout: ${23:1800}",
            "    uuid: ${24:string}",
            "    validate_certs: ${25|false,true|}",
            "    wait: ${26|true,false|}",
            "$0"
        ],
        "description": "Activate/Deactivate Bare Metal Resources from OpenStack",
        "scope": "ansible"
    },
    "Retrieve information about Bare Metal nodes from OpenStack": {
        "prefix": [
            "openstack.cloud.baremetal_node_info",
            "Retrieve information about Bare Metal nodes from OpenStack"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.baremetal_node_info:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    interface: ${10|public,admin,internal|}",
            "    ironic_url: ${11:string}",
            "    mac: ${12:string}",
            "    node: ${13:string}",
            "    region_name: ${14:string}",
            "    sdk_log_level: ${15|INFO,DEBUG|}",
            "    sdk_log_path: ${16:string}",
            "    timeout: ${17:180}",
            "    validate_certs: ${18|false,true|}",
            "    wait: ${19|true,false|}",
            "$0"
        ],
        "description": "Retrieve information about Bare Metal nodes from OpenStack",
        "scope": "ansible"
    },
    "Create/Delete Bare Metal port Resources from OpenStack": {
        "prefix": [
            "openstack.cloud.baremetal_port",
            "Create/Delete Bare Metal port Resources from OpenStack"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.baremetal_port:",
            "    address: ${2:string}",
            "    api_timeout: ${3:int}",
            "    auth_type: ${5:string}",
            "    availability_zone: ${6:string}",
            "    ca_cert: ${7:string}",
            "    client_cert: ${8:string}",
            "    client_key: ${9:string}",
            "    cloud: ${10:\"raw\"}",
            "    interface: ${12|public,admin,internal|}",
            "    ironic_url: ${13:string}",
            "    is_pxe_enabled: ${14|false,true|}",
            "    node: ${16:string}",
            "    physical_network: ${17:string}",
            "    portgroup: ${18:string}",
            "    region_name: ${19:string}",
            "    sdk_log_level: ${20|INFO,DEBUG|}",
            "    sdk_log_path: ${21:string}",
            "    state: ${22|present,absent|}",
            "    timeout: ${23:180}",
            "    uuid: ${24:string}",
            "    validate_certs: ${25|false,true|}",
            "    wait: ${26|true,false|}",
            "$0"
        ],
        "description": "Create/Delete Bare Metal port Resources from OpenStack",
        "scope": "ansible"
    },
    "Retrieve information about Bare Metal ports from OpenStack": {
        "prefix": [
            "openstack.cloud.baremetal_port_info",
            "Retrieve information about Bare Metal ports from OpenStack"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.baremetal_port_info:",
            "    address: ${2:string}",
            "    api_timeout: ${3:int}",
            "    auth_type: ${5:string}",
            "    availability_zone: ${6:string}",
            "    ca_cert: ${7:string}",
            "    client_cert: ${8:string}",
            "    client_key: ${9:string}",
            "    cloud: ${10:\"raw\"}",
            "    interface: ${11|public,admin,internal|}",
            "    ironic_url: ${12:string}",
            "    node: ${13:string}",
            "    region_name: ${14:string}",
            "    sdk_log_level: ${15|INFO,DEBUG|}",
            "    sdk_log_path: ${16:string}",
            "    timeout: ${17:180}",
            "    uuid: ${18:string}",
            "    validate_certs: ${19|false,true|}",
            "    wait: ${20|true,false|}",
            "$0"
        ],
        "description": "Retrieve information about Bare Metal ports from OpenStack",
        "scope": "ansible"
    },
    "Manage OpenStack Identity services": {
        "prefix": [
            "openstack.cloud.catalog_service",
            "Manage OpenStack Identity services"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.catalog_service:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    description: ${10:string}",
            "    enabled: ${11|true,false|}",
            "    interface: ${12|public,admin,internal|}",
            "    name: ${13:string}",
            "    region_name: ${14:string}",
            "    sdk_log_level: ${15|INFO,DEBUG|}",
            "    sdk_log_path: ${16:string}",
            "    state: ${17|present,absent|}",
            "    timeout: ${18:180}",
            "    type: ${19:string}",
            "    validate_certs: ${20|false,true|}",
            "    wait: ${21|true,false|}",
            "$0"
        ],
        "description": "Manage OpenStack Identity services",
        "scope": "ansible"
    },
    "Add/Remove COE cluster from OpenStack Cloud": {
        "prefix": [
            "openstack.cloud.coe_cluster",
            "Add/Remove COE cluster from OpenStack Cloud"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.coe_cluster:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    cluster_template_id: ${10:string}",
            "    discovery_url: ${11:string}",
            "    docker_volume_size: ${12:int}",
            "    flavor_id: ${13:string}",
            "    interface: ${14|public,admin,internal|}",
            "    keypair: ${15:string}",
            "    labels: ${16:\"raw\"}",
            "    master_count: ${17:1}",
            "    master_flavor_id: ${18:string}",
            "    name: ${19:string}",
            "    node_count: ${20:1}",
            "    region_name: ${21:string}",
            "    sdk_log_level: ${22|INFO,DEBUG|}",
            "    sdk_log_path: ${23:string}",
            "    state: ${24|present,absent|}",
            "    timeout: ${25:60}",
            "    validate_certs: ${26|false,true|}",
            "    wait: ${27|true,false|}",
            "$0"
        ],
        "description": "Add/Remove COE cluster from OpenStack Cloud",
        "scope": "ansible"
    },
    "Add/Remove COE cluster template from OpenStack Cloud": {
        "prefix": [
            "openstack.cloud.coe_cluster_template",
            "Add/Remove COE cluster template from OpenStack Cloud"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.coe_cluster_template:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    coe: ${10:string}",
            "    dns_nameserver: ${11:8.8.8.8}",
            "    docker_storage_driver: ${12:string}",
            "    docker_volume_size: ${13:int}",
            "    external_network_id: ${14:string}",
            "    fixed_network: ${15:string}",
            "    fixed_subnet: ${16:string}",
            "    flavor_id: ${17:string}",
            "    floating_ip_enabled: ${18|true,false|}",
            "    http_proxy: ${19:string}",
            "    https_proxy: ${20:string}",
            "    image_id: ${21:string}",
            "    interface: ${22|public,admin,internal|}",
            "    keypair_id: ${23:string}",
            "    labels: ${24:\"raw\"}",
            "    master_flavor_id: ${25:string}",
            "    master_lb_enabled: ${26|true,false|}",
            "    name: ${27:string}",
            "    network_driver: ${28:string}",
            "    no_proxy: ${29:string}",
            "    public: ${30|true,false|}",
            "    region_name: ${31:string}",
            "    registry_enabled: ${32|true,false|}",
            "    sdk_log_level: ${33|INFO,DEBUG|}",
            "    sdk_log_path: ${34:string}",
            "    server_type: ${35|vm,bm|}",
            "    state: ${36|present,absent|}",
            "    timeout: ${37:180}",
            "    tls_disabled: ${38|true,false|}",
            "    validate_certs: ${39|false,true|}",
            "    volume_driver: ${40:string}",
            "    wait: ${41|true,false|}",
            "$0"
        ],
        "description": "Add/Remove COE cluster template from OpenStack Cloud",
        "scope": "ansible"
    },
    "Manage OpenStack compute flavors": {
        "prefix": [
            "openstack.cloud.compute_flavor",
            "Manage OpenStack compute flavors"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.compute_flavor:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    disk: ${10:0}",
            "    ephemeral: ${11:0}",
            "    flavorid: ${13:auto}",
            "    interface: ${14|public,admin,internal|}",
            "    is_public: ${15|true,false|}",
            "    name: ${16:string}",
            "    ram: ${17:int}",
            "    region_name: ${18:string}",
            "    sdk_log_level: ${20|INFO,DEBUG|}",
            "    sdk_log_path: ${21:string}",
            "    state: ${22|present,absent|}",
            "    swap: ${23:0}",
            "    timeout: ${24:180}",
            "    validate_certs: ${25|false,true|}",
            "    vcpus: ${26:int}",
            "    wait: ${27|true,false|}",
            "$0"
        ],
        "description": "Manage OpenStack compute flavors",
        "scope": "ansible"
    },
    "Retrieve information about one or more flavors": {
        "prefix": [
            "openstack.cloud.compute_flavor_info",
            "Retrieve information about one or more flavors"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.compute_flavor_info:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    ephemeral: ${10:string}",
            "    interface: ${11|public,admin,internal|}",
            "    limit: ${12:int}",
            "    name: ${13:string}",
            "    ram: ${14:string}",
            "    region_name: ${15:string}",
            "    sdk_log_level: ${16|INFO,DEBUG|}",
            "    sdk_log_path: ${17:string}",
            "    timeout: ${18:180}",
            "    validate_certs: ${19|false,true|}",
            "    vcpus: ${20:string}",
            "    wait: ${21|true,false|}",
            "$0"
        ],
        "description": "Retrieve information about one or more flavors",
        "scope": "ansible"
    },
    "Retrieve information about one or more OpenStack compute services": {
        "prefix": [
            "openstack.cloud.compute_service_info",
            "Retrieve information about one or more OpenStack compute services"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.compute_service_info:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    binary: ${6:string}",
            "    ca_cert: ${7:string}",
            "    client_cert: ${8:string}",
            "    client_key: ${9:string}",
            "    cloud: ${10:\"raw\"}",
            "    host: ${11:string}",
            "    interface: ${12|public,admin,internal|}",
            "    region_name: ${13:string}",
            "    sdk_log_level: ${14|INFO,DEBUG|}",
            "    sdk_log_path: ${15:string}",
            "    timeout: ${16:180}",
            "    validate_certs: ${17|false,true|}",
            "    wait: ${18|true,false|}",
            "$0"
        ],
        "description": "Retrieve information about one or more OpenStack compute services",
        "scope": "ansible"
    },
    "Get OpenStack Client config": {
        "prefix": [
            "openstack.cloud.config",
            "Get OpenStack Client config"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.config:",
            "    clouds:",
            "      - ${2:element}",
            "$0"
        ],
        "description": "Get OpenStack Client config",
        "scope": "ansible"
    },
    "Manage Swift container.": {
        "prefix": [
            "openstack.cloud.object_container",
            "Manage Swift container."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.object_container:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    container: ${10:string}",
            "    delete_with_all_objects: ${11|false,true|}",
            "    interface: ${12|public,admin,internal|}",
            "    keys:",
            "      - ${13:element}",
            "    region_name: ${15:string}",
            "    sdk_log_level: ${16|INFO,DEBUG|}",
            "    sdk_log_path: ${17:string}",
            "    state: ${18|present,absent|}",
            "    timeout: ${19:180}",
            "    validate_certs: ${20|false,true|}",
            "    wait: ${21|true,false|}",
            "$0"
        ],
        "description": "Manage Swift container.",
        "scope": "ansible"
    },
    "Manage OpenStack DNS zones": {
        "prefix": [
            "openstack.cloud.dns_zone",
            "Manage OpenStack DNS zones"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.dns_zone:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    description: ${10:string}",
            "    email: ${11:string}",
            "    interface: ${12|public,admin,internal|}",
            "    masters:",
            "      - ${13:element}",
            "    name: ${14:string}",
            "    region_name: ${15:string}",
            "    sdk_log_level: ${16|INFO,DEBUG|}",
            "    sdk_log_path: ${17:string}",
            "    state: ${18|present,absent|}",
            "    timeout: ${19:180}",
            "    ttl: ${20:int}",
            "    validate_certs: ${21|false,true|}",
            "    wait: ${22|true,false|}",
            "    zone_type: ${23:string}",
            "$0"
        ],
        "description": "Manage OpenStack DNS zones",
        "scope": "ansible"
    },
    "Getting information about dns zones": {
        "prefix": [
            "openstack.cloud.dns_zone_info",
            "Getting information about dns zones"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.dns_zone_info:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    description: ${10:string}",
            "    email: ${11:string}",
            "    interface: ${12|public,admin,internal|}",
            "    name: ${13:string}",
            "    region_name: ${14:string}",
            "    sdk_log_level: ${15|INFO,DEBUG|}",
            "    sdk_log_path: ${16:string}",
            "    timeout: ${17:180}",
            "    ttl: ${18:int}",
            "    type: ${19:string}",
            "    validate_certs: ${20|false,true|}",
            "    wait: ${21|true,false|}",
            "$0"
        ],
        "description": "Getting information about dns zones",
        "scope": "ansible"
    },
    "Manage OpenStack Identity service endpoints": {
        "prefix": [
            "openstack.cloud.endpoint",
            "Manage OpenStack Identity service endpoints"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.endpoint:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    enabled: ${10|true,false|}",
            "    endpoint_interface: ${11:string}",
            "    interface: ${12|public,admin,internal|}",
            "    region: ${13:string}",
            "    region_name: ${14:string}",
            "    sdk_log_level: ${15|INFO,DEBUG|}",
            "    sdk_log_path: ${16:string}",
            "    service: ${17:string}",
            "    state: ${18|present,absent|}",
            "    timeout: ${19:180}",
            "    url: ${20:string}",
            "    validate_certs: ${21|false,true|}",
            "    wait: ${22|true,false|}",
            "$0"
        ],
        "description": "Manage OpenStack Identity service endpoints",
        "scope": "ansible"
    },
    "manage a federation Identity Provider": {
        "prefix": [
            "openstack.cloud.federation_idp",
            "manage a federation Identity Provider"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.federation_idp:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    description: ${10:string}",
            "    domain_id: ${11:string}",
            "    enabled: ${12|false,true|}",
            "    interface: ${13|public,admin,internal|}",
            "    name: ${14:string}",
            "    region_name: ${15:string}",
            "    remote_ids:",
            "      - ${16:element}",
            "    sdk_log_level: ${17|INFO,DEBUG|}",
            "    sdk_log_path: ${18:string}",
            "    state: ${19|present,absent|}",
            "    timeout: ${20:180}",
            "    validate_certs: ${21|false,true|}",
            "    wait: ${22|true,false|}",
            "$0"
        ],
        "description": "manage a federation Identity Provider",
        "scope": "ansible"
    },
    "Get the information about the available federation identity providers": {
        "prefix": [
            "openstack.cloud.federation_idp_info",
            "Get the information about the available federation identity providers"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.federation_idp_info:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    interface: ${10|public,admin,internal|}",
            "    name: ${11:string}",
            "    region_name: ${12:string}",
            "    sdk_log_level: ${13|INFO,DEBUG|}",
            "    sdk_log_path: ${14:string}",
            "    timeout: ${15:180}",
            "    validate_certs: ${16|false,true|}",
            "    wait: ${17|true,false|}",
            "$0"
        ],
        "description": "Get the information about the available federation identity providers",
        "scope": "ansible"
    },
    "Manage a federation mapping": {
        "prefix": [
            "openstack.cloud.federation_mapping",
            "Manage a federation mapping"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.federation_mapping:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    interface: ${10|public,admin,internal|}",
            "    name: ${11:string}",
            "    region_name: ${12:string}",
            "    rules:",
            "      - ${13:element}",
            "    sdk_log_level: ${14|INFO,DEBUG|}",
            "    sdk_log_path: ${15:string}",
            "    state: ${16|present,absent|}",
            "    timeout: ${17:180}",
            "    validate_certs: ${18|false,true|}",
            "    wait: ${19|true,false|}",
            "$0"
        ],
        "description": "Manage a federation mapping",
        "scope": "ansible"
    },
    "Get the information about the available federation mappings": {
        "prefix": [
            "openstack.cloud.federation_mapping_info",
            "Get the information about the available federation mappings"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.federation_mapping_info:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    interface: ${10|public,admin,internal|}",
            "    name: ${11:string}",
            "    region_name: ${12:string}",
            "    sdk_log_level: ${13|INFO,DEBUG|}",
            "    sdk_log_path: ${14:string}",
            "    timeout: ${15:180}",
            "    validate_certs: ${16|false,true|}",
            "    wait: ${17|true,false|}",
            "$0"
        ],
        "description": "Get the information about the available federation mappings",
        "scope": "ansible"
    },
    "Add/Remove floating IP from an instance": {
        "prefix": [
            "openstack.cloud.floating_ip",
            "Add/Remove floating IP from an instance"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.floating_ip:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    fixed_address: ${10:string}",
            "    floating_ip_address: ${11:string}",
            "    interface: ${12|public,admin,internal|}",
            "    nat_destination: ${13:string}",
            "    network: ${14:string}",
            "    purge: ${15|true,false|}",
            "    region_name: ${16:string}",
            "    reuse: ${17|true,false|}",
            "    sdk_log_level: ${18|INFO,DEBUG|}",
            "    sdk_log_path: ${19:string}",
            "    server: ${20:string}",
            "    state: ${21|present,absent|}",
            "    timeout: ${22:60}",
            "    validate_certs: ${23|false,true|}",
            "    wait: ${24|true,false|}",
            "$0"
        ],
        "description": "Add/Remove floating IP from an instance",
        "scope": "ansible"
    },
    "Get information about floating ips": {
        "prefix": [
            "openstack.cloud.floating_ip_info",
            "Get information about floating ips"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.floating_ip_info:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    description: ${10:string}",
            "    fixed_ip_address: ${11:string}",
            "    floating_ip_address: ${12:string}",
            "    floating_network: ${13:string}",
            "    interface: ${14|public,admin,internal|}",
            "    port: ${15:string}",
            "    project_id: ${16:string}",
            "    region_name: ${17:string}",
            "    router: ${18:string}",
            "    sdk_log_level: ${19|INFO,DEBUG|}",
            "    sdk_log_path: ${20:string}",
            "    status: ${21:string}",
            "    timeout: ${22:180}",
            "    validate_certs: ${23|false,true|}",
            "    wait: ${24|true,false|}",
            "$0"
        ],
        "description": "Get information about floating ips",
        "scope": "ansible"
    },
    "Associate OpenStack Identity users and groups": {
        "prefix": [
            "openstack.cloud.group_assignment",
            "Associate OpenStack Identity users and groups"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.group_assignment:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    group: ${10:string}",
            "    interface: ${11|public,admin,internal|}",
            "    region_name: ${12:string}",
            "    sdk_log_level: ${13|INFO,DEBUG|}",
            "    sdk_log_path: ${14:string}",
            "    state: ${15|present,absent|}",
            "    timeout: ${16:180}",
            "    user: ${17:string}",
            "    validate_certs: ${18|false,true|}",
            "    wait: ${19|true,false|}",
            "$0"
        ],
        "description": "Associate OpenStack Identity users and groups",
        "scope": "ansible"
    },
    "Manage OpenStack host aggregates": {
        "prefix": [
            "openstack.cloud.host_aggregate",
            "Manage OpenStack host aggregates"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.host_aggregate:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    hosts:",
            "      - ${10:element}",
            "    interface: ${11|public,admin,internal|}",
            "    name: ${13:string}",
            "    purge_hosts: ${14|true,false|}",
            "    region_name: ${15:string}",
            "    sdk_log_level: ${16|INFO,DEBUG|}",
            "    sdk_log_path: ${17:string}",
            "    state: ${18|present,absent|}",
            "    timeout: ${19:180}",
            "    validate_certs: ${20|false,true|}",
            "    wait: ${21|true,false|}",
            "$0"
        ],
        "description": "Manage OpenStack host aggregates",
        "scope": "ansible"
    },
    "Manage OpenStack Identity Domains": {
        "prefix": [
            "openstack.cloud.identity_domain",
            "Manage OpenStack Identity Domains"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.identity_domain:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    description: ${10:string}",
            "    enabled: ${11|true,false|}",
            "    interface: ${12|public,admin,internal|}",
            "    name: ${13:string}",
            "    region_name: ${14:string}",
            "    sdk_log_level: ${15|INFO,DEBUG|}",
            "    sdk_log_path: ${16:string}",
            "    state: ${17|present,absent|}",
            "    timeout: ${18:180}",
            "    validate_certs: ${19|false,true|}",
            "    wait: ${20|true,false|}",
            "$0"
        ],
        "description": "Manage OpenStack Identity Domains",
        "scope": "ansible"
    },
    "Retrieve information about one or more OpenStack domains": {
        "prefix": [
            "openstack.cloud.identity_domain_info",
            "Retrieve information about one or more OpenStack domains"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.identity_domain_info:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    interface: ${11|public,admin,internal|}",
            "    name: ${12:string}",
            "    region_name: ${13:string}",
            "    sdk_log_level: ${14|INFO,DEBUG|}",
            "    sdk_log_path: ${15:string}",
            "    timeout: ${16:180}",
            "    validate_certs: ${17|false,true|}",
            "    wait: ${18|true,false|}",
            "$0"
        ],
        "description": "Retrieve information about one or more OpenStack domains",
        "scope": "ansible"
    },
    "Manage OpenStack Identity Groups": {
        "prefix": [
            "openstack.cloud.identity_group",
            "Manage OpenStack Identity Groups"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.identity_group:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    description: ${10:string}",
            "    domain_id: ${11:string}",
            "    interface: ${12|public,admin,internal|}",
            "    name: ${13:string}",
            "    region_name: ${14:string}",
            "    sdk_log_level: ${15|INFO,DEBUG|}",
            "    sdk_log_path: ${16:string}",
            "    state: ${17|present,absent|}",
            "    timeout: ${18:180}",
            "    validate_certs: ${19|false,true|}",
            "    wait: ${20|true,false|}",
            "$0"
        ],
        "description": "Manage OpenStack Identity Groups",
        "scope": "ansible"
    },
    "Retrieve info about one or more OpenStack groups": {
        "prefix": [
            "openstack.cloud.identity_group_info",
            "Retrieve info about one or more OpenStack groups"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.identity_group_info:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    domain: ${10:string}",
            "    interface: ${12|public,admin,internal|}",
            "    name: ${13:string}",
            "    region_name: ${14:string}",
            "    sdk_log_level: ${15|INFO,DEBUG|}",
            "    sdk_log_path: ${16:string}",
            "    timeout: ${17:180}",
            "    validate_certs: ${18|false,true|}",
            "    wait: ${19|true,false|}",
            "$0"
        ],
        "description": "Retrieve info about one or more OpenStack groups",
        "scope": "ansible"
    },
    "Manage OpenStack Identity Roles": {
        "prefix": [
            "openstack.cloud.identity_role",
            "Manage OpenStack Identity Roles"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.identity_role:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    interface: ${10|public,admin,internal|}",
            "    name: ${11:string}",
            "    region_name: ${12:string}",
            "    sdk_log_level: ${13|INFO,DEBUG|}",
            "    sdk_log_path: ${14:string}",
            "    state: ${15|present,absent|}",
            "    timeout: ${16:180}",
            "    validate_certs: ${17|false,true|}",
            "    wait: ${18|true,false|}",
            "$0"
        ],
        "description": "Manage OpenStack Identity Roles",
        "scope": "ansible"
    },
    "Retrieve information about roles": {
        "prefix": [
            "openstack.cloud.identity_role_info",
            "Retrieve information about roles"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.identity_role_info:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    domain_id: ${10:string}",
            "    interface: ${11|public,admin,internal|}",
            "    name: ${12:string}",
            "    region_name: ${13:string}",
            "    sdk_log_level: ${14|INFO,DEBUG|}",
            "    sdk_log_path: ${15:string}",
            "    timeout: ${16:180}",
            "    validate_certs: ${17|false,true|}",
            "    wait: ${18|true,false|}",
            "$0"
        ],
        "description": "Retrieve information about roles",
        "scope": "ansible"
    },
    "Manage OpenStack Identity Users": {
        "prefix": [
            "openstack.cloud.identity_user",
            "Manage OpenStack Identity Users"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.identity_user:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    default_project: ${10:string}",
            "    description: ${11:string}",
            "    domain: ${12:string}",
            "    email: ${13:string}",
            "    enabled: ${14|true,false|}",
            "    interface: ${15|public,admin,internal|}",
            "    name: ${16:string}",
            "    password: ${17:string}",
            "    region_name: ${18:string}",
            "    sdk_log_level: ${19|INFO,DEBUG|}",
            "    sdk_log_path: ${20:string}",
            "    state: ${21|present,absent|}",
            "    timeout: ${22:180}",
            "    update_password: ${23|on_create,always|}",
            "    validate_certs: ${24|false,true|}",
            "    wait: ${25|true,false|}",
            "$0"
        ],
        "description": "Manage OpenStack Identity Users",
        "scope": "ansible"
    },
    "Retrieve information about one or more OpenStack users": {
        "prefix": [
            "openstack.cloud.identity_user_info",
            "Retrieve information about one or more OpenStack users"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.identity_user_info:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    domain: ${10:string}",
            "    interface: ${12|public,admin,internal|}",
            "    name: ${13:string}",
            "    region_name: ${14:string}",
            "    sdk_log_level: ${15|INFO,DEBUG|}",
            "    sdk_log_path: ${16:string}",
            "    timeout: ${17:180}",
            "    validate_certs: ${18|false,true|}",
            "    wait: ${19|true,false|}",
            "$0"
        ],
        "description": "Retrieve information about one or more OpenStack users",
        "scope": "ansible"
    },
    "Add/Delete images from OpenStack Cloud": {
        "prefix": [
            "openstack.cloud.image",
            "Add/Delete images from OpenStack Cloud"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.image:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    checksum: ${7:string}",
            "    client_cert: ${8:string}",
            "    client_key: ${9:string}",
            "    cloud: ${10:\"raw\"}",
            "    container_format: ${11|bare,ami,aki,ari,ovf,ova,docker|}",
            "    disk_format: ${12|qcow2,ami,ari,aki,vhd,vmdk,raw,vdi,iso,vhdx,ploop|}",
            "    filename: ${13:string}",
            "    id: ${14:string}",
            "    interface: ${15|public,admin,internal|}",
            "    is_public: ${16|false,true|}",
            "    kernel: ${17:string}",
            "    min_disk: ${18:int}",
            "    min_ram: ${19:int}",
            "    name: ${20:string}",
            "    project: ${21:string}",
            "    project_domain: ${22:string}",
            "    protected: ${24|false,true|}",
            "    ramdisk: ${25:string}",
            "    region_name: ${26:string}",
            "    sdk_log_level: ${27|INFO,DEBUG|}",
            "    sdk_log_path: ${28:string}",
            "    state: ${29|present,absent|}",
            "    tags:",
            "      - ${30:element}",
            "    timeout: ${31:180}",
            "    validate_certs: ${32|false,true|}",
            "    volume: ${33:string}",
            "    wait: ${34|true,false|}",
            "$0"
        ],
        "description": "Add/Delete images from OpenStack Cloud",
        "scope": "ansible"
    },
    "Retrieve information about an image within OpenStack.": {
        "prefix": [
            "openstack.cloud.image_info",
            "Retrieve information about an image within OpenStack."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.image_info:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    image: ${11:string}",
            "    interface: ${12|public,admin,internal|}",
            "    region_name: ${13:string}",
            "    sdk_log_level: ${14|INFO,DEBUG|}",
            "    sdk_log_path: ${15:string}",
            "    timeout: ${16:180}",
            "    validate_certs: ${17|false,true|}",
            "    wait: ${18|true,false|}",
            "$0"
        ],
        "description": "Retrieve information about an image within OpenStack.",
        "scope": "ansible"
    },
    "Add/Delete a keypair from OpenStack": {
        "prefix": [
            "openstack.cloud.keypair",
            "Add/Delete a keypair from OpenStack"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.keypair:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    interface: ${10|public,admin,internal|}",
            "    name: ${11:string}",
            "    public_key: ${12:string}",
            "    public_key_file: ${13:string}",
            "    region_name: ${14:string}",
            "    sdk_log_level: ${15|INFO,DEBUG|}",
            "    sdk_log_path: ${16:string}",
            "    state: ${17|present,absent,replace|}",
            "    timeout: ${18:180}",
            "    validate_certs: ${19|false,true|}",
            "    wait: ${20|true,false|}",
            "$0"
        ],
        "description": "Add/Delete a keypair from OpenStack",
        "scope": "ansible"
    },
    "Get information about keypairs from OpenStack": {
        "prefix": [
            "openstack.cloud.keypair_info",
            "Get information about keypairs from OpenStack"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.keypair_info:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    interface: ${10|public,admin,internal|}",
            "    limit: ${11:int}",
            "    marker: ${12:string}",
            "    name: ${13:string}",
            "    region_name: ${14:string}",
            "    sdk_log_level: ${15|INFO,DEBUG|}",
            "    sdk_log_path: ${16:string}",
            "    timeout: ${17:180}",
            "    user_id: ${18:string}",
            "    validate_certs: ${19|false,true|}",
            "    wait: ${20|true,false|}",
            "$0"
        ],
        "description": "Get information about keypairs from OpenStack",
        "scope": "ansible"
    },
    "manage a federation Protocol": {
        "prefix": [
            "openstack.cloud.keystone_federation_protocol",
            "manage a federation Protocol"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.keystone_federation_protocol:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    idp_id: ${10:string}",
            "    interface: ${11|public,admin,internal|}",
            "    mapping_id: ${12:string}",
            "    name: ${13:string}",
            "    region_name: ${14:string}",
            "    sdk_log_level: ${15|INFO,DEBUG|}",
            "    sdk_log_path: ${16:string}",
            "    state: ${17|present,absent|}",
            "    timeout: ${18:180}",
            "    validate_certs: ${19|false,true|}",
            "    wait: ${20|true,false|}",
            "$0"
        ],
        "description": "manage a federation Protocol",
        "scope": "ansible"
    },
    "get information about federation Protocols": {
        "prefix": [
            "openstack.cloud.keystone_federation_protocol_info",
            "get information about federation Protocols"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.keystone_federation_protocol_info:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    idp_id: ${10:string}",
            "    interface: ${11|public,admin,internal|}",
            "    name: ${12:string}",
            "    region_name: ${13:string}",
            "    sdk_log_level: ${14|INFO,DEBUG|}",
            "    sdk_log_path: ${15:string}",
            "    timeout: ${16:180}",
            "    validate_certs: ${17|false,true|}",
            "    wait: ${18|true,false|}",
            "$0"
        ],
        "description": "get information about federation Protocols",
        "scope": "ansible"
    },
    "Add/Delete a health m nonitor to a pool in the load balancing service from OpenStack Cloud": {
        "prefix": [
            "openstack.cloud.lb_health_monitor",
            "Add/Delete a health m nonitor to a pool in the load balancing service from OpenStack Cloud"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.lb_health_monitor:",
            "    admin_state_up: ${2|true,false|}",
            "    api_timeout: ${3:int}",
            "    auth_type: ${5:string}",
            "    availability_zone: ${6:string}",
            "    ca_cert: ${7:string}",
            "    client_cert: ${8:string}",
            "    client_key: ${9:string}",
            "    cloud: ${10:\"raw\"}",
            "    delay: ${11:string}",
            "    expected_codes: ${12:200}",
            "    http_method: ${13|GET,CONNECT,DELETE,HEAD,OPTIONS,PATCH,POST,PUT,TRACE|}",
            "    interface: ${14|public,admin,internal|}",
            "    max_retries: ${15:string}",
            "    max_retries_down: ${16:3}",
            "    name: ${17:string}",
            "    pool: ${18:string}",
            "    region_name: ${19:string}",
            "    resp_timeout: ${20:int}",
            "    sdk_log_level: ${21|INFO,DEBUG|}",
            "    sdk_log_path: ${22:string}",
            "    state: ${23|present,absent|}",
            "    timeout: ${24:180}",
            "    type: ${25|HTTP,HTTPS,PING,SCTP,TCP,TLS-HELLO,UDP-CONNECT|}",
            "    url_path: ${26:/}",
            "    validate_certs: ${27|false,true|}",
            "    wait: ${28|true,false|}",
            "$0"
        ],
        "description": "Add/Delete a health m nonitor to a pool in the load balancing service from OpenStack Cloud",
        "scope": "ansible"
    },
    "Add/Delete a listener for a load balancer from OpenStack Cloud": {
        "prefix": [
            "openstack.cloud.lb_listener",
            "Add/Delete a listener for a load balancer from OpenStack Cloud"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.lb_listener:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    interface: ${10|public,admin,internal|}",
            "    loadbalancer: ${11:string}",
            "    name: ${12:string}",
            "    protocol: ${13|HTTP,HTTPS,TCP,TERMINATED_HTTPS,UDP,SCTP|}",
            "    protocol_port: ${14:80}",
            "    region_name: ${15:string}",
            "    sdk_log_level: ${16|INFO,DEBUG|}",
            "    sdk_log_path: ${17:string}",
            "    state: ${18|present,absent|}",
            "    timeout: ${19:180}",
            "    timeout_client_data: ${20:50000}",
            "    timeout_member_data: ${21:50000}",
            "    validate_certs: ${22|false,true|}",
            "    wait: ${23|true,false|}",
            "$0"
        ],
        "description": "Add/Delete a listener for a load balancer from OpenStack Cloud",
        "scope": "ansible"
    },
    "Add/Delete a member for a pool in load balancer from OpenStack Cloud": {
        "prefix": [
            "openstack.cloud.lb_member",
            "Add/Delete a member for a pool in load balancer from OpenStack Cloud"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.lb_member:",
            "    address: ${2:string}",
            "    api_timeout: ${3:int}",
            "    auth_type: ${5:string}",
            "    availability_zone: ${6:string}",
            "    ca_cert: ${7:string}",
            "    client_cert: ${8:string}",
            "    client_key: ${9:string}",
            "    cloud: ${10:\"raw\"}",
            "    interface: ${11|public,admin,internal|}",
            "    monitor_address: ${12:string}",
            "    monitor_port: ${13:int}",
            "    name: ${14:string}",
            "    pool: ${15:string}",
            "    protocol_port: ${16:80}",
            "    region_name: ${17:string}",
            "    sdk_log_level: ${18|INFO,DEBUG|}",
            "    sdk_log_path: ${19:string}",
            "    state: ${20|present,absent|}",
            "    subnet_id: ${21:string}",
            "    timeout: ${22:180}",
            "    validate_certs: ${23|false,true|}",
            "    wait: ${24|true,false|}",
            "$0"
        ],
        "description": "Add/Delete a member for a pool in load balancer from OpenStack Cloud",
        "scope": "ansible"
    },
    "Add/Delete a pool in the load balancing service from OpenStack Cloud": {
        "prefix": [
            "openstack.cloud.lb_pool",
            "Add/Delete a pool in the load balancing service from OpenStack Cloud"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.lb_pool:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    interface: ${10|public,admin,internal|}",
            "    lb_algorithm: ${11|ROUND_ROBIN,LEAST_CONNECTIONS,SOURCE_IP|}",
            "    listener: ${12:string}",
            "    loadbalancer: ${13:string}",
            "    name: ${14:string}",
            "    protocol: ${15|HTTP,HTTPS,PROXY,TCP,UDP|}",
            "    region_name: ${16:string}",
            "    sdk_log_level: ${17|INFO,DEBUG|}",
            "    sdk_log_path: ${18:string}",
            "    state: ${19|present,absent|}",
            "    timeout: ${20:180}",
            "    validate_certs: ${21|false,true|}",
            "    wait: ${22|true,false|}",
            "$0"
        ],
        "description": "Add/Delete a pool in the load balancing service from OpenStack Cloud",
        "scope": "ansible"
    },
    "Add/Delete load balancer from OpenStack Cloud": {
        "prefix": [
            "openstack.cloud.loadbalancer",
            "Add/Delete load balancer from OpenStack Cloud"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.loadbalancer:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    auto_public_ip: ${5|true,false|}",
            "    availability_zone: ${6:string}",
            "    ca_cert: ${7:string}",
            "    client_cert: ${8:string}",
            "    client_key: ${9:string}",
            "    cloud: ${10:\"raw\"}",
            "    delete_public_ip: ${11|true,false|}",
            "    flavor: ${12:string}",
            "    interface: ${13|public,admin,internal|}",
            "    listeners:",
            "      - ${14:element}",
            "    name: ${15:string}",
            "    public_ip_address: ${16:string}",
            "    public_network: ${17:string}",
            "    region_name: ${18:string}",
            "    sdk_log_level: ${19|INFO,DEBUG|}",
            "    sdk_log_path: ${20:string}",
            "    state: ${21|present,absent|}",
            "    timeout: ${22:180}",
            "    validate_certs: ${23|false,true|}",
            "    vip_address: ${24:string}",
            "    vip_network: ${25:string}",
            "    vip_port: ${26:string}",
            "    vip_subnet: ${27:string}",
            "    wait: ${28|true,false|}",
            "$0"
        ],
        "description": "Add/Delete load balancer from OpenStack Cloud",
        "scope": "ansible"
    },
    "Creates/removes networks from OpenStack": {
        "prefix": [
            "openstack.cloud.network",
            "Creates/removes networks from OpenStack"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.network:",
            "    admin_state_up: ${2|true,false|}",
            "    api_timeout: ${3:int}",
            "    auth_type: ${5:string}",
            "    availability_zone: ${6:string}",
            "    ca_cert: ${7:string}",
            "    client_cert: ${8:string}",
            "    client_key: ${9:string}",
            "    cloud: ${10:\"raw\"}",
            "    dns_domain: ${11:string}",
            "    external: ${12|true,false|}",
            "    interface: ${13|public,admin,internal|}",
            "    mtu_size: ${14:int}",
            "    name: ${15:string}",
            "    port_security_enabled: ${16|false,true|}",
            "    project: ${17:string}",
            "    provider_network_type: ${18:string}",
            "    provider_physical_network: ${19:string}",
            "    provider_segmentation_id: ${20:int}",
            "    region_name: ${21:string}",
            "    sdk_log_level: ${22|INFO,DEBUG|}",
            "    sdk_log_path: ${23:string}",
            "    shared: ${24|true,false|}",
            "    state: ${25|present,absent|}",
            "    timeout: ${26:180}",
            "    validate_certs: ${27|false,true|}",
            "    wait: ${28|true,false|}",
            "$0"
        ],
        "description": "Creates/removes networks from OpenStack",
        "scope": "ansible"
    },
    "Retrieve information about one or more OpenStack networks.": {
        "prefix": [
            "openstack.cloud.networks_info",
            "Retrieve information about one or more OpenStack networks."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.networks_info:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    interface: ${11|public,admin,internal|}",
            "    name: ${12:string}",
            "    region_name: ${13:string}",
            "    sdk_log_level: ${14|INFO,DEBUG|}",
            "    sdk_log_path: ${15:string}",
            "    timeout: ${16:180}",
            "    validate_certs: ${17|false,true|}",
            "    wait: ${18|true,false|}",
            "$0"
        ],
        "description": "Retrieve information about one or more OpenStack networks.",
        "scope": "ansible"
    },
    "Fetch Neutron policies.": {
        "prefix": [
            "openstack.cloud.neutron_rbac_policies_info",
            "Fetch Neutron policies."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.neutron_rbac_policies_info:",
            "    action: ${2:string}",
            "    api_timeout: ${3:int}",
            "    auth_type: ${5:string}",
            "    availability_zone: ${6:string}",
            "    ca_cert: ${7:string}",
            "    client_cert: ${8:string}",
            "    client_key: ${9:string}",
            "    cloud: ${10:\"raw\"}",
            "    interface: ${11|public,admin,internal|}",
            "    object_id: ${12:string}",
            "    object_type: ${13:string}",
            "    policy_id: ${14:string}",
            "    project: ${15:string}",
            "    project_id: ${16:string}",
            "    region_name: ${17:string}",
            "    sdk_log_level: ${18|INFO,DEBUG|}",
            "    sdk_log_path: ${19:string}",
            "    target_project_id: ${20:string}",
            "    timeout: ${21:180}",
            "    validate_certs: ${22|false,true|}",
            "    wait: ${23|true,false|}",
            "$0"
        ],
        "description": "Fetch Neutron policies.",
        "scope": "ansible"
    },
    "Create or delete a Neutron policy to apply a RBAC rule against an object.": {
        "prefix": [
            "openstack.cloud.neutron_rbac_policy",
            "Create or delete a Neutron policy to apply a RBAC rule against an object."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.neutron_rbac_policy:",
            "    action: ${2:string}",
            "    api_timeout: ${3:int}",
            "    auth_type: ${5:string}",
            "    availability_zone: ${6:string}",
            "    ca_cert: ${7:string}",
            "    client_cert: ${8:string}",
            "    client_key: ${9:string}",
            "    cloud: ${10:\"raw\"}",
            "    interface: ${11|public,admin,internal|}",
            "    object_id: ${12:string}",
            "    object_type: ${13:string}",
            "    policy_id: ${14:string}",
            "    project_id: ${15:string}",
            "    region_name: ${16:string}",
            "    sdk_log_level: ${17|INFO,DEBUG|}",
            "    sdk_log_path: ${18:string}",
            "    state: ${19|present,absent|}",
            "    target_project_id: ${20:string}",
            "    timeout: ${21:180}",
            "    validate_certs: ${22|false,true|}",
            "    wait: ${23|true,false|}",
            "$0"
        ],
        "description": "Create or delete a Neutron policy to apply a RBAC rule against an object.",
        "scope": "ansible"
    },
    "Create or Delete objects and containers from OpenStack": {
        "prefix": [
            "openstack.cloud.object",
            "Create or Delete objects and containers from OpenStack"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.object:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    container: ${10:string}",
            "    container_access: ${11|private,public|}",
            "    filename: ${12:string}",
            "    interface: ${13|public,admin,internal|}",
            "    name: ${14:string}",
            "    region_name: ${15:string}",
            "    sdk_log_level: ${16|INFO,DEBUG|}",
            "    sdk_log_path: ${17:string}",
            "    state: ${18|present,absent|}",
            "    timeout: ${19:180}",
            "    validate_certs: ${20|false,true|}",
            "    wait: ${21|true,false|}",
            "$0"
        ],
        "description": "Create or Delete objects and containers from OpenStack",
        "scope": "ansible"
    },
    "Add/Update/Delete ports from an OpenStack cloud.": {
        "prefix": [
            "openstack.cloud.port",
            "Add/Update/Delete ports from an OpenStack cloud."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.port:",
            "    admin_state_up: ${2|false,true|}",
            "    allowed_address_pairs:",
            "      - ${3:element}",
            "    api_timeout: ${4:int}",
            "    auth_type: ${6:string}",
            "    availability_zone: ${7:string}",
            "    ca_cert: ${9:string}",
            "    client_cert: ${10:string}",
            "    client_key: ${11:string}",
            "    cloud: ${12:\"raw\"}",
            "    device_id: ${13:string}",
            "    device_owner: ${14:string}",
            "    dns_domain: ${15:string}",
            "    dns_name: ${16:string}",
            "    extra_dhcp_opts:",
            "      - ${17:element}",
            "    fixed_ips:",
            "      - ${18:element}",
            "    interface: ${19|public,admin,internal|}",
            "    mac_address: ${20:string}",
            "    name: ${21:string}",
            "    network: ${22:string}",
            "    no_security_groups: ${23|true,false|}",
            "    port_security_enabled: ${24|false,true|}",
            "    region_name: ${25:string}",
            "    sdk_log_level: ${26|INFO,DEBUG|}",
            "    sdk_log_path: ${27:string}",
            "    security_groups:",
            "      - ${28:element}",
            "    state: ${29|present,absent|}",
            "    timeout: ${30:180}",
            "    validate_certs: ${31|false,true|}",
            "    vnic_type: ${32:string}",
            "    wait: ${33|true,false|}",
            "$0"
        ],
        "description": "Add/Update/Delete ports from an OpenStack cloud.",
        "scope": "ansible"
    },
    "Retrieve information about ports within OpenStack.": {
        "prefix": [
            "openstack.cloud.port_info",
            "Retrieve information about ports within OpenStack."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.port_info:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    interface: ${11|public,admin,internal|}",
            "    port: ${12:string}",
            "    region_name: ${13:string}",
            "    sdk_log_level: ${14|INFO,DEBUG|}",
            "    sdk_log_path: ${15:string}",
            "    timeout: ${16:180}",
            "    validate_certs: ${17|false,true|}",
            "    wait: ${18|true,false|}",
            "$0"
        ],
        "description": "Retrieve information about ports within OpenStack.",
        "scope": "ansible"
    },
    "Manage OpenStack Projects": {
        "prefix": [
            "openstack.cloud.project",
            "Manage OpenStack Projects"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.project:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    description: ${10:string}",
            "    domain_id: ${11:string}",
            "    enabled: ${12|true,false|}",
            "    interface: ${13|public,admin,internal|}",
            "    name: ${14:string}",
            "    region_name: ${16:string}",
            "    sdk_log_level: ${17|INFO,DEBUG|}",
            "    sdk_log_path: ${18:string}",
            "    state: ${19|present,absent|}",
            "    timeout: ${20:180}",
            "    validate_certs: ${21|false,true|}",
            "    wait: ${22|true,false|}",
            "$0"
        ],
        "description": "Manage OpenStack Projects",
        "scope": "ansible"
    },
    "Manage OpenStack compute flavors access": {
        "prefix": [
            "openstack.cloud.project_access",
            "Manage OpenStack compute flavors access"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.project_access:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    interface: ${10|public,admin,internal|}",
            "    region_name: ${11:string}",
            "    resource_name: ${12:string}",
            "    resource_type: ${13:string}",
            "    sdk_log_level: ${14|INFO,DEBUG|}",
            "    sdk_log_path: ${15:string}",
            "    state: ${16|present,absent|}",
            "    target_project_id: ${17:string}",
            "    timeout: ${18:180}",
            "    validate_certs: ${19|false,true|}",
            "    wait: ${20|true,false|}",
            "$0"
        ],
        "description": "Manage OpenStack compute flavors access",
        "scope": "ansible"
    },
    "Retrieve information about one or more OpenStack projects": {
        "prefix": [
            "openstack.cloud.project_info",
            "Retrieve information about one or more OpenStack projects"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.project_info:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    domain: ${10:string}",
            "    interface: ${12|public,admin,internal|}",
            "    name: ${13:string}",
            "    region_name: ${14:string}",
            "    sdk_log_level: ${15|INFO,DEBUG|}",
            "    sdk_log_path: ${16:string}",
            "    timeout: ${17:180}",
            "    validate_certs: ${18|false,true|}",
            "    wait: ${19|true,false|}",
            "$0"
        ],
        "description": "Retrieve information about one or more OpenStack projects",
        "scope": "ansible"
    },
    "Manage OpenStack Quotas": {
        "prefix": [
            "openstack.cloud.quota",
            "Manage OpenStack Quotas"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.quota:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    backup_gigabytes: ${6:int}",
            "    backups: ${7:int}",
            "    ca_cert: ${8:string}",
            "    client_cert: ${9:string}",
            "    client_key: ${10:string}",
            "    cloud: ${11:\"raw\"}",
            "    cores: ${12:int}",
            "    fixed_ips: ${13:int}",
            "    floating_ips: ${14:int}",
            "    floatingip: ${15:int}",
            "    gigabytes: ${16:int}",
            "    injected_file_size: ${18:int}",
            "    injected_files: ${19:int}",
            "    injected_path_size: ${20:int}",
            "    instances: ${21:int}",
            "    interface: ${22|public,admin,internal|}",
            "    key_pairs: ${23:int}",
            "    loadbalancer: ${24:int}",
            "    metadata_items: ${25:int}",
            "    name: ${26:string}",
            "    network: ${27:int}",
            "    per_volume_gigabytes: ${28:int}",
            "    pool: ${29:int}",
            "    port: ${30:int}",
            "    project: ${31:int}",
            "    properties: ${32:int}",
            "    ram: ${33:int}",
            "    rbac_policy: ${34:int}",
            "    region_name: ${35:string}",
            "    router: ${36:int}",
            "    sdk_log_level: ${37|INFO,DEBUG|}",
            "    sdk_log_path: ${38:string}",
            "    security_group: ${39:int}",
            "    security_group_rule: ${40:int}",
            "    server_group_members: ${41:int}",
            "    server_groups: ${42:int}",
            "    snapshots: ${43:int}",
            "    state: ${45|present,absent|}",
            "    subnet: ${46:int}",
            "    subnetpool: ${47:int}",
            "    timeout: ${48:180}",
            "    validate_certs: ${49|false,true|}",
            "    volumes: ${50:int}",
            "    wait: ${52|true,false|}",
            "$0"
        ],
        "description": "Manage OpenStack Quotas",
        "scope": "ansible"
    },
    "Manage OpenStack DNS recordsets": {
        "prefix": [
            "openstack.cloud.recordset",
            "Manage OpenStack DNS recordsets"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.recordset:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    description: ${10:string}",
            "    interface: ${11|public,admin,internal|}",
            "    name: ${12:string}",
            "    records:",
            "      - ${13:element}",
            "    recordset_type: ${14:string}",
            "    region_name: ${15:string}",
            "    sdk_log_level: ${16|INFO,DEBUG|}",
            "    sdk_log_path: ${17:string}",
            "    state: ${18|present,absent|}",
            "    timeout: ${19:180}",
            "    ttl: ${20:int}",
            "    validate_certs: ${21|false,true|}",
            "    wait: ${22|true,false|}",
            "    zone: ${23:string}",
            "$0"
        ],
        "description": "Manage OpenStack DNS recordsets",
        "scope": "ansible"
    },
    "Create or delete routers from OpenStack": {
        "prefix": [
            "openstack.cloud.router",
            "Create or delete routers from OpenStack"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.router:",
            "    admin_state_up: ${2|true,false|}",
            "    api_timeout: ${3:int}",
            "    auth_type: ${5:string}",
            "    availability_zone: ${6:string}",
            "    ca_cert: ${7:string}",
            "    client_cert: ${8:string}",
            "    client_key: ${9:string}",
            "    cloud: ${10:\"raw\"}",
            "    enable_snat: ${11|false,true|}",
            "    external_fixed_ips:",
            "      - ${12:element}",
            "    interface: ${13|public,admin,internal|}",
            "    interfaces:",
            "      - ${14:element}",
            "    name: ${15:string}",
            "    network: ${16:string}",
            "    project: ${17:string}",
            "    region_name: ${18:string}",
            "    sdk_log_level: ${19|INFO,DEBUG|}",
            "    sdk_log_path: ${20:string}",
            "    state: ${21|present,absent|}",
            "    timeout: ${22:180}",
            "    validate_certs: ${23|false,true|}",
            "    wait: ${24|true,false|}",
            "$0"
        ],
        "description": "Create or delete routers from OpenStack",
        "scope": "ansible"
    },
    "Retrieve information about one or more OpenStack routers.": {
        "prefix": [
            "openstack.cloud.routers_info",
            "Retrieve information about one or more OpenStack routers."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.routers_info:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    interface: ${11|public,admin,internal|}",
            "    name: ${12:string}",
            "    region_name: ${13:string}",
            "    sdk_log_level: ${14|INFO,DEBUG|}",
            "    sdk_log_path: ${15:string}",
            "    timeout: ${16:180}",
            "    validate_certs: ${17|false,true|}",
            "    wait: ${18|true,false|}",
            "$0"
        ],
        "description": "Retrieve information about one or more OpenStack routers.",
        "scope": "ansible"
    },
    "Add/Delete security groups from an OpenStack cloud.": {
        "prefix": [
            "openstack.cloud.security_group",
            "Add/Delete security groups from an OpenStack cloud."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.security_group:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    description: ${10:string}",
            "    interface: ${11|public,admin,internal|}",
            "    name: ${12:string}",
            "    project: ${13:string}",
            "    region_name: ${14:string}",
            "    sdk_log_level: ${15|INFO,DEBUG|}",
            "    sdk_log_path: ${16:string}",
            "    state: ${17|present,absent|}",
            "    timeout: ${18:180}",
            "    validate_certs: ${19|false,true|}",
            "    wait: ${20|true,false|}",
            "$0"
        ],
        "description": "Add/Delete security groups from an OpenStack cloud.",
        "scope": "ansible"
    },
    "Add/Delete rule from an existing security group": {
        "prefix": [
            "openstack.cloud.security_group_rule",
            "Add/Delete rule from an existing security group"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.security_group_rule:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    description: ${10:string}",
            "    direction: ${11|ingress,egress|}",
            "    ethertype: ${12|IPv4,IPv6|}",
            "    interface: ${13|public,admin,internal|}",
            "    port_range_max: ${14:int}",
            "    port_range_min: ${15:int}",
            "    project: ${16:string}",
            "    protocol: ${17:string}",
            "    region_name: ${18:string}",
            "    remote_group: ${19:string}",
            "    remote_ip_prefix: ${20:string}",
            "    sdk_log_level: ${21|INFO,DEBUG|}",
            "    sdk_log_path: ${22:string}",
            "    security_group: ${23:string}",
            "    state: ${24|present,absent|}",
            "    timeout: ${25:180}",
            "    validate_certs: ${26|false,true|}",
            "    wait: ${27|true,false|}",
            "$0"
        ],
        "description": "Add/Delete rule from an existing security group",
        "scope": "ansible"
    },
    "Create/Delete Compute Instances from OpenStack": {
        "prefix": [
            "openstack.cloud.server",
            "Create/Delete Compute Instances from OpenStack"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.server:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    auto_ip: ${5|true,false|}",
            "    availability_zone: ${6:string}",
            "    boot_from_volume: ${7|true,false|}",
            "    boot_volume: ${8:string}",
            "    ca_cert: ${9:string}",
            "    client_cert: ${10:string}",
            "    client_key: ${11:string}",
            "    cloud: ${12:\"raw\"}",
            "    config_drive: ${13|true,false|}",
            "    delete_fip: ${14|true,false|}",
            "    description: ${15:string}",
            "    flavor: ${16:string}",
            "    flavor_include: ${17:string}",
            "    flavor_ram: ${18:int}",
            "    floating_ip_pools:",
            "      - ${19:element}",
            "    floating_ips:",
            "      - ${20:element}",
            "    image: ${21:string}",
            "    image_exclude: ${22:(deprecated)}",
            "    interface: ${23|public,admin,internal|}",
            "    key_name: ${24:string}",
            "    meta: ${25:\"raw\"}",
            "    name: ${26:string}",
            "    network: ${27:string}",
            "    nics:",
            "      - ${28:element}",
            "    region_name: ${29:string}",
            "    reuse_ips: ${30|true,false|}",
            "    sdk_log_level: ${32|INFO,DEBUG|}",
            "    sdk_log_path: ${33:string}",
            "    security_groups:",
            "      - ${34:element}",
            "    state: ${35|present,absent|}",
            "    terminate_volume: ${36|true,false|}",
            "    timeout: ${37:180}",
            "    userdata: ${38:string}",
            "    validate_certs: ${39|false,true|}",
            "    volume_size: ${40:int}",
            "    volumes:",
            "      - ${41:element}",
            "    wait: ${42|true,false|}",
            "$0"
        ],
        "description": "Create/Delete Compute Instances from OpenStack",
        "scope": "ansible"
    },
    "Perform actions on Compute Instances from OpenStack": {
        "prefix": [
            "openstack.cloud.server_action",
            "Perform actions on Compute Instances from OpenStack"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.server_action:",
            "    action: ${2:string}",
            "    admin_password: ${3:string}",
            "    all_projects: ${4|true,false|}",
            "    api_timeout: ${5:int}",
            "    auth_type: ${7:string}",
            "    availability_zone: ${8:string}",
            "    ca_cert: ${9:string}",
            "    client_cert: ${10:string}",
            "    client_key: ${11:string}",
            "    cloud: ${12:\"raw\"}",
            "    image: ${13:string}",
            "    interface: ${14|public,admin,internal|}",
            "    region_name: ${15:string}",
            "    sdk_log_level: ${16|INFO,DEBUG|}",
            "    sdk_log_path: ${17:string}",
            "    server: ${18:string}",
            "    timeout: ${19:180}",
            "    validate_certs: ${20|false,true|}",
            "    wait: ${21|true,false|}",
            "$0"
        ],
        "description": "Perform actions on Compute Instances from OpenStack",
        "scope": "ansible"
    },
    "Manage OpenStack server groups": {
        "prefix": [
            "openstack.cloud.server_group",
            "Manage OpenStack server groups"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.server_group:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    interface: ${10|public,admin,internal|}",
            "    name: ${11:string}",
            "    policies:",
            "      - ${12:element}",
            "    region_name: ${13:string}",
            "    sdk_log_level: ${14|INFO,DEBUG|}",
            "    sdk_log_path: ${15:string}",
            "    state: ${16|present,absent|}",
            "    timeout: ${17:180}",
            "    validate_certs: ${18|false,true|}",
            "    wait: ${19|true,false|}",
            "$0"
        ],
        "description": "Manage OpenStack server groups",
        "scope": "ansible"
    },
    "Retrieve information about one or more compute instances": {
        "prefix": [
            "openstack.cloud.server_info",
            "Retrieve information about one or more compute instances"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.server_info:",
            "    all_projects: ${2|true,false|}",
            "    api_timeout: ${3:int}",
            "    auth_type: ${5:string}",
            "    availability_zone: ${6:string}",
            "    ca_cert: ${7:string}",
            "    client_cert: ${8:string}",
            "    client_key: ${9:string}",
            "    cloud: ${10:\"raw\"}",
            "    detailed: ${11|true,false|}",
            "    interface: ${13|public,admin,internal|}",
            "    region_name: ${14:string}",
            "    sdk_log_level: ${15|INFO,DEBUG|}",
            "    sdk_log_path: ${16:string}",
            "    server: ${17:string}",
            "    timeout: ${18:180}",
            "    validate_certs: ${19|false,true|}",
            "    wait: ${20|true,false|}",
            "$0"
        ],
        "description": "Retrieve information about one or more compute instances",
        "scope": "ansible"
    },
    "Add/Update/Delete Metadata in Compute Instances from OpenStack": {
        "prefix": [
            "openstack.cloud.server_metadata",
            "Add/Update/Delete Metadata in Compute Instances from OpenStack"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.server_metadata:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    interface: ${10|public,admin,internal|}",
            "    region_name: ${12:string}",
            "    sdk_log_level: ${13|INFO,DEBUG|}",
            "    sdk_log_path: ${14:string}",
            "    server: ${15:string}",
            "    state: ${16|present,absent|}",
            "    timeout: ${17:180}",
            "    validate_certs: ${18|false,true|}",
            "    wait: ${19|true,false|}",
            "$0"
        ],
        "description": "Add/Update/Delete Metadata in Compute Instances from OpenStack",
        "scope": "ansible"
    },
    "Attach/Detach Volumes from OpenStack VM's": {
        "prefix": [
            "openstack.cloud.server_volume",
            "Attach/Detach Volumes from OpenStack VM&#39;s"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.server_volume:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    device: ${10:string}",
            "    interface: ${11|public,admin,internal|}",
            "    region_name: ${12:string}",
            "    sdk_log_level: ${13|INFO,DEBUG|}",
            "    sdk_log_path: ${14:string}",
            "    server: ${15:string}",
            "    state: ${16|present,absent|}",
            "    timeout: ${17:180}",
            "    validate_certs: ${18|false,true|}",
            "    volume: ${19:string}",
            "    wait: ${20|true,false|}",
            "$0"
        ],
        "description": "Attach/Detach Volumes from OpenStack VM&#39;s",
        "scope": "ansible"
    },
    "Add/Remove Heat Stack": {
        "prefix": [
            "openstack.cloud.stack",
            "Add/Remove Heat Stack"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.stack:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    environment:",
            "      - ${10:element}",
            "    interface: ${11|public,admin,internal|}",
            "    name: ${12:string}",
            "    region_name: ${14:string}",
            "    rollback: ${15|false,true|}",
            "    sdk_log_level: ${16|INFO,DEBUG|}",
            "    sdk_log_path: ${17:string}",
            "    state: ${18|present,absent|}",
            "    tag: ${19:string}",
            "    template: ${20:string}",
            "    timeout: ${21:3600}",
            "    validate_certs: ${22|false,true|}",
            "    wait: ${23|true,false|}",
            "$0"
        ],
        "description": "Add/Remove Heat Stack",
        "scope": "ansible"
    },
    "Add/Remove subnet to an OpenStack network": {
        "prefix": [
            "openstack.cloud.subnet",
            "Add/Remove subnet to an OpenStack network"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.subnet:",
            "    allocation_pool_end: ${2:string}",
            "    allocation_pool_start: ${3:string}",
            "    api_timeout: ${4:int}",
            "    auth_type: ${6:string}",
            "    availability_zone: ${7:string}",
            "    ca_cert: ${8:string}",
            "    cidr: ${9:string}",
            "    client_cert: ${10:string}",
            "    client_key: ${11:string}",
            "    cloud: ${12:\"raw\"}",
            "    dns_nameservers:",
            "      - ${13:element}",
            "    enable_dhcp: ${14|true,false|}",
            "    gateway_ip: ${16:string}",
            "    host_routes:",
            "      - ${17:element}",
            "    interface: ${18|public,admin,internal|}",
            "    ip_version: ${19|4,6|}",
            "    ipv6_address_mode: ${20:string}",
            "    ipv6_ra_mode: ${21:string}",
            "    name: ${22:string}",
            "    network_name: ${23:string}",
            "    no_gateway_ip: ${24|true,false|}",
            "    project: ${25:string}",
            "    region_name: ${26:string}",
            "    sdk_log_level: ${27|INFO,DEBUG|}",
            "    sdk_log_path: ${28:string}",
            "    state: ${29|present,absent|}",
            "    timeout: ${30:180}",
            "    use_default_subnetpool: ${31|true,false|}",
            "    validate_certs: ${32|false,true|}",
            "    wait: ${33|true,false|}",
            "$0"
        ],
        "description": "Add/Remove subnet to an OpenStack network",
        "scope": "ansible"
    },
    "Retrieve information about one or more OpenStack subnets.": {
        "prefix": [
            "openstack.cloud.subnets_info",
            "Retrieve information about one or more OpenStack subnets."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.subnets_info:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    interface: ${11|public,admin,internal|}",
            "    name: ${12:string}",
            "    region_name: ${13:string}",
            "    sdk_log_level: ${14|INFO,DEBUG|}",
            "    sdk_log_path: ${15:string}",
            "    timeout: ${16:180}",
            "    validate_certs: ${17|false,true|}",
            "    wait: ${18|true,false|}",
            "$0"
        ],
        "description": "Retrieve information about one or more OpenStack subnets.",
        "scope": "ansible"
    },
    "Associate OpenStack Identity users and roles": {
        "prefix": [
            "openstack.cloud.role_assignment",
            "Associate OpenStack Identity users and roles"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.role_assignment:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    domain: ${10:string}",
            "    group: ${11:string}",
            "    interface: ${12|public,admin,internal|}",
            "    project: ${13:string}",
            "    region_name: ${14:string}",
            "    role: ${15:string}",
            "    sdk_log_level: ${16|INFO,DEBUG|}",
            "    sdk_log_path: ${17:string}",
            "    state: ${18|present,absent|}",
            "    timeout: ${19:180}",
            "    user: ${20:string}",
            "    validate_certs: ${21|false,true|}",
            "    wait: ${22|true,false|}",
            "$0"
        ],
        "description": "Associate OpenStack Identity users and roles",
        "scope": "ansible"
    },
    "Create/Delete Cinder Volumes": {
        "prefix": [
            "openstack.cloud.volume",
            "Create/Delete Cinder Volumes"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.volume:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    bootable: ${6|false,true|}",
            "    ca_cert: ${7:string}",
            "    client_cert: ${8:string}",
            "    client_key: ${9:string}",
            "    cloud: ${10:\"raw\"}",
            "    display_description: ${11:string}",
            "    display_name: ${12:string}",
            "    image: ${13:string}",
            "    interface: ${14|public,admin,internal|}",
            "    region_name: ${16:string}",
            "    sdk_log_level: ${18|INFO,DEBUG|}",
            "    sdk_log_path: ${19:string}",
            "    size: ${20:int}",
            "    snapshot_id: ${21:string}",
            "    state: ${22|present,absent|}",
            "    timeout: ${23:180}",
            "    validate_certs: ${24|false,true|}",
            "    volume: ${25:string}",
            "    volume_type: ${26:string}",
            "    wait: ${27|true,false|}",
            "$0"
        ],
        "description": "Create/Delete Cinder Volumes",
        "scope": "ansible"
    },
    "Create/Delete Cinder Volume Snapshots": {
        "prefix": [
            "openstack.cloud.volume_snapshot",
            "Create/Delete Cinder Volume Snapshots"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.volume_snapshot:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    display_description: ${10:string}",
            "    display_name: ${11:string}",
            "    force: ${12|true,false|}",
            "    interface: ${13|public,admin,internal|}",
            "    region_name: ${14:string}",
            "    sdk_log_level: ${15|INFO,DEBUG|}",
            "    sdk_log_path: ${16:string}",
            "    state: ${17|present,absent|}",
            "    timeout: ${18:180}",
            "    validate_certs: ${19|false,true|}",
            "    volume: ${20:string}",
            "    wait: ${21|true,false|}",
            "$0"
        ],
        "description": "Create/Delete Cinder Volume Snapshots",
        "scope": "ansible"
    },
    "Lists security groups": {
        "prefix": [
            "openstack.cloud.security_group_info",
            "Lists security groups"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.security_group_info:",
            "    any_tags:",
            "      - ${2:element}",
            "    api_timeout: ${3:int}",
            "    auth_type: ${5:string}",
            "    availability_zone: ${6:string}",
            "    ca_cert: ${7:string}",
            "    client_cert: ${8:string}",
            "    client_key: ${9:string}",
            "    cloud: ${10:\"raw\"}",
            "    description: ${11:string}",
            "    interface: ${12|public,admin,internal|}",
            "    name: ${13:string}",
            "    not_any_tags:",
            "      - ${14:element}",
            "    not_tags:",
            "      - ${15:element}",
            "    project_id: ${16:string}",
            "    region_name: ${17:string}",
            "    revision_number: ${18:int}",
            "    sdk_log_level: ${19|INFO,DEBUG|}",
            "    sdk_log_path: ${20:string}",
            "    tags:",
            "      - ${21:element}",
            "    timeout: ${22:180}",
            "    validate_certs: ${23|false,true|}",
            "    wait: ${24|true,false|}",
            "$0"
        ],
        "description": "Lists security groups",
        "scope": "ansible"
    },
    "Querying security group rules": {
        "prefix": [
            "openstack.cloud.security_group_rule_info",
            "Querying security group rules"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.security_group_rule_info:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    description: ${10:string}",
            "    direction: ${11:string}",
            "    ethertype: ${12:string}",
            "    interface: ${13|public,admin,internal|}",
            "    port_range_max: ${14:int}",
            "    port_range_min: ${15:int}",
            "    project: ${16:string}",
            "    protocol: ${17:string}",
            "    region_name: ${18:string}",
            "    remote_group: ${19:string}",
            "    remote_ip_prefix: ${20:string}",
            "    revision_number: ${21:int}",
            "    rule: ${22:string}",
            "    sdk_log_level: ${23|INFO,DEBUG|}",
            "    sdk_log_path: ${24:string}",
            "    security_group: ${25:string}",
            "    timeout: ${26:180}",
            "    validate_certs: ${27|false,true|}",
            "    wait: ${28|true,false|}",
            "$0"
        ],
        "description": "Querying security group rules",
        "scope": "ansible"
    },
    "Retrive information about Heat stacks": {
        "prefix": [
            "openstack.cloud.stack_info",
            "Retrive information about Heat stacks"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.stack_info:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    interface: ${10|public,admin,internal|}",
            "    name: ${11:string}",
            "    owner_id: ${12:string}",
            "    project_id: ${13:string}",
            "    region_name: ${14:string}",
            "    sdk_log_level: ${15|INFO,DEBUG|}",
            "    sdk_log_path: ${16:string}",
            "    status: ${17:string}",
            "    timeout: ${18:180}",
            "    validate_certs: ${19|false,true|}",
            "    wait: ${20|true,false|}",
            "$0"
        ],
        "description": "Retrive information about Heat stacks",
        "scope": "ansible"
    },
    "Create or delete subnet pools from OpenStack": {
        "prefix": [
            "openstack.cloud.subnet_pool",
            "Create or delete subnet pools from OpenStack"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.subnet_pool:",
            "    address_scope: ${2:string}",
            "    api_timeout: ${3:int}",
            "    auth_type: ${5:string}",
            "    availability_zone: ${6:string}",
            "    ca_cert: ${7:string}",
            "    client_cert: ${8:string}",
            "    client_key: ${9:string}",
            "    cloud: ${10:\"raw\"}",
            "    default_prefix_length: ${11:int}",
            "    default_quota: ${12:int}",
            "    description: ${13:string}",
            "    interface: ${15|public,admin,internal|}",
            "    is_default: ${16|true,false|}",
            "    maximum_prefix_length: ${17:int}",
            "    minimum_prefix_length: ${18:int}",
            "    name: ${19:string}",
            "    prefixes:",
            "      - ${20:element}",
            "    project: ${21:string}",
            "    region_name: ${22:string}",
            "    sdk_log_level: ${23|INFO,DEBUG|}",
            "    sdk_log_path: ${24:string}",
            "    shared: ${25|true,false|}",
            "    state: ${26|present,absent|}",
            "    timeout: ${27:180}",
            "    validate_certs: ${28|false,true|}",
            "    wait: ${29|true,false|}",
            "$0"
        ],
        "description": "Create or delete subnet pools from OpenStack",
        "scope": "ansible"
    },
    "Add/Delete Volume backup": {
        "prefix": [
            "openstack.cloud.volume_backup",
            "Add/Delete Volume backup"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.volume_backup:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    display_description: ${10:string}",
            "    display_name: ${11:string}",
            "    force: ${12|false,true|}",
            "    incremental: ${13|false,true|}",
            "    interface: ${14|public,admin,internal|}",
            "    region_name: ${16:string}",
            "    sdk_log_level: ${17|INFO,DEBUG|}",
            "    sdk_log_path: ${18:string}",
            "    snapshot: ${19:string}",
            "    state: ${20|present,absent|}",
            "    timeout: ${21:180}",
            "    validate_certs: ${22|false,true|}",
            "    volume: ${23:string}",
            "    wait: ${24|true,false|}",
            "$0"
        ],
        "description": "Add/Delete Volume backup",
        "scope": "ansible"
    },
    "Get Backups": {
        "prefix": [
            "openstack.cloud.volume_backup_info",
            "Get Backups"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.volume_backup_info:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    interface: ${10|public,admin,internal|}",
            "    name: ${11:string}",
            "    region_name: ${12:string}",
            "    sdk_log_level: ${13|INFO,DEBUG|}",
            "    sdk_log_path: ${14:string}",
            "    timeout: ${15:180}",
            "    validate_certs: ${16|false,true|}",
            "    volume: ${17:string}",
            "    wait: ${18|true,false|}",
            "$0"
        ],
        "description": "Get Backups",
        "scope": "ansible"
    },
    "Retrive information about volumes": {
        "prefix": [
            "openstack.cloud.volume_info",
            "Retrive information about volumes"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.volume_info:",
            "    all_projects: ${2|false,true|}",
            "    api_timeout: ${3:int}",
            "    auth_type: ${5:string}",
            "    availability_zone: ${6:string}",
            "    ca_cert: ${7:string}",
            "    client_cert: ${8:string}",
            "    client_key: ${9:string}",
            "    cloud: ${10:\"raw\"}",
            "    details: ${11|false,true|}",
            "    interface: ${12|public,admin,internal|}",
            "    name: ${13:string}",
            "    region_name: ${14:string}",
            "    sdk_log_level: ${15|INFO,DEBUG|}",
            "    sdk_log_path: ${16:string}",
            "    status: ${17:string}",
            "    timeout: ${18:180}",
            "    validate_certs: ${19|false,true|}",
            "    wait: ${20|true,false|}",
            "$0"
        ],
        "description": "Retrive information about volumes",
        "scope": "ansible"
    },
    "Get volume snapshots": {
        "prefix": [
            "openstack.cloud.volume_snapshot_info",
            "Get volume snapshots"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  openstack.cloud.volume_snapshot_info:",
            "    api_timeout: ${2:int}",
            "    auth_type: ${4:string}",
            "    availability_zone: ${5:string}",
            "    ca_cert: ${6:string}",
            "    client_cert: ${7:string}",
            "    client_key: ${8:string}",
            "    cloud: ${9:\"raw\"}",
            "    details: ${10|true,false|}",
            "    interface: ${11|public,admin,internal|}",
            "    name: ${12:string}",
            "    region_name: ${13:string}",
            "    sdk_log_level: ${14|INFO,DEBUG|}",
            "    sdk_log_path: ${15:string}",
            "    status: ${16:string}",
            "    timeout: ${17:180}",
            "    validate_certs: ${18|false,true|}",
            "    volume: ${19:string}",
            "    wait: ${20|true,false|}",
            "$0"
        ],
        "description": "Get volume snapshots",
        "scope": "ansible"
    }
}