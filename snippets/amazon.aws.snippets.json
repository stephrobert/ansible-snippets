{
    "Create or delete AWS AutoScaling Groups (ASGs)": {
        "prefix": [
            "amazon.aws.autoscaling_group",
            "Create or delete AWS AutoScaling Groups (ASGs)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.autoscaling_group:",
            "    access_key: ${2:string}",
            "    availability_zones:",
            "      - ${3:element}",
            "    aws_ca_bundle: ${4:path}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    decrement_desired_capacity: ${7|false,true|}",
            "    default_cooldown: ${8:300}",
            "    desired_capacity: ${9:int}",
            "    detach_instances:",
            "      - ${10:element}",
            "    endpoint_url: ${11:string}",
            "    health_check_period: ${12:300}",
            "    health_check_type: ${13|EC2,ELB|}",
            "    launch_config_name: ${14:string}",
            "    lc_check: ${16|true,false|}",
            "    load_balancers:",
            "      - ${17:element}",
            "    lt_check: ${18|true,false|}",
            "    max_instance_lifetime: ${19:int}",
            "    max_size: ${20:int}",
            "    metrics_collection: ${21|false,true|}",
            "    metrics_granularity: ${22:1Minute}",
            "    metrics_list:",
            "      - ${23:element}",
            "    min_size: ${24:int}",
            "    name: ${26:string}",
            "    notification_topic: ${27:string}",
            "    notification_types:",
            "      - ${28:element}",
            "    placement_group: ${29:string}",
            "    profile: ${30:string}",
            "    purge_tags: ${31|false,true|}",
            "    region: ${32:string}",
            "    replace_all_instances: ${33|false,true|}",
            "    replace_batch_size: ${34:1}",
            "    replace_instances:",
            "      - ${35:element}",
            "    secret_key: ${36:string}",
            "    session_token: ${37:string}",
            "    state: ${38|present,absent|}",
            "    suspend_processes:",
            "      - ${39:element}",
            "    tags:",
            "      - ${40:element}",
            "    target_group_arns:",
            "      - ${41:element}",
            "    termination_policies:",
            "      - ${42:element}",
            "    validate_certs: ${43|true,false|}",
            "    vpc_zone_identifier:",
            "      - ${44:element}",
            "    wait_for_instances: ${45|true,false|}",
            "    wait_timeout: ${46:300}",
            "$0"
        ],
        "description": "Create or delete AWS AutoScaling Groups (ASGs)",
        "scope": "ansible"
    },
    "Gather information about EC2 Auto Scaling Groups (ASGs) in AWS": {
        "prefix": [
            "amazon.aws.autoscaling_group_info",
            "Gather information about EC2 Auto Scaling Groups (ASGs) in AWS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.autoscaling_group_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    name: ${7:string}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    secret_key: ${10:string}",
            "    session_token: ${11:string}",
            "    validate_certs: ${13|true,false|}",
            "$0"
        ],
        "description": "Gather information about EC2 Auto Scaling Groups (ASGs) in AWS",
        "scope": "ansible"
    },
    "Gather information about availability zones in AWS": {
        "prefix": [
            "amazon.aws.aws_az_info",
            "Gather information about availability zones in AWS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.aws_az_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    secret_key: ${10:string}",
            "    session_token: ${11:string}",
            "    validate_certs: ${12|true,false|}",
            "$0"
        ],
        "description": "Gather information about availability zones in AWS",
        "scope": "ansible"
    },
    "Get information about the user and account being used to make AWS calls": {
        "prefix": [
            "amazon.aws.aws_caller_info",
            "Get information about the user and account being used to make AWS calls"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.aws_caller_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    profile: ${7:string}",
            "    region: ${8:string}",
            "    secret_key: ${9:string}",
            "    session_token: ${10:string}",
            "    validate_certs: ${11|true,false|}",
            "$0"
        ],
        "description": "Get information about the user and account being used to make AWS calls",
        "scope": "ansible"
    },
    "Create or delete an AWS CloudFormation stack": {
        "prefix": [
            "amazon.aws.cloudformation",
            "Create or delete an AWS CloudFormation stack"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.cloudformation:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    backoff_delay: ${5:3}",
            "    backoff_max_delay: ${6:30}",
            "    backoff_retries: ${7:10}",
            "    capabilities:",
            "      - ${8:element}",
            "    changeset_name: ${9:string}",
            "    create_changeset: ${10|false,true|}",
            "    create_timeout: ${11:int}",
            "    debug_botocore_endpoint_logs: ${12|false,true|}",
            "    disable_rollback: ${13|false,true|}",
            "    endpoint_url: ${14:string}",
            "    events_limit: ${15:200}",
            "    notification_arns: ${16:string}",
            "    on_create_failure: ${17:string}",
            "    profile: ${18:string}",
            "    region: ${19:string}",
            "    role_arn: ${20:string}",
            "    secret_key: ${21:string}",
            "    session_token: ${22:string}",
            "    stack_name: ${23:string}",
            "    stack_policy: ${24:string}",
            "    state: ${27|present,absent|}",
            "    template: ${29:path}",
            "    template_body: ${30:string}",
            "    template_url: ${32:string}",
            "    termination_protection: ${33|false,true|}",
            "    validate_certs: ${34|true,false|}",
            "$0"
        ],
        "description": "Create or delete an AWS CloudFormation stack",
        "scope": "ansible"
    },
    "Obtain information about an AWS CloudFormation stack": {
        "prefix": [
            "amazon.aws.cloudformation_info",
            "Obtain information about an AWS CloudFormation stack"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.cloudformation_info:",
            "    access_key: ${2:string}",
            "    all_facts: ${3|false,true|}",
            "    aws_ca_bundle: ${4:path}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    secret_key: ${10:string}",
            "    session_token: ${11:string}",
            "    stack_change_sets: ${12|false,true|}",
            "    stack_events: ${13|false,true|}",
            "    stack_name: ${14:string}",
            "    stack_policy: ${15|false,true|}",
            "    stack_resources: ${16|false,true|}",
            "    stack_template: ${17|false,true|}",
            "    validate_certs: ${18|true,false|}",
            "$0"
        ],
        "description": "Obtain information about an AWS CloudFormation stack",
        "scope": "ansible"
    },
    "manage CloudTrail create, delete, update": {
        "prefix": [
            "amazon.aws.cloudtrail",
            "manage CloudTrail create, delete, update"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.cloudtrail:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    cloudwatch_logs_log_group_arn: ${5:string}",
            "    cloudwatch_logs_role_arn: ${6:string}",
            "    debug_botocore_endpoint_logs: ${7|false,true|}",
            "    enable_log_file_validation: ${8|false,true|}",
            "    enable_logging: ${9|true,false|}",
            "    endpoint_url: ${10:string}",
            "    include_global_events: ${11|true,false|}",
            "    is_multi_region_trail: ${12|false,true|}",
            "    kms_key_id: ${13:string}",
            "    name: ${14:default}",
            "    profile: ${15:string}",
            "    purge_tags: ${16|true,false|}",
            "    region: ${17:string}",
            "    s3_bucket_name: ${18:string}",
            "    s3_key_prefix: ${19:string}",
            "    secret_key: ${20:string}",
            "    session_token: ${21:string}",
            "    sns_topic_name: ${22:string}",
            "    state: ${23|present,absent,enabled,disabled|}",
            "    validate_certs: ${25|true,false|}",
            "$0"
        ],
        "description": "manage CloudTrail create, delete, update",
        "scope": "ansible"
    },
    "Gather information about trails in AWS Cloud Trail.": {
        "prefix": [
            "amazon.aws.cloudtrail_info",
            "Gather information about trails in AWS Cloud Trail."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.cloudtrail_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    include_shadow_trails: ${7|true,false|}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    secret_key: ${10:string}",
            "    session_token: ${11:string}",
            "    trail_names:",
            "      - ${12:element}",
            "    validate_certs: ${13|true,false|}",
            "$0"
        ],
        "description": "Gather information about trails in AWS Cloud Trail.",
        "scope": "ansible"
    },
    "Create/update or delete AWS CloudWatch 'metric alarms'": {
        "prefix": [
            "amazon.aws.cloudwatch_metric_alarm",
            "Create/update or delete AWS CloudWatch &#39;metric alarms&#39;"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.cloudwatch_metric_alarm:",
            "    access_key: ${2:string}",
            "    alarm_actions:",
            "      - ${3:element}",
            "    aws_ca_bundle: ${4:path}",
            "    comparison: ${6:string}",
            "    debug_botocore_endpoint_logs: ${7|false,true|}",
            "    description: ${8:string}",
            "    endpoint_url: ${10:string}",
            "    evaluation_periods: ${11:int}",
            "    insufficient_data_actions:",
            "      - ${12:element}",
            "    metric: ${13:string}",
            "    name: ${14:string}",
            "    namespace: ${15:string}",
            "    ok_actions:",
            "      - ${16:element}",
            "    period: ${17:int}",
            "    profile: ${18:string}",
            "    region: ${19:string}",
            "    secret_key: ${20:string}",
            "    session_token: ${21:string}",
            "    state: ${22|present,absent|}",
            "    statistic: ${23:string}",
            "    treat_missing_data: ${25|missing,breaching,notBreaching,ignore|}",
            "    unit: ${26:string}",
            "    validate_certs: ${27|true,false|}",
            "$0"
        ],
        "description": "Create/update or delete AWS CloudWatch &#39;metric alarms&#39;",
        "scope": "ansible"
    },
    "Gather information about the alarms for the specified metric": {
        "prefix": [
            "amazon.aws.cloudwatch_metric_alarm_info",
            "Gather information about the alarms for the specified metric"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.cloudwatch_metric_alarm_info:",
            "    access_key: ${2:string}",
            "    action_prefix: ${3:string}",
            "    alarm_name_prefix: ${4:string}",
            "    alarm_names:",
            "      - ${5:element}",
            "    alarm_type: ${6|MetricAlarm,CompositeAlarm|}",
            "    aws_ca_bundle: ${7:path}",
            "    children_of_alarm_name: ${9:string}",
            "    debug_botocore_endpoint_logs: ${10|false,true|}",
            "    endpoint_url: ${11:string}",
            "    parents_of_alarm_name: ${12:string}",
            "    profile: ${13:string}",
            "    region: ${14:string}",
            "    secret_key: ${15:string}",
            "    session_token: ${16:string}",
            "    state_value: ${17:string}",
            "    validate_certs: ${18|true,false|}",
            "$0"
        ],
        "description": "Gather information about the alarms for the specified metric",
        "scope": "ansible"
    },
    "Manage CloudWatch Event rules and targets": {
        "prefix": [
            "amazon.aws.cloudwatchevent_rule",
            "Manage CloudWatch Event rules and targets"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.cloudwatchevent_rule:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    description: ${6:string}",
            "    endpoint_url: ${7:string}",
            "    name: ${9:string}",
            "    profile: ${10:string}",
            "    region: ${11:string}",
            "    role_arn: ${12:string}",
            "    schedule_expression: ${13:string}",
            "    secret_key: ${14:string}",
            "    session_token: ${15:string}",
            "    state: ${16|present,disabled,absent|}",
            "    targets:",
            "      - ${17:element}",
            "    validate_certs: ${18|true,false|}",
            "$0"
        ],
        "description": "Manage CloudWatch Event rules and targets",
        "scope": "ansible"
    },
    "create or delete log_group in CloudWatchLogs": {
        "prefix": [
            "amazon.aws.cloudwatchlogs_log_group",
            "create or delete log_group in CloudWatchLogs"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.cloudwatchlogs_log_group:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    kms_key_id: ${7:string}",
            "    log_group_name: ${8:string}",
            "    overwrite: ${9|false,true|}",
            "    profile: ${10:string}",
            "    purge_retention_policy: ${11|false,true|}",
            "    purge_tags: ${12|true,false|}",
            "    region: ${13:string}",
            "    retention: ${14:int}",
            "    secret_key: ${15:string}",
            "    session_token: ${16:string}",
            "    state: ${17|present,absent|}",
            "    validate_certs: ${19|true,false|}",
            "$0"
        ],
        "description": "create or delete log_group in CloudWatchLogs",
        "scope": "ansible"
    },
    "Get information about log_group in CloudWatchLogs": {
        "prefix": [
            "amazon.aws.cloudwatchlogs_log_group_info",
            "Get information about log_group in CloudWatchLogs"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.cloudwatchlogs_log_group_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    log_group_name: ${7:string}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    secret_key: ${10:string}",
            "    session_token: ${11:string}",
            "    validate_certs: ${12|true,false|}",
            "$0"
        ],
        "description": "Get information about log_group in CloudWatchLogs",
        "scope": "ansible"
    },
    "Manage CloudWatch log group metric filter": {
        "prefix": [
            "amazon.aws.cloudwatchlogs_log_group_metric_filter",
            "Manage CloudWatch log group metric filter"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.cloudwatchlogs_log_group_metric_filter:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    filter_name: ${7:string}",
            "    filter_pattern: ${8:string}",
            "    log_group_name: ${9:string}",
            "    profile: ${11:string}",
            "    region: ${12:string}",
            "    secret_key: ${13:string}",
            "    session_token: ${14:string}",
            "    state: ${15:string}",
            "    validate_certs: ${16|true,false|}",
            "$0"
        ],
        "description": "Manage CloudWatch log group metric filter",
        "scope": "ansible"
    },
    "Create or destroy an image (AMI) in EC2": {
        "prefix": [
            "amazon.aws.ec2_ami",
            "Create or destroy an image (AMI) in EC2"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_ami:",
            "    access_key: ${2:string}",
            "    architecture: ${3:x86_64}",
            "    aws_ca_bundle: ${4:path}",
            "    billing_products:",
            "      - ${6:element}",
            "    debug_botocore_endpoint_logs: ${7|false,true|}",
            "    delete_snapshot: ${8|false,true|}",
            "    description: ${9:string}",
            "    device_mapping:",
            "      - ${10:element}",
            "    endpoint_url: ${11:string}",
            "    enhanced_networking: ${12|false,true|}",
            "    image_id: ${13:string}",
            "    image_location: ${14:string}",
            "    instance_id: ${15:string}",
            "    kernel_id: ${16:string}",
            "    name: ${18:string}",
            "    no_reboot: ${19|false,true|}",
            "    profile: ${20:string}",
            "    purge_tags: ${21|true,false|}",
            "    ramdisk_id: ${22:string}",
            "    region: ${23:string}",
            "    root_device_name: ${24:string}",
            "    secret_key: ${25:string}",
            "    session_token: ${26:string}",
            "    sriov_net_support: ${27:string}",
            "    state: ${28|present,absent|}",
            "    validate_certs: ${30|true,false|}",
            "    virtualization_type: ${31:hvm}",
            "    wait: ${32|false,true|}",
            "    wait_timeout: ${33:1200}",
            "$0"
        ],
        "description": "Create or destroy an image (AMI) in EC2",
        "scope": "ansible"
    },
    "Gather information about ec2 AMIs": {
        "prefix": [
            "amazon.aws.ec2_ami_info",
            "Gather information about ec2 AMIs"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_ami_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    describe_image_attributes: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    executable_users:",
            "      - ${8:element}",
            "    image_ids:",
            "      - ${10:element}",
            "    owners:",
            "      - ${11:element}",
            "    profile: ${12:string}",
            "    region: ${13:string}",
            "    secret_key: ${14:string}",
            "    session_token: ${15:string}",
            "    validate_certs: ${16|true,false|}",
            "$0"
        ],
        "description": "Gather information about ec2 AMIs",
        "scope": "ansible"
    },
    "manages EC2 elastic IP (EIP) addresses.": {
        "prefix": [
            "amazon.aws.ec2_eip",
            "manages EC2 elastic IP (EIP) addresses."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_eip:",
            "    access_key: ${2:string}",
            "    allow_reassociation: ${3|false,true|}",
            "    aws_ca_bundle: ${4:path}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    device_id: ${7:string}",
            "    endpoint_url: ${8:string}",
            "    in_vpc: ${9|false,true|}",
            "    private_ip_address: ${10:string}",
            "    profile: ${11:string}",
            "    public_ip: ${12:string}",
            "    public_ipv4_pool: ${13:string}",
            "    purge_tags: ${14|true,false|}",
            "    region: ${15:string}",
            "    release_on_disassociation: ${16|false,true|}",
            "    reuse_existing_ip_allowed: ${17|false,true|}",
            "    secret_key: ${18:string}",
            "    session_token: ${19:string}",
            "    state: ${20|present,absent|}",
            "    tag_name: ${21:string}",
            "    tag_value: ${22:string}",
            "    validate_certs: ${24|true,false|}",
            "$0"
        ],
        "description": "manages EC2 elastic IP (EIP) addresses.",
        "scope": "ansible"
    },
    "List EC2 EIP details": {
        "prefix": [
            "amazon.aws.ec2_eip_info",
            "List EC2 EIP details"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_eip_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    secret_key: ${10:string}",
            "    session_token: ${11:string}",
            "    validate_certs: ${12|true,false|}",
            "$0"
        ],
        "description": "List EC2 EIP details",
        "scope": "ansible"
    },
    "Create and optionally attach an Elastic Network Interface (ENI) to an instance": {
        "prefix": [
            "amazon.aws.ec2_eni",
            "Create and optionally attach an Elastic Network Interface (ENI) to an instance"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_eni:",
            "    access_key: ${2:string}",
            "    allow_reassignment: ${3|false,true|}",
            "    attached: ${4|false,true|}",
            "    aws_ca_bundle: ${5:path}",
            "    debug_botocore_endpoint_logs: ${7|false,true|}",
            "    delete_on_termination: ${8|false,true|}",
            "    description: ${9:string}",
            "    device_index: ${10:0}",
            "    endpoint_url: ${11:string}",
            "    eni_id: ${12:string}",
            "    force_detach: ${13|false,true|}",
            "    instance_id: ${14:string}",
            "    name: ${15:string}",
            "    private_ip_address: ${16:string}",
            "    profile: ${17:string}",
            "    purge_secondary_private_ip_addresses: ${18|false,true|}",
            "    purge_tags: ${19|true,false|}",
            "    region: ${20:string}",
            "    secondary_private_ip_address_count: ${21:int}",
            "    secondary_private_ip_addresses:",
            "      - ${22:element}",
            "    secret_key: ${23:string}",
            "    security_groups:",
            "      - ${24:element}",
            "    session_token: ${25:string}",
            "    source_dest_check: ${26|false,true|}",
            "    state: ${27|present,absent|}",
            "    subnet_id: ${28:string}",
            "    validate_certs: ${30|true,false|}",
            "$0"
        ],
        "description": "Create and optionally attach an Elastic Network Interface (ENI) to an instance",
        "scope": "ansible"
    },
    "Gather information about EC2 ENI interfaces in AWS": {
        "prefix": [
            "amazon.aws.ec2_eni_info",
            "Gather information about EC2 ENI interfaces in AWS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_eni_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    eni_id: ${7:string}",
            "    profile: ${9:string}",
            "    region: ${10:string}",
            "    secret_key: ${11:string}",
            "    session_token: ${12:string}",
            "    validate_certs: ${13|true,false|}",
            "$0"
        ],
        "description": "Gather information about EC2 ENI interfaces in AWS",
        "scope": "ansible"
    },
    "Create & manage EC2 instances": {
        "prefix": [
            "amazon.aws.ec2_instance",
            "Create &amp; manage EC2 instances"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_instance:",
            "    access_key: ${3:string}",
            "    availability_zone: ${4:string}",
            "    aws_ca_bundle: ${5:path}",
            "    count: ${7:int}",
            "    cpu_credit_specification: ${8:string}",
            "    debug_botocore_endpoint_logs: ${10|false,true|}",
            "    detailed_monitoring: ${11|false,true|}",
            "    ebs_optimized: ${12|false,true|}",
            "    endpoint_url: ${13:string}",
            "    exact_count: ${14:int}",
            "    hibernation_options: ${16|false,true|}",
            "    iam_instance_profile: ${17:string}",
            "    image_id: ${19:string}",
            "    instance_ids:",
            "      - ${20:element}",
            "    instance_initiated_shutdown_behavior: ${21:string}",
            "    instance_type: ${22:string}",
            "    key_name: ${23:string}",
            "    name: ${26:string}",
            "    placement_group: ${28:string}",
            "    profile: ${29:string}",
            "    purge_tags: ${30|true,false|}",
            "    region: ${31:string}",
            "    secret_key: ${32:string}",
            "    security_group: ${33:string}",
            "    security_groups:",
            "      - ${34:element}",
            "    session_token: ${35:string}",
            "    state: ${36|present,terminated,running,started,stopped,restarted,rebooted,absent|}",
            "    tenancy: ${38:string}",
            "    termination_protection: ${39|false,true|}",
            "    user_data: ${40:string}",
            "    validate_certs: ${41|true,false|}",
            "    volumes:",
            "      - ${42:element}",
            "    vpc_subnet_id: ${43:string}",
            "    wait: ${44|true,false|}",
            "    wait_timeout: ${45:600}",
            "$0"
        ],
        "description": "Create &amp; manage EC2 instances",
        "scope": "ansible"
    },
    "Gather information about ec2 instances in AWS": {
        "prefix": [
            "amazon.aws.ec2_instance_info",
            "Gather information about ec2 instances in AWS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_instance_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    instance_ids:",
            "      - ${8:element}",
            "    minimum_uptime: ${9:int}",
            "    profile: ${10:string}",
            "    region: ${11:string}",
            "    secret_key: ${12:string}",
            "    session_token: ${13:string}",
            "    validate_certs: ${14|true,false|}",
            "$0"
        ],
        "description": "Gather information about ec2 instances in AWS",
        "scope": "ansible"
    },
    "Create or delete an EC2 key pair": {
        "prefix": [
            "amazon.aws.ec2_key",
            "Create or delete an EC2 key pair"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_key:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    force: ${7|true,false|}",
            "    key_material: ${8:string}",
            "    key_type: ${9:string}",
            "    name: ${10:string}",
            "    profile: ${11:string}",
            "    purge_tags: ${12|true,false|}",
            "    region: ${13:string}",
            "    secret_key: ${14:string}",
            "    session_token: ${15:string}",
            "    state: ${16|present,absent|}",
            "    validate_certs: ${18|true,false|}",
            "$0"
        ],
        "description": "Create or delete an EC2 key pair",
        "scope": "ansible"
    },
    "Gathers facts (instance metadata) about remote hosts within EC2": {
        "prefix": [
            "amazon.aws.ec2_metadata_facts",
            "Gathers facts (instance metadata) about remote hosts within EC2"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_metadata_facts:",
            "$0"
        ],
        "description": "Gathers facts (instance metadata) about remote hosts within EC2",
        "scope": "ansible"
    },
    "Maintain an EC2 security group": {
        "prefix": [
            "amazon.aws.ec2_security_group",
            "Maintain an EC2 security group"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_security_group:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    description: ${6:string}",
            "    endpoint_url: ${7:string}",
            "    group_id: ${8:string}",
            "    name: ${9:string}",
            "    profile: ${10:string}",
            "    purge_rules: ${11|true,false|}",
            "    purge_rules_egress: ${12|true,false|}",
            "    purge_tags: ${13|true,false|}",
            "    region: ${14:string}",
            "    rules:",
            "      - ${15:element}",
            "    rules_egress:",
            "      - ${16:element}",
            "    secret_key: ${17:string}",
            "    session_token: ${18:string}",
            "    state: ${19|present,absent|}",
            "    validate_certs: ${21|true,false|}",
            "    vpc_id: ${22:string}",
            "$0"
        ],
        "description": "Maintain an EC2 security group",
        "scope": "ansible"
    },
    "Gather information about EC2 security groups in AWS": {
        "prefix": [
            "amazon.aws.ec2_security_group_info",
            "Gather information about EC2 security groups in AWS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_security_group_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    secret_key: ${10:string}",
            "    session_token: ${11:string}",
            "    validate_certs: ${12|true,false|}",
            "$0"
        ],
        "description": "Gather information about EC2 security groups in AWS",
        "scope": "ansible"
    },
    "Creates a snapshot from an existing volume": {
        "prefix": [
            "amazon.aws.ec2_snapshot",
            "Creates a snapshot from an existing volume"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_snapshot:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    description: ${6:string}",
            "    device_name: ${7:string}",
            "    endpoint_url: ${8:string}",
            "    instance_id: ${9:string}",
            "    last_snapshot_min_age: ${10:0}",
            "    profile: ${11:string}",
            "    region: ${12:string}",
            "    secret_key: ${13:string}",
            "    session_token: ${14:string}",
            "    snapshot_id: ${15:string}",
            "    state: ${17|present,absent|}",
            "    validate_certs: ${18|true,false|}",
            "    volume_id: ${19:string}",
            "    wait: ${20|true,false|}",
            "    wait_timeout: ${21:600}",
            "$0"
        ],
        "description": "Creates a snapshot from an existing volume",
        "scope": "ansible"
    },
    "Gathers information about EC2 volume snapshots in AWS": {
        "prefix": [
            "amazon.aws.ec2_snapshot_info",
            "Gathers information about EC2 volume snapshots in AWS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_snapshot_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    max_results: ${8:int}",
            "    next_token_id: ${9:string}",
            "    owner_ids:",
            "      - ${10:element}",
            "    profile: ${11:string}",
            "    region: ${12:string}",
            "    restorable_by_user_ids:",
            "      - ${13:element}",
            "    secret_key: ${14:string}",
            "    session_token: ${15:string}",
            "    snapshot_ids:",
            "      - ${16:element}",
            "    validate_certs: ${17|true,false|}",
            "$0"
        ],
        "description": "Gathers information about EC2 volume snapshots in AWS",
        "scope": "ansible"
    },
    "Request, stop, reboot or cancel spot instance": {
        "prefix": [
            "amazon.aws.ec2_spot_instance",
            "Request, stop, reboot or cancel spot instance"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_spot_instance:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    client_token: ${5:string}",
            "    count: ${6:1}",
            "    debug_botocore_endpoint_logs: ${7|false,true|}",
            "    endpoint_url: ${8:string}",
            "    interruption: ${9|terminate,hibernate,stop|}",
            "    launch_group: ${10:string}",
            "    profile: ${12:string}",
            "    region: ${13:string}",
            "    secret_key: ${14:string}",
            "    session_token: ${15:string}",
            "    spot_instance_request_ids:",
            "      - ${16:element}",
            "    spot_price: ${17:string}",
            "    spot_type: ${18|one-time,persistent|}",
            "    state: ${19|present,absent|}",
            "    validate_certs: ${21|true,false|}",
            "    zone_group: ${22:string}",
            "$0"
        ],
        "description": "Request, stop, reboot or cancel spot instance",
        "scope": "ansible"
    },
    "Gather information about ec2 spot instance requests": {
        "prefix": [
            "amazon.aws.ec2_spot_instance_info",
            "Gather information about ec2 spot instance requests"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_spot_instance_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    secret_key: ${10:string}",
            "    session_token: ${11:string}",
            "    spot_instance_request_ids:",
            "      - ${12:element}",
            "    validate_certs: ${13|true,false|}",
            "$0"
        ],
        "description": "Gather information about ec2 spot instance requests",
        "scope": "ansible"
    },
    "Create and remove tags on ec2 resources": {
        "prefix": [
            "amazon.aws.ec2_tag",
            "Create and remove tags on ec2 resources"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_tag:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    profile: ${7:string}",
            "    purge_tags: ${8|false,true|}",
            "    region: ${9:string}",
            "    resource: ${10:string}",
            "    secret_key: ${11:string}",
            "    session_token: ${12:string}",
            "    state: ${13|present,absent|}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "Create and remove tags on ec2 resources",
        "scope": "ansible"
    },
    "List tags on ec2 resources": {
        "prefix": [
            "amazon.aws.ec2_tag_info",
            "List tags on ec2 resources"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_tag_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    profile: ${7:string}",
            "    region: ${8:string}",
            "    resource: ${9:string}",
            "    secret_key: ${10:string}",
            "    session_token: ${11:string}",
            "    validate_certs: ${12|true,false|}",
            "$0"
        ],
        "description": "List tags on ec2 resources",
        "scope": "ansible"
    },
    "Create and attach a volume, return volume ID and device map": {
        "prefix": [
            "amazon.aws.ec2_vol",
            "Create and attach a volume, return volume ID and device map"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_vol:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    delete_on_termination: ${6|false,true|}",
            "    device_name: ${7:string}",
            "    encrypted: ${8|false,true|}",
            "    endpoint_url: ${9:string}",
            "    id: ${10:string}",
            "    instance: ${11:string}",
            "    iops: ${12:int}",
            "    kms_key_id: ${13:string}",
            "    modify_volume: ${14|false,true|}",
            "    multi_attach: ${15|false,true|}",
            "    name: ${16:string}",
            "    outpost_arn: ${17:string}",
            "    profile: ${18:string}",
            "    purge_tags: ${19|true,false|}",
            "    region: ${20:string}",
            "    secret_key: ${21:string}",
            "    session_token: ${22:string}",
            "    snapshot: ${23:string}",
            "    state: ${24|present,absent|}",
            "    throughput: ${26:int}",
            "    validate_certs: ${27|true,false|}",
            "    volume_size: ${28:int}",
            "    volume_type: ${29|standard,gp2,io1,st1,sc1,gp3,io2|}",
            "    zone: ${30:string}",
            "$0"
        ],
        "description": "Create and attach a volume, return volume ID and device map",
        "scope": "ansible"
    },
    "Gather information about EC2 volumes in AWS": {
        "prefix": [
            "amazon.aws.ec2_vol_info",
            "Gather information about EC2 volumes in AWS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_vol_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    secret_key: ${10:string}",
            "    session_token: ${11:string}",
            "    validate_certs: ${12|true,false|}",
            "$0"
        ],
        "description": "Gather information about EC2 volumes in AWS",
        "scope": "ansible"
    },
    "Manages DHCP Options, and can ensure the DHCP options for the given VPC match what's requested": {
        "prefix": [
            "amazon.aws.ec2_vpc_dhcp_option",
            "Manages DHCP Options, and can ensure the DHCP options for the given VPC match what&#39;s requested"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_vpc_dhcp_option:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    delete_old: ${6|true,false|}",
            "    dhcp_options_id: ${7:string}",
            "    dns_servers:",
            "      - ${8:element}",
            "    domain_name: ${9:string}",
            "    endpoint_url: ${10:string}",
            "    inherit_existing: ${11|false,true|}",
            "    netbios_name_servers:",
            "      - ${12:element}",
            "    netbios_node_type: ${13:int}",
            "    ntp_servers:",
            "      - ${14:element}",
            "    profile: ${15:string}",
            "    purge_tags: ${16|true,false|}",
            "    region: ${17:string}",
            "    secret_key: ${18:string}",
            "    session_token: ${19:string}",
            "    state: ${20|present,absent|}",
            "    validate_certs: ${22|true,false|}",
            "    vpc_id: ${23:string}",
            "$0"
        ],
        "description": "Manages DHCP Options, and can ensure the DHCP options for the given VPC match what&#39;s requested",
        "scope": "ansible"
    },
    "Gather information about DHCP options sets in AWS": {
        "prefix": [
            "amazon.aws.ec2_vpc_dhcp_option_info",
            "Gather information about DHCP options sets in AWS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_vpc_dhcp_option_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    dhcp_options_ids:",
            "      - ${6:element}",
            "    dry_run: ${7|false,true|}",
            "    endpoint_url: ${8:string}",
            "    profile: ${10:string}",
            "    region: ${11:string}",
            "    secret_key: ${12:string}",
            "    session_token: ${13:string}",
            "    validate_certs: ${14|true,false|}",
            "$0"
        ],
        "description": "Gather information about DHCP options sets in AWS",
        "scope": "ansible"
    },
    "Create and delete AWS VPC endpoints": {
        "prefix": [
            "amazon.aws.ec2_vpc_endpoint",
            "Create and delete AWS VPC endpoints"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_vpc_endpoint:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    client_token: ${5:string}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    policy_file: ${9:path}",
            "    profile: ${10:string}",
            "    purge_tags: ${11|true,false|}",
            "    region: ${12:string}",
            "    route_table_ids:",
            "      - ${13:element}",
            "    secret_key: ${14:string}",
            "    service: ${15:string}",
            "    session_token: ${16:string}",
            "    state: ${17|present,absent|}",
            "    validate_certs: ${19|true,false|}",
            "    vpc_endpoint_id: ${20:string}",
            "    vpc_endpoint_security_groups:",
            "      - ${21:element}",
            "    vpc_endpoint_subnets:",
            "      - ${22:element}",
            "    vpc_endpoint_type: ${23|Gateway,Interface,GatewayLoadBalancer|}",
            "    vpc_id: ${24:string}",
            "    wait: ${25|false,true|}",
            "    wait_timeout: ${26:320}",
            "$0"
        ],
        "description": "Create and delete AWS VPC endpoints",
        "scope": "ansible"
    },
    "Retrieves AWS VPC endpoints details using AWS methods": {
        "prefix": [
            "amazon.aws.ec2_vpc_endpoint_info",
            "Retrieves AWS VPC endpoints details using AWS methods"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_vpc_endpoint_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    profile: ${8:string}",
            "    query: ${9:string}",
            "    region: ${10:string}",
            "    secret_key: ${11:string}",
            "    session_token: ${12:string}",
            "    validate_certs: ${13|true,false|}",
            "    vpc_endpoint_ids:",
            "      - ${14:element}",
            "$0"
        ],
        "description": "Retrieves AWS VPC endpoints details using AWS methods",
        "scope": "ansible"
    },
    "Retrieves AWS VPC endpoint service details": {
        "prefix": [
            "amazon.aws.ec2_vpc_endpoint_service_info",
            "Retrieves AWS VPC endpoint service details"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_vpc_endpoint_service_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    secret_key: ${10:string}",
            "    service_names:",
            "      - ${11:element}",
            "    session_token: ${12:string}",
            "    validate_certs: ${13|true,false|}",
            "$0"
        ],
        "description": "Retrieves AWS VPC endpoint service details",
        "scope": "ansible"
    },
    "Manage an AWS VPC Internet gateway": {
        "prefix": [
            "amazon.aws.ec2_vpc_igw",
            "Manage an AWS VPC Internet gateway"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_vpc_igw:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    profile: ${7:string}",
            "    purge_tags: ${8|true,false|}",
            "    region: ${9:string}",
            "    secret_key: ${10:string}",
            "    session_token: ${11:string}",
            "    state: ${12|present,absent|}",
            "    validate_certs: ${14|true,false|}",
            "    vpc_id: ${15:string}",
            "$0"
        ],
        "description": "Manage an AWS VPC Internet gateway",
        "scope": "ansible"
    },
    "Gather information about internet gateways in AWS": {
        "prefix": [
            "amazon.aws.ec2_vpc_igw_info",
            "Gather information about internet gateways in AWS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_vpc_igw_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    convert_tags: ${5|true,false|}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    internet_gateway_ids:",
            "      - ${9:element}",
            "    profile: ${10:string}",
            "    region: ${11:string}",
            "    secret_key: ${12:string}",
            "    session_token: ${13:string}",
            "    validate_certs: ${14|true,false|}",
            "$0"
        ],
        "description": "Gather information about internet gateways in AWS",
        "scope": "ansible"
    },
    "Manage AWS VPC NAT Gateways": {
        "prefix": [
            "amazon.aws.ec2_vpc_nat_gateway",
            "Manage AWS VPC NAT Gateways"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_vpc_nat_gateway:",
            "    access_key: ${2:string}",
            "    allocation_id: ${3:string}",
            "    aws_ca_bundle: ${4:path}",
            "    client_token: ${6:string}",
            "    debug_botocore_endpoint_logs: ${7|false,true|}",
            "    eip_address: ${8:string}",
            "    endpoint_url: ${9:string}",
            "    if_exist_do_not_create: ${10|false,true|}",
            "    nat_gateway_id: ${11:string}",
            "    profile: ${12:string}",
            "    purge_tags: ${13|true,false|}",
            "    region: ${14:string}",
            "    release_eip: ${15|false,true|}",
            "    secret_key: ${16:string}",
            "    session_token: ${17:string}",
            "    state: ${18|present,absent|}",
            "    subnet_id: ${19:string}",
            "    validate_certs: ${21|true,false|}",
            "    wait: ${22|false,true|}",
            "    wait_timeout: ${23:320}",
            "$0"
        ],
        "description": "Manage AWS VPC NAT Gateways",
        "scope": "ansible"
    },
    "Retrieves AWS VPC Managed Nat Gateway details using AWS methods": {
        "prefix": [
            "amazon.aws.ec2_vpc_nat_gateway_info",
            "Retrieves AWS VPC Managed Nat Gateway details using AWS methods"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_vpc_nat_gateway_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    nat_gateway_ids:",
            "      - ${8:element}",
            "    profile: ${9:string}",
            "    region: ${10:string}",
            "    secret_key: ${11:string}",
            "    session_token: ${12:string}",
            "    validate_certs: ${13|true,false|}",
            "$0"
        ],
        "description": "Retrieves AWS VPC Managed Nat Gateway details using AWS methods",
        "scope": "ansible"
    },
    "Configure AWS Virtual Private Clouds": {
        "prefix": [
            "amazon.aws.ec2_vpc_net",
            "Configure AWS Virtual Private Clouds"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_vpc_net:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    cidr_block:",
            "      - ${5:element}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    dhcp_opts_id: ${7:string}",
            "    dns_hostnames: ${8|false,true|}",
            "    dns_support: ${9|false,true|}",
            "    endpoint_url: ${10:string}",
            "    ipv6_cidr: ${11|false,true|}",
            "    multi_ok: ${12|false,true|}",
            "    name: ${13:string}",
            "    profile: ${14:string}",
            "    purge_cidrs: ${15|false,true|}",
            "    purge_tags: ${16|true,false|}",
            "    region: ${17:string}",
            "    secret_key: ${18:string}",
            "    session_token: ${19:string}",
            "    state: ${20|present,absent|}",
            "    tenancy: ${22|default,dedicated|}",
            "    validate_certs: ${23|true,false|}",
            "    vpc_id: ${24:string}",
            "$0"
        ],
        "description": "Configure AWS Virtual Private Clouds",
        "scope": "ansible"
    },
    "Gather information about ec2 VPCs in AWS": {
        "prefix": [
            "amazon.aws.ec2_vpc_net_info",
            "Gather information about ec2 VPCs in AWS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_vpc_net_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    secret_key: ${10:string}",
            "    session_token: ${11:string}",
            "    validate_certs: ${12|true,false|}",
            "    vpc_ids:",
            "      - ${13:element}",
            "$0"
        ],
        "description": "Gather information about ec2 VPCs in AWS",
        "scope": "ansible"
    },
    "Manage route tables for AWS Virtual Private Clouds": {
        "prefix": [
            "amazon.aws.ec2_vpc_route_table",
            "Manage route tables for AWS Virtual Private Clouds"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_vpc_route_table:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    gateway_id: ${7:string}",
            "    lookup: ${8|tag,id|}",
            "    profile: ${9:string}",
            "    propagating_vgw_ids:",
            "      - ${10:element}",
            "    purge_routes: ${11|true,false|}",
            "    purge_subnets: ${12|true,false|}",
            "    purge_tags: ${13|true,false|}",
            "    region: ${14:string}",
            "    route_table_id: ${15:string}",
            "    routes:",
            "      - ${16:element}",
            "    secret_key: ${17:string}",
            "    session_token: ${18:string}",
            "    state: ${19|present,absent|}",
            "    subnets:",
            "      - ${20:element}",
            "    validate_certs: ${22|true,false|}",
            "    vpc_id: ${23:string}",
            "$0"
        ],
        "description": "Manage route tables for AWS Virtual Private Clouds",
        "scope": "ansible"
    },
    "Gather information about ec2 VPC route tables in AWS": {
        "prefix": [
            "amazon.aws.ec2_vpc_route_table_info",
            "Gather information about ec2 VPC route tables in AWS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_vpc_route_table_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    secret_key: ${10:string}",
            "    session_token: ${11:string}",
            "    validate_certs: ${12|true,false|}",
            "$0"
        ],
        "description": "Gather information about ec2 VPC route tables in AWS",
        "scope": "ansible"
    },
    "Manage subnets in AWS virtual private clouds": {
        "prefix": [
            "amazon.aws.ec2_vpc_subnet",
            "Manage subnets in AWS virtual private clouds"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_vpc_subnet:",
            "    access_key: ${2:string}",
            "    assign_instances_ipv6: ${3|false,true|}",
            "    aws_ca_bundle: ${4:path}",
            "    az: ${6:string}",
            "    cidr: ${7:string}",
            "    debug_botocore_endpoint_logs: ${8|false,true|}",
            "    endpoint_url: ${9:string}",
            "    ipv6_cidr: ${10:string}",
            "    map_public: ${11|false,true|}",
            "    outpost_arn: ${12:string}",
            "    profile: ${13:string}",
            "    purge_tags: ${14|true,false|}",
            "    region: ${15:string}",
            "    secret_key: ${16:string}",
            "    session_token: ${17:string}",
            "    state: ${18|present,absent|}",
            "    validate_certs: ${20|true,false|}",
            "    vpc_id: ${21:string}",
            "    wait: ${22|true,false|}",
            "    wait_timeout: ${23:300}",
            "$0"
        ],
        "description": "Manage subnets in AWS virtual private clouds",
        "scope": "ansible"
    },
    "Gather information about ec2 VPC subnets in AWS": {
        "prefix": [
            "amazon.aws.ec2_vpc_subnet_info",
            "Gather information about ec2 VPC subnets in AWS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.ec2_vpc_subnet_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    profile: ${8:string}",
            "    region: ${9:string}",
            "    secret_key: ${10:string}",
            "    session_token: ${11:string}",
            "    subnet_ids:",
            "      - ${12:element}",
            "    validate_certs: ${13|true,false|}",
            "$0"
        ],
        "description": "Gather information about ec2 VPC subnets in AWS",
        "scope": "ansible"
    },
    "Manage an Application Load Balancer": {
        "prefix": [
            "amazon.aws.elb_application_lb",
            "Manage an Application Load Balancer"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.elb_application_lb:",
            "    access_key: ${2:string}",
            "    access_logs_enabled: ${3|false,true|}",
            "    access_logs_s3_bucket: ${4:string}",
            "    access_logs_s3_prefix: ${5:string}",
            "    aws_ca_bundle: ${6:path}",
            "    debug_botocore_endpoint_logs: ${8|false,true|}",
            "    deletion_protection: ${9|false,true|}",
            "    endpoint_url: ${10:string}",
            "    http2: ${11|false,true|}",
            "    http_desync_mitigation_mode: ${12:string}",
            "    http_drop_invalid_header_fields: ${13|false,true|}",
            "    http_x_amzn_tls_version_and_cipher_suite: ${14|false,true|}",
            "    http_xff_client_port: ${15|false,true|}",
            "    idle_timeout: ${16:int}",
            "    ip_address_type: ${17:string}",
            "    listeners:",
            "      - ${18:element}",
            "    name: ${19:string}",
            "    profile: ${20:string}",
            "    purge_listeners: ${21|true,false|}",
            "    purge_rules: ${22|true,false|}",
            "    purge_tags: ${23|true,false|}",
            "    region: ${24:string}",
            "    scheme: ${25|internet-facing,internal|}",
            "    secret_key: ${26:string}",
            "    security_groups:",
            "      - ${27:element}",
            "    session_token: ${28:string}",
            "    state: ${29|present,absent|}",
            "    subnets:",
            "      - ${30:element}",
            "    validate_certs: ${32|true,false|}",
            "    waf_fail_open: ${33|false,true|}",
            "    wait: ${34|false,true|}",
            "    wait_timeout: ${35:int}",
            "$0"
        ],
        "description": "Manage an Application Load Balancer",
        "scope": "ansible"
    },
    "Gather information about Application Load Balancers in AWS": {
        "prefix": [
            "amazon.aws.elb_application_lb_info",
            "Gather information about Application Load Balancers in AWS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.elb_application_lb_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    load_balancer_arns:",
            "      - ${7:element}",
            "    names:",
            "      - ${8:element}",
            "    profile: ${9:string}",
            "    region: ${10:string}",
            "    secret_key: ${11:string}",
            "    session_token: ${12:string}",
            "    validate_certs: ${13|true,false|}",
            "$0"
        ],
        "description": "Gather information about Application Load Balancers in AWS",
        "scope": "ansible"
    },
    "Creates, updates or destroys an Amazon ELB": {
        "prefix": [
            "amazon.aws.elb_classic_lb",
            "Creates, updates or destroys an Amazon ELB"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.elb_classic_lb:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${4:path}",
            "    connection_draining_timeout: ${6:int}",
            "    cross_az_load_balancing: ${7|false,true|}",
            "    debug_botocore_endpoint_logs: ${8|false,true|}",
            "    endpoint_url: ${9:string}",
            "    idle_timeout: ${11:int}",
            "    instance_ids:",
            "      - ${12:element}",
            "    listeners:",
            "      - ${13:element}",
            "    name: ${14:string}",
            "    profile: ${15:string}",
            "    purge_instance_ids: ${16|false,true|}",
            "    purge_listeners: ${17|true,false|}",
            "    purge_subnets: ${18|false,true|}",
            "    purge_tags: ${19|true,false|}",
            "    purge_zones: ${20|false,true|}",
            "    region: ${21:string}",
            "    scheme: ${22:string}",
            "    secret_key: ${23:string}",
            "    security_group_ids:",
            "      - ${24:element}",
            "    security_group_names:",
            "      - ${25:element}",
            "    session_token: ${26:string}",
            "    state: ${27:string}",
            "    subnets:",
            "      - ${29:element}",
            "    validate_certs: ${31|true,false|}",
            "    wait: ${32|false,true|}",
            "    wait_timeout: ${33:180}",
            "    zones:",
            "      - ${34:element}",
            "$0"
        ],
        "description": "Creates, updates or destroys an Amazon ELB",
        "scope": "ansible"
    },
    "Manage inline IAM policies for users, groups, and roles": {
        "prefix": [
            "amazon.aws.iam_policy",
            "Manage inline IAM policies for users, groups, and roles"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.iam_policy:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    iam_name: ${7:string}",
            "    iam_type: ${8:string}",
            "    policy_name: ${10:string}",
            "    profile: ${11:string}",
            "    region: ${12:string}",
            "    secret_key: ${13:string}",
            "    session_token: ${14:string}",
            "    skip_duplicates: ${15|false,true|}",
            "    state: ${16|present,absent|}",
            "    validate_certs: ${17|true,false|}",
            "$0"
        ],
        "description": "Manage inline IAM policies for users, groups, and roles",
        "scope": "ansible"
    },
    "Retrieve inline IAM policies for users, groups, and roles": {
        "prefix": [
            "amazon.aws.iam_policy_info",
            "Retrieve inline IAM policies for users, groups, and roles"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.iam_policy_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    iam_name: ${7:string}",
            "    iam_type: ${8:string}",
            "    policy_name: ${9:string}",
            "    profile: ${10:string}",
            "    region: ${11:string}",
            "    secret_key: ${12:string}",
            "    session_token: ${13:string}",
            "    validate_certs: ${14|true,false|}",
            "$0"
        ],
        "description": "Retrieve inline IAM policies for users, groups, and roles",
        "scope": "ansible"
    },
    "Manage AWS IAM users": {
        "prefix": [
            "amazon.aws.iam_user",
            "Manage AWS IAM users"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.iam_user:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    managed_policies:",
            "      - ${7:element}",
            "    name: ${8:string}",
            "    password: ${9:string}",
            "    password_reset_required: ${10|false,true|}",
            "    profile: ${11:string}",
            "    purge_policies: ${12|false,true|}",
            "    purge_tags: ${13|true,false|}",
            "    region: ${14:string}",
            "    remove_password: ${15|false,true|}",
            "    secret_key: ${16:string}",
            "    session_token: ${17:string}",
            "    state: ${18:string}",
            "    update_password: ${20|always,on_create|}",
            "    validate_certs: ${21|true,false|}",
            "    wait: ${22|true,false|}",
            "    wait_timeout: ${23:120}",
            "$0"
        ],
        "description": "Manage AWS IAM users",
        "scope": "ansible"
    },
    "Gather IAM user(s) facts in AWS": {
        "prefix": [
            "amazon.aws.iam_user_info",
            "Gather IAM user(s) facts in AWS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.iam_user_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    group: ${7:string}",
            "    name: ${8:string}",
            "    path: ${9:/}",
            "    profile: ${10:string}",
            "    region: ${11:string}",
            "    secret_key: ${12:string}",
            "    session_token: ${13:string}",
            "    validate_certs: ${14|true,false|}",
            "$0"
        ],
        "description": "Gather IAM user(s) facts in AWS",
        "scope": "ansible"
    },
    "Perform various KMS key management tasks": {
        "prefix": [
            "amazon.aws.kms_key",
            "Perform various KMS key management tasks"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.kms_key:",
            "    access_key: ${2:string}",
            "    alias: ${3:string}",
            "    aws_ca_bundle: ${4:path}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    description: ${7:string}",
            "    enable_key_rotation: ${8|false,true|}",
            "    enabled: ${9|true,false|}",
            "    endpoint_url: ${10:string}",
            "    grants:",
            "      - ${11:element}",
            "    key_id: ${12:string}",
            "    key_spec: ${13|SYMMETRIC_DEFAULT,RSA_2048,RSA_3072,RSA_4096,ECC_NIST_P256,ECC_NIST_P384,ECC_NIST_P521,ECC_SECG_P256K1|}",
            "    key_usage: ${14|ENCRYPT_DECRYPT,SIGN_VERIFY|}",
            "    pending_window: ${15:int}",
            "    profile: ${17:string}",
            "    purge_grants: ${18|false,true|}",
            "    purge_tags: ${19|true,false|}",
            "    region: ${20:string}",
            "    secret_key: ${21:string}",
            "    session_token: ${22:string}",
            "    state: ${23|present,absent|}",
            "    validate_certs: ${25|true,false|}",
            "$0"
        ],
        "description": "Perform various KMS key management tasks",
        "scope": "ansible"
    },
    "Gather information about AWS KMS keys": {
        "prefix": [
            "amazon.aws.kms_key_info",
            "Gather information about AWS KMS keys"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.kms_key_info:",
            "    access_key: ${2:string}",
            "    alias: ${3:string}",
            "    aws_ca_bundle: ${4:path}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    key_id: ${9:string}",
            "    pending_deletion: ${10|false,true|}",
            "    profile: ${11:string}",
            "    region: ${12:string}",
            "    secret_key: ${13:string}",
            "    session_token: ${14:string}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "Gather information about AWS KMS keys",
        "scope": "ansible"
    },
    "Manage AWS Lambda functions": {
        "prefix": [
            "amazon.aws.lambda",
            "Manage AWS Lambda functions"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.lambda:",
            "    access_key: ${2:string}",
            "    architecture: ${3:string}",
            "    aws_ca_bundle: ${4:path}",
            "    dead_letter_arn: ${6:string}",
            "    debug_botocore_endpoint_logs: ${7|false,true|}",
            "    description: ${8:string}",
            "    endpoint_url: ${9:string}",
            "    handler: ${11:string}",
            "    kms_key_arn: ${12:string}",
            "    memory_size: ${13:128}",
            "    name: ${14:string}",
            "    profile: ${15:string}",
            "    purge_tags: ${16|true,false|}",
            "    region: ${17:string}",
            "    role: ${18:string}",
            "    runtime: ${19:string}",
            "    s3_bucket: ${20:string}",
            "    s3_key: ${21:string}",
            "    s3_object_version: ${22:string}",
            "    secret_key: ${23:string}",
            "    session_token: ${24:string}",
            "    state: ${25|present,absent|}",
            "    timeout: ${27:3}",
            "    tracing_mode: ${28:string}",
            "    validate_certs: ${29|true,false|}",
            "    vpc_security_group_ids:",
            "      - ${30:element}",
            "    vpc_subnet_ids:",
            "      - ${31:element}",
            "    zip_file: ${32:string}",
            "$0"
        ],
        "description": "Manage AWS Lambda functions",
        "scope": "ansible"
    },
    "Creates, updates or deletes AWS Lambda function aliases": {
        "prefix": [
            "amazon.aws.lambda_alias",
            "Creates, updates or deletes AWS Lambda function aliases"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.lambda_alias:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    description: ${6:string}",
            "    endpoint_url: ${7:string}",
            "    function_name: ${8:string}",
            "    function_version: ${9:int}",
            "    name: ${10:string}",
            "    profile: ${11:string}",
            "    region: ${12:string}",
            "    secret_key: ${13:string}",
            "    session_token: ${14:string}",
            "    state: ${15|present,absent|}",
            "    validate_certs: ${16|true,false|}",
            "$0"
        ],
        "description": "Creates, updates or deletes AWS Lambda function aliases",
        "scope": "ansible"
    },
    "Creates, updates or deletes AWS Lambda function event mappings": {
        "prefix": [
            "amazon.aws.lambda_event",
            "Creates, updates or deletes AWS Lambda function event mappings"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.lambda_event:",
            "    access_key: ${2:string}",
            "    alias: ${3:string}",
            "    aws_ca_bundle: ${4:path}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    event_source: ${8|stream,sqs|}",
            "    lambda_function_arn: ${9:string}",
            "    profile: ${10:string}",
            "    region: ${11:string}",
            "    secret_key: ${12:string}",
            "    session_token: ${13:string}",
            "    state: ${15|present,absent|}",
            "    validate_certs: ${16|true,false|}",
            "    version: ${17:int}",
            "$0"
        ],
        "description": "Creates, updates or deletes AWS Lambda function event mappings",
        "scope": "ansible"
    },
    "Execute an AWS Lambda function": {
        "prefix": [
            "amazon.aws.lambda_execute",
            "Execute an AWS Lambda function"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.lambda_execute:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    dry_run: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    function_arn: ${8:string}",
            "    name: ${9:string}",
            "    profile: ${11:string}",
            "    region: ${12:string}",
            "    secret_key: ${13:string}",
            "    session_token: ${14:string}",
            "    tail_log: ${15|false,true|}",
            "    validate_certs: ${16|true,false|}",
            "    version_qualifier: ${17:string}",
            "    wait: ${18|true,false|}",
            "$0"
        ],
        "description": "Execute an AWS Lambda function",
        "scope": "ansible"
    },
    "Gathers AWS Lambda function details": {
        "prefix": [
            "amazon.aws.lambda_info",
            "Gathers AWS Lambda function details"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.lambda_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    event_source_arn: ${7:string}",
            "    function_name: ${8:string}",
            "    profile: ${9:string}",
            "    query: ${10:string}",
            "    region: ${11:string}",
            "    secret_key: ${12:string}",
            "    session_token: ${13:string}",
            "    validate_certs: ${14|true,false|}",
            "$0"
        ],
        "description": "Gathers AWS Lambda function details",
        "scope": "ansible"
    },
    "Creates, updates or deletes AWS Lambda policy statements.": {
        "prefix": [
            "amazon.aws.lambda_policy",
            "Creates, updates or deletes AWS Lambda policy statements."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.lambda_policy:",
            "    access_key: ${2:string}",
            "    action: ${3:string}",
            "    alias: ${4:string}",
            "    aws_ca_bundle: ${5:path}",
            "    debug_botocore_endpoint_logs: ${7|false,true|}",
            "    endpoint_url: ${8:string}",
            "    event_source_token: ${9:string}",
            "    function_name: ${10:string}",
            "    principal: ${11:string}",
            "    profile: ${12:string}",
            "    region: ${13:string}",
            "    secret_key: ${14:string}",
            "    session_token: ${15:string}",
            "    source_account: ${16:string}",
            "    source_arn: ${17:string}",
            "    state: ${18|present,absent|}",
            "    statement_id: ${19:string}",
            "    validate_certs: ${20|true,false|}",
            "    version: ${21:int}",
            "$0"
        ],
        "description": "Creates, updates or deletes AWS Lambda policy statements.",
        "scope": "ansible"
    },
    "rds_cluster module": {
        "prefix": [
            "amazon.aws.rds_cluster",
            "rds_cluster module"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.rds_cluster:",
            "    access_key: ${2:string}",
            "    apply_immediately: ${3|false,true|}",
            "    availability_zones:",
            "      - ${4:element}",
            "    aws_ca_bundle: ${5:path}",
            "    backtrack_to: ${7:string}",
            "    backtrack_window: ${8:0}",
            "    backup_retention_period: ${9:1}",
            "    character_set_name: ${10:string}",
            "    copy_tags_to_snapshot: ${11|false,true|}",
            "    creation_source: ${12:string}",
            "    database_name: ${13:string}",
            "    db_cluster_identifier: ${14:string}",
            "    db_cluster_parameter_group_name: ${15:string}",
            "    db_subnet_group_name: ${16:string}",
            "    debug_botocore_endpoint_logs: ${17|false,true|}",
            "    deletion_protection: ${18|false,true|}",
            "    domain: ${19:string}",
            "    domain_iam_role_name: ${20:string}",
            "    enable_cloudwatch_logs_exports:",
            "      - ${21:element}",
            "    enable_global_write_forwarding: ${22|false,true|}",
            "    enable_http_endpoint: ${23|false,true|}",
            "    enable_iam_database_authentication: ${24|false,true|}",
            "    endpoint_url: ${25:string}",
            "    engine: ${26:string}",
            "    engine_version: ${27:string}",
            "    final_snapshot_identifier: ${28:string}",
            "    force_backtrack: ${29|false,true|}",
            "    force_update_password: ${30|false,true|}",
            "    global_cluster_identifier: ${31:string}",
            "    kms_key_id: ${32:string}",
            "    master_user_password: ${33:string}",
            "    master_username: ${34:string}",
            "    new_db_cluster_identifier: ${35:string}",
            "    option_group_name: ${36:string}",
            "    port: ${37:int}",
            "    preferred_backup_window: ${38:string}",
            "    preferred_maintenance_window: ${39:string}",
            "    profile: ${40:string}",
            "    promote: ${41|false,true|}",
            "    purge_cloudwatch_logs_exports: ${42|true,false|}",
            "    purge_security_groups: ${43|true,false|}",
            "    purge_tags: ${44|true,false|}",
            "    region: ${45:string}",
            "    replication_source_identifier: ${46:string}",
            "    restore_to_time: ${47:string}",
            "    restore_type: ${48:string}",
            "    role_arn: ${49:string}",
            "    s3_bucket_name: ${50:string}",
            "    s3_ingestion_role_arn: ${51:string}",
            "    s3_prefix: ${52:string}",
            "    secret_key: ${53:string}",
            "    session_token: ${54:string}",
            "    skip_final_snapshot: ${55|false,true|}",
            "    snapshot_identifier: ${56:string}",
            "    source_db_cluster_identifier: ${57:string}",
            "    source_engine: ${58:string}",
            "    source_engine_version: ${59:string}",
            "    source_region: ${60:string}",
            "    state: ${61|present,absent|}",
            "    storage_encrypted: ${62|false,true|}",
            "    use_earliest_time_on_point_in_time_unavailable: ${64|false,true|}",
            "    use_latest_restorable_time: ${65|false,true|}",
            "    validate_certs: ${66|true,false|}",
            "    vpc_security_group_ids:",
            "      - ${67:element}",
            "    wait: ${68|true,false|}",
            "$0"
        ],
        "description": "rds_cluster module",
        "scope": "ansible"
    },
    "Obtain information about one or more RDS clusters": {
        "prefix": [
            "amazon.aws.rds_cluster_info",
            "Obtain information about one or more RDS clusters"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.rds_cluster_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    db_cluster_identifier: ${5:string}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    profile: ${9:string}",
            "    region: ${10:string}",
            "    secret_key: ${11:string}",
            "    session_token: ${12:string}",
            "    validate_certs: ${13|true,false|}",
            "$0"
        ],
        "description": "Obtain information about one or more RDS clusters",
        "scope": "ansible"
    },
    "Manage Amazon RDS snapshots of DB clusters": {
        "prefix": [
            "amazon.aws.rds_cluster_snapshot",
            "Manage Amazon RDS snapshots of DB clusters"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.rds_cluster_snapshot:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    copy_tags: ${5|false,true|}",
            "    db_cluster_identifier: ${6:string}",
            "    db_cluster_snapshot_identifier: ${7:string}",
            "    debug_botocore_endpoint_logs: ${8|false,true|}",
            "    endpoint_url: ${9:string}",
            "    profile: ${10:string}",
            "    purge_tags: ${11|true,false|}",
            "    region: ${12:string}",
            "    secret_key: ${13:string}",
            "    session_token: ${14:string}",
            "    source_db_cluster_snapshot_identifier: ${15:string}",
            "    source_region: ${16:string}",
            "    state: ${17|present,absent|}",
            "    validate_certs: ${19|true,false|}",
            "    wait: ${20|false,true|}",
            "    wait_timeout: ${21:300}",
            "$0"
        ],
        "description": "Manage Amazon RDS snapshots of DB clusters",
        "scope": "ansible"
    },
    "Manage RDS instances": {
        "prefix": [
            "amazon.aws.rds_instance",
            "Manage RDS instances"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.rds_instance:",
            "    access_key: ${2:string}",
            "    allocated_storage: ${3:int}",
            "    allow_major_version_upgrade: ${4|false,true|}",
            "    apply_immediately: ${5|false,true|}",
            "    auto_minor_version_upgrade: ${6|false,true|}",
            "    availability_zone: ${7:string}",
            "    aws_ca_bundle: ${8:path}",
            "    backup_retention_period: ${10:int}",
            "    ca_certificate_identifier: ${11:string}",
            "    character_set_name: ${12:string}",
            "    copy_tags_to_snapshot: ${13|false,true|}",
            "    creation_source: ${14:string}",
            "    db_cluster_identifier: ${15:string}",
            "    db_instance_class: ${16:string}",
            "    db_instance_identifier: ${17:string}",
            "    db_name: ${18:string}",
            "    db_parameter_group_name: ${19:string}",
            "    db_security_groups:",
            "      - ${20:element}",
            "    db_snapshot_identifier: ${21:string}",
            "    db_subnet_group_name: ${22:string}",
            "    debug_botocore_endpoint_logs: ${23|false,true|}",
            "    deletion_protection: ${24|false,true|}",
            "    domain: ${25:string}",
            "    domain_iam_role_name: ${26:string}",
            "    enable_cloudwatch_logs_exports:",
            "      - ${27:element}",
            "    enable_iam_database_authentication: ${28|false,true|}",
            "    enable_performance_insights: ${29|false,true|}",
            "    endpoint_url: ${30:string}",
            "    engine: ${31:string}",
            "    engine_version: ${32:string}",
            "    final_db_snapshot_identifier: ${33:string}",
            "    force_failover: ${34|false,true|}",
            "    force_update_password: ${35|false,true|}",
            "    iam_roles:",
            "      - ${36:element}",
            "    iops: ${37:int}",
            "    kms_key_id: ${38:string}",
            "    license_model: ${39:string}",
            "    master_user_password: ${40:string}",
            "    master_username: ${41:string}",
            "    max_allocated_storage: ${42:int}",
            "    monitoring_interval: ${43:int}",
            "    monitoring_role_arn: ${44:string}",
            "    multi_az: ${45|false,true|}",
            "    new_db_instance_identifier: ${46:string}",
            "    option_group_name: ${47:string}",
            "    performance_insights_kms_key_id: ${48:string}",
            "    performance_insights_retention_period: ${49:int}",
            "    port: ${50:int}",
            "    preferred_backup_window: ${51:string}",
            "    preferred_maintenance_window: ${52:string}",
            "    profile: ${54:string}",
            "    promotion_tier: ${55:string}",
            "    publicly_accessible: ${56|false,true|}",
            "    purge_cloudwatch_logs_exports: ${57|true,false|}",
            "    purge_iam_roles: ${58|false,true|}",
            "    purge_security_groups: ${59|true,false|}",
            "    purge_tags: ${60|true,false|}",
            "    read_replica: ${61|false,true|}",
            "    region: ${62:string}",
            "    restore_time: ${63:string}",
            "    s3_bucket_name: ${64:string}",
            "    s3_ingestion_role_arn: ${65:string}",
            "    s3_prefix: ${66:string}",
            "    secret_key: ${67:string}",
            "    session_token: ${68:string}",
            "    skip_final_snapshot: ${69|false,true|}",
            "    source_db_instance_identifier: ${70:string}",
            "    source_engine: ${71:string}",
            "    source_engine_version: ${72:string}",
            "    source_region: ${73:string}",
            "    state: ${74|present,absent,terminated,running,started,stopped,rebooted,restarted|}",
            "    storage_encrypted: ${75|false,true|}",
            "    storage_throughput: ${76:int}",
            "    storage_type: ${77:string}",
            "    tde_credential_arn: ${79:string}",
            "    tde_credential_password: ${80:string}",
            "    timezone: ${81:string}",
            "    use_latest_restorable_time: ${82|false,true|}",
            "    validate_certs: ${83|true,false|}",
            "    vpc_security_group_ids:",
            "      - ${84:element}",
            "    wait: ${85|true,false|}",
            "$0"
        ],
        "description": "Manage RDS instances",
        "scope": "ansible"
    },
    "obtain information about one or more RDS instances": {
        "prefix": [
            "amazon.aws.rds_instance_info",
            "obtain information about one or more RDS instances"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.rds_instance_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    db_instance_identifier: ${5:string}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    profile: ${9:string}",
            "    region: ${10:string}",
            "    secret_key: ${11:string}",
            "    session_token: ${12:string}",
            "    validate_certs: ${13|true,false|}",
            "$0"
        ],
        "description": "obtain information about one or more RDS instances",
        "scope": "ansible"
    },
    "Manage Amazon RDS instance snapshots": {
        "prefix": [
            "amazon.aws.rds_instance_snapshot",
            "Manage Amazon RDS instance snapshots"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.rds_instance_snapshot:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    copy_tags: ${5|false,true|}",
            "    db_instance_identifier: ${6:string}",
            "    db_snapshot_identifier: ${7:string}",
            "    debug_botocore_endpoint_logs: ${8|false,true|}",
            "    endpoint_url: ${9:string}",
            "    profile: ${10:string}",
            "    purge_tags: ${11|true,false|}",
            "    region: ${12:string}",
            "    secret_key: ${13:string}",
            "    session_token: ${14:string}",
            "    source_db_snapshot_identifier: ${15:string}",
            "    source_region: ${16:string}",
            "    state: ${17|present,absent|}",
            "    validate_certs: ${19|true,false|}",
            "    wait: ${20|false,true|}",
            "    wait_timeout: ${21:300}",
            "$0"
        ],
        "description": "Manage Amazon RDS instance snapshots",
        "scope": "ansible"
    },
    "Manages the creation, modification, deletion of RDS option groups": {
        "prefix": [
            "amazon.aws.rds_option_group",
            "Manages the creation, modification, deletion of RDS option groups"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.rds_option_group:",
            "    access_key: ${2:string}",
            "    apply_immediately: ${3|false,true|}",
            "    aws_ca_bundle: ${4:path}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    engine_name: ${8:string}",
            "    major_engine_version: ${9:string}",
            "    option_group_description: ${10:string}",
            "    option_group_name: ${11:string}",
            "    options:",
            "      - ${12:element}",
            "    profile: ${13:string}",
            "    purge_tags: ${14|true,false|}",
            "    region: ${15:string}",
            "    secret_key: ${16:string}",
            "    session_token: ${17:string}",
            "    state: ${18:string}",
            "    validate_certs: ${20|true,false|}",
            "    wait: ${21|true,false|}",
            "$0"
        ],
        "description": "Manages the creation, modification, deletion of RDS option groups",
        "scope": "ansible"
    },
    "rds_option_group_info module": {
        "prefix": [
            "amazon.aws.rds_option_group_info",
            "rds_option_group_info module"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.rds_option_group_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    endpoint_url: ${6:string}",
            "    engine_name: ${7:}",
            "    major_engine_version: ${8:}",
            "    marker: ${9:}",
            "    max_records: ${10:100}",
            "    option_group_name: ${11:}",
            "    profile: ${12:string}",
            "    region: ${13:string}",
            "    secret_key: ${14:string}",
            "    session_token: ${15:string}",
            "    validate_certs: ${16|true,false|}",
            "$0"
        ],
        "description": "rds_option_group_info module",
        "scope": "ansible"
    },
    "manage RDS parameter groups": {
        "prefix": [
            "amazon.aws.rds_param_group",
            "manage RDS parameter groups"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.rds_param_group:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    description: ${6:string}",
            "    endpoint_url: ${7:string}",
            "    engine: ${8:string}",
            "    immediate: ${9|false,true|}",
            "    name: ${10:string}",
            "    profile: ${12:string}",
            "    purge_tags: ${13|true,false|}",
            "    region: ${14:string}",
            "    secret_key: ${15:string}",
            "    session_token: ${16:string}",
            "    state: ${17:string}",
            "    validate_certs: ${19|true,false|}",
            "$0"
        ],
        "description": "manage RDS parameter groups",
        "scope": "ansible"
    },
    "obtain information about one or more RDS snapshots": {
        "prefix": [
            "amazon.aws.rds_snapshot_info",
            "obtain information about one or more RDS snapshots"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.rds_snapshot_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    db_cluster_identifier: ${5:string}",
            "    db_cluster_snapshot_identifier: ${6:string}",
            "    db_instance_identifier: ${7:string}",
            "    db_snapshot_identifier: ${8:string}",
            "    debug_botocore_endpoint_logs: ${9|false,true|}",
            "    endpoint_url: ${10:string}",
            "    profile: ${11:string}",
            "    region: ${12:string}",
            "    secret_key: ${13:string}",
            "    session_token: ${14:string}",
            "    snapshot_type: ${15:string}",
            "    validate_certs: ${16|true,false|}",
            "$0"
        ],
        "description": "obtain information about one or more RDS snapshots",
        "scope": "ansible"
    },
    "manage RDS database subnet groups": {
        "prefix": [
            "amazon.aws.rds_subnet_group",
            "manage RDS database subnet groups"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.rds_subnet_group:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    description: ${6:string}",
            "    endpoint_url: ${7:string}",
            "    name: ${8:string}",
            "    profile: ${9:string}",
            "    purge_tags: ${10|true,false|}",
            "    region: ${11:string}",
            "    secret_key: ${12:string}",
            "    session_token: ${13:string}",
            "    state: ${14:string}",
            "    subnets:",
            "      - ${15:element}",
            "    validate_certs: ${17|true,false|}",
            "$0"
        ],
        "description": "manage RDS database subnet groups",
        "scope": "ansible"
    },
    "add or delete entries in Amazons Route 53 DNS service": {
        "prefix": [
            "amazon.aws.route53",
            "add or delete entries in Amazons Route 53 DNS service"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.route53:",
            "    access_key: ${2:string}",
            "    alias: ${3|false,true|}",
            "    alias_evaluate_target_health: ${4|false,true|}",
            "    alias_hosted_zone_id: ${5:string}",
            "    aws_ca_bundle: ${6:path}",
            "    debug_botocore_endpoint_logs: ${8|false,true|}",
            "    endpoint_url: ${9:string}",
            "    failover: ${10:string}",
            "    health_check: ${12:string}",
            "    hosted_zone_id: ${13:string}",
            "    identifier: ${14:string}",
            "    overwrite: ${15|false,true|}",
            "    private_zone: ${16|false,true|}",
            "    profile: ${17:string}",
            "    record: ${18:string}",
            "    region: ${19:string}",
            "    retry_interval: ${20:500}",
            "    secret_key: ${21:string}",
            "    session_token: ${22:string}",
            "    state: ${23:string}",
            "    ttl: ${24:3600}",
            "    type: ${25:string}",
            "    validate_certs: ${26|true,false|}",
            "    value:",
            "      - ${27:element}",
            "    vpc_id: ${28:string}",
            "    wait: ${29|false,true|}",
            "    wait_timeout: ${30:300}",
            "    weight: ${31:int}",
            "    zone: ${32:string}",
            "$0"
        ],
        "description": "add or delete entries in Amazons Route 53 DNS service",
        "scope": "ansible"
    },
    "Manage health-checks in Amazons Route53 DNS service": {
        "prefix": [
            "amazon.aws.route53_health_check",
            "Manage health-checks in Amazons Route53 DNS service"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.route53_health_check:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    debug_botocore_endpoint_logs: ${5|false,true|}",
            "    disabled: ${6|false,true|}",
            "    endpoint_url: ${7:string}",
            "    failure_threshold: ${8:int}",
            "    fqdn: ${9:string}",
            "    health_check_id: ${10:string}",
            "    health_check_name: ${11:string}",
            "    ip_address: ${12:string}",
            "    port: ${13:int}",
            "    profile: ${14:string}",
            "    purge_tags: ${15|true,false|}",
            "    region: ${16:string}",
            "    request_interval: ${17:30}",
            "    resource_path: ${18:string}",
            "    secret_key: ${19:string}",
            "    session_token: ${20:string}",
            "    state: ${21|present,absent|}",
            "    string_match: ${22:string}",
            "    type: ${24:string}",
            "    use_unique_names: ${25|false,true|}",
            "    validate_certs: ${26|true,false|}",
            "$0"
        ],
        "description": "Manage health-checks in Amazons Route53 DNS service",
        "scope": "ansible"
    },
    "Retrieves route53 details using AWS methods": {
        "prefix": [
            "amazon.aws.route53_info",
            "Retrieves route53 details using AWS methods"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.route53_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    change_id: ${5:string}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    delegation_set_id: ${7:string}",
            "    dns_name: ${8:string}",
            "    endpoint_url: ${9:string}",
            "    health_check_id: ${10:string}",
            "    health_check_method: ${11|list,details,status,failure_reason,count,tags|}",
            "    hosted_zone_id: ${12:string}",
            "    hosted_zone_method: ${13|list,details,list_by_name,count,tags|}",
            "    max_items: ${14:int}",
            "    next_marker: ${15:string}",
            "    profile: ${16:string}",
            "    query: ${17:string}",
            "    region: ${18:string}",
            "    resource_id:",
            "      - ${19:element}",
            "    secret_key: ${20:string}",
            "    session_token: ${21:string}",
            "    start_record_name: ${22:string}",
            "    type: ${23:string}",
            "    validate_certs: ${24|true,false|}",
            "$0"
        ],
        "description": "Retrieves route53 details using AWS methods",
        "scope": "ansible"
    },
    "add or delete Route53 zones": {
        "prefix": [
            "amazon.aws.route53_zone",
            "add or delete Route53 zones"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.route53_zone:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    comment: ${5:}",
            "    debug_botocore_endpoint_logs: ${6|false,true|}",
            "    delegation_set_id: ${7:string}",
            "    endpoint_url: ${8:string}",
            "    hosted_zone_id: ${9:string}",
            "    profile: ${10:string}",
            "    purge_tags: ${11|true,false|}",
            "    region: ${12:string}",
            "    secret_key: ${13:string}",
            "    session_token: ${14:string}",
            "    state: ${15|present,absent|}",
            "    validate_certs: ${17|true,false|}",
            "    vpc_id: ${18:string}",
            "    vpc_region: ${19:string}",
            "    zone: ${20:string}",
            "$0"
        ],
        "description": "add or delete Route53 zones",
        "scope": "ansible"
    },
    "Manage S3 buckets in AWS, DigitalOcean, Ceph, Walrus, FakeS3 and StorageGRID": {
        "prefix": [
            "amazon.aws.s3_bucket",
            "Manage S3 buckets in AWS, DigitalOcean, Ceph, Walrus, FakeS3 and StorageGRID"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.s3_bucket:",
            "    access_key: ${2:string}",
            "    acl: ${3:string}",
            "    aws_ca_bundle: ${4:path}",
            "    bucket_key_enabled: ${6|false,true|}",
            "    ceph: ${7|false,true|}",
            "    debug_botocore_endpoint_logs: ${8|false,true|}",
            "    delete_object_ownership: ${9|false,true|}",
            "    delete_public_access: ${10|false,true|}",
            "    encryption: ${11:string}",
            "    encryption_key_id: ${12:string}",
            "    endpoint_url: ${13:string}",
            "    force: ${14|false,true|}",
            "    name: ${15:string}",
            "    object_ownership: ${16:string}",
            "    profile: ${18:string}",
            "    purge_tags: ${20|true,false|}",
            "    region: ${21:string}",
            "    requester_pays: ${22|false,true|}",
            "    secret_key: ${23:string}",
            "    session_token: ${24:string}",
            "    state: ${25|present,absent|}",
            "    validate_bucket_name: ${27|true,false|}",
            "    validate_certs: ${28|true,false|}",
            "    versioning: ${29|false,true|}",
            "$0"
        ],
        "description": "Manage S3 buckets in AWS, DigitalOcean, Ceph, Walrus, FakeS3 and StorageGRID",
        "scope": "ansible"
    },
    "Manage objects in S3": {
        "prefix": [
            "amazon.aws.s3_object",
            "Manage objects in S3"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.s3_object:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    bucket: ${5:string}",
            "    ceph: ${6|false,true|}",
            "    content: ${7:string}",
            "    content_base64: ${8:string}",
            "    debug_botocore_endpoint_logs: ${10|false,true|}",
            "    dest: ${11:path}",
            "    dualstack: ${12|false,true|}",
            "    encrypt: ${13|true,false|}",
            "    encryption_kms_key_id: ${14:string}",
            "    encryption_mode: ${15|AES256,aws:kms|}",
            "    endpoint_url: ${16:string}",
            "    expiry: ${17:600}",
            "    ignore_nonexistent_bucket: ${19|false,true|}",
            "    marker: ${20:string}",
            "    max_keys: ${21:1000}",
            "    mode: ${23:string}",
            "    object: ${24:string}",
            "    overwrite: ${25:different}",
            "    permission:",
            "      - ${26:element}",
            "    prefix: ${27:}",
            "    profile: ${28:string}",
            "    purge_tags: ${29|true,false|}",
            "    region: ${30:string}",
            "    retries: ${31:0}",
            "    secret_key: ${32:string}",
            "    session_token: ${33:string}",
            "    sig_v4: ${34|true,false|}",
            "    src: ${35:path}",
            "    validate_bucket_name: ${37|true,false|}",
            "    validate_certs: ${38|true,false|}",
            "    version: ${39:string}",
            "$0"
        ],
        "description": "Manage objects in S3",
        "scope": "ansible"
    },
    "Gather information about objects in S3": {
        "prefix": [
            "amazon.aws.s3_object_info",
            "Gather information about objects in S3"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  amazon.aws.s3_object_info:",
            "    access_key: ${2:string}",
            "    aws_ca_bundle: ${3:path}",
            "    bucket_name: ${5:string}",
            "    ceph: ${6|false,true|}",
            "    debug_botocore_endpoint_logs: ${7|false,true|}",
            "    dualstack: ${8|false,true|}",
            "    endpoint_url: ${9:string}",
            "    object_name: ${11:string}",
            "    profile: ${12:string}",
            "    region: ${13:string}",
            "    secret_key: ${14:string}",
            "    session_token: ${15:string}",
            "    validate_certs: ${16|true,false|}",
            "$0"
        ],
        "description": "Gather information about objects in S3",
        "scope": "ansible"
    }
}