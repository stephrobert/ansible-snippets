{
    "Manage A10 Networks AX/SoftAX/Thunder/vThunder devices' server object.": {
        "prefix": [
            "community.network.a10_server",
            "Manage A10 Networks AX/SoftAX/Thunder/vThunder devices&#39; server object."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.a10_server:",
            "    client_cert: ${2:path}",
            "    client_key: ${3:path}",
            "    force: ${4|false,true|}",
            "    force_basic_auth: ${5|false,true|}",
            "    host: ${6:string}",
            "    http_agent: ${7:ansible-httpget}",
            "    password: ${9:string}",
            "    url: ${15:string}",
            "    url_password: ${16:string}",
            "    url_username: ${17:string}",
            "    use_gssapi: ${18|false,true|}",
            "    use_proxy: ${19|true,false|}",
            "    username: ${20:string}",
            "    validate_certs: ${21|true,false|}",
            "    write_config: ${22|false,true|}",
            "$0"
        ],
        "description": "Manage A10 Networks AX/SoftAX/Thunder/vThunder devices&#39; server object.",
        "scope": "ansible"
    },
    "Manage A10 Networks AX/SoftAX/Thunder/vThunder devices": {
        "prefix": [
            "community.network.a10_server_axapi3",
            "Manage A10 Networks AX/SoftAX/Thunder/vThunder devices"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.a10_server_axapi3:",
            "    client_cert: ${2:path}",
            "    client_key: ${3:path}",
            "    force: ${4|false,true|}",
            "    force_basic_auth: ${5|false,true|}",
            "    host: ${6:string}",
            "    http_agent: ${7:ansible-httpget}",
            "    password: ${9:string}",
            "    url: ${14:string}",
            "    url_password: ${15:string}",
            "    url_username: ${16:string}",
            "    use_gssapi: ${17|false,true|}",
            "    use_proxy: ${18|true,false|}",
            "    username: ${19:string}",
            "    validate_certs: ${20|true,false|}",
            "    write_config: ${21|false,true|}",
            "$0"
        ],
        "description": "Manage A10 Networks AX/SoftAX/Thunder/vThunder devices",
        "scope": "ansible"
    },
    "Manage A10 Networks AX/SoftAX/Thunder/vThunder devices' service groups.": {
        "prefix": [
            "community.network.a10_service_group",
            "Manage A10 Networks AX/SoftAX/Thunder/vThunder devices&#39; service groups."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.a10_service_group:",
            "    client_cert: ${2:path}",
            "    client_key: ${3:path}",
            "    force: ${4|false,true|}",
            "    force_basic_auth: ${5|false,true|}",
            "    host: ${6:string}",
            "    http_agent: ${7:ansible-httpget}",
            "    password: ${9:string}",
            "    url: ${15:string}",
            "    url_password: ${16:string}",
            "    url_username: ${17:string}",
            "    use_gssapi: ${18|false,true|}",
            "    use_proxy: ${19|true,false|}",
            "    username: ${20:string}",
            "    validate_certs: ${21|true,false|}",
            "    write_config: ${22|false,true|}",
            "$0"
        ],
        "description": "Manage A10 Networks AX/SoftAX/Thunder/vThunder devices&#39; service groups.",
        "scope": "ansible"
    },
    "Manage A10 Networks AX/SoftAX/Thunder/vThunder devices' virtual servers.": {
        "prefix": [
            "community.network.a10_virtual_server",
            "Manage A10 Networks AX/SoftAX/Thunder/vThunder devices&#39; virtual servers."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.a10_virtual_server:",
            "    client_cert: ${2:path}",
            "    client_key: ${3:path}",
            "    force: ${4|false,true|}",
            "    force_basic_auth: ${5|false,true|}",
            "    host: ${6:string}",
            "    http_agent: ${7:ansible-httpget}",
            "    password: ${9:string}",
            "    url: ${11:string}",
            "    url_password: ${12:string}",
            "    url_username: ${13:string}",
            "    use_gssapi: ${14|false,true|}",
            "    use_proxy: ${15|true,false|}",
            "    username: ${16:string}",
            "    validate_certs: ${17|true,false|}",
            "    write_config: ${22|false,true|}",
            "$0"
        ],
        "description": "Manage A10 Networks AX/SoftAX/Thunder/vThunder devices&#39; virtual servers.",
        "scope": "ansible"
    },
    "Run commands on remote devices running Cisco WLC": {
        "prefix": [
            "community.network.aireos_command",
            "Run commands on remote devices running Cisco WLC"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.aireos_command:",
            "$0"
        ],
        "description": "Run commands on remote devices running Cisco WLC",
        "scope": "ansible"
    },
    "Manage Cisco WLC configurations": {
        "prefix": [
            "community.network.aireos_config",
            "Manage Cisco WLC configurations"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.aireos_config:",
            "    backup: ${3|true,false|}",
            "    save: ${12|true,false|}",
            "$0"
        ],
        "description": "Manage Cisco WLC configurations",
        "scope": "ansible"
    },
    "Run arbitrary commands on APCON devices": {
        "prefix": [
            "community.network.apconos_command",
            "Run arbitrary commands on APCON devices"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.apconos_command:",
            "    commands:",
            "      - ${2:element}",
            "    interval: ${3:1}",
            "    match: ${4|all,any|}",
            "    retries: ${5:10}",
            "    wait_for:",
            "      - ${6:element}",
            "$0"
        ],
        "description": "Run arbitrary commands on APCON devices",
        "scope": "ansible"
    },
    "Run commands on remote devices running Aruba Mobility Controller": {
        "prefix": [
            "community.network.aruba_command",
            "Run commands on remote devices running Aruba Mobility Controller"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.aruba_command:",
            "$0"
        ],
        "description": "Run commands on remote devices running Aruba Mobility Controller",
        "scope": "ansible"
    },
    "Manage Aruba configuration sections": {
        "prefix": [
            "community.network.aruba_config",
            "Manage Aruba configuration sections"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.aruba_config:",
            "    backup: ${3|true,false|}",
            "    encrypt: ${8|true,false|}",
            "$0"
        ],
        "description": "Manage Aruba configuration sections",
        "scope": "ansible"
    },
    "Module for setup of ActionGroupConfig Avi RESTful Object": {
        "prefix": [
            "community.network.avi_actiongroupconfig",
            "Module for setup of ActionGroupConfig Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_actiongroupconfig:",
            "    api_version: ${4:16.4.4}",
            "    autoscale_trigger_notification: ${5|false,true|}",
            "    avi_disable_session_cache_as_fact: ${9|false,true|}",
            "    controller: ${10:string}",
            "    external_only: ${13|false,true|}",
            "    password: ${16:string}",
            "    tenant: ${20:admin}",
            "    tenant_uuid: ${22:}",
            "    username: ${24:string}",
            "$0"
        ],
        "description": "Module for setup of ActionGroupConfig Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of AlertConfig Avi RESTful Object": {
        "prefix": [
            "community.network.avi_alertconfig",
            "Module for setup of AlertConfig Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_alertconfig:",
            "    api_version: ${5:16.4.4}",
            "    autoscale_alert: ${6|false,true|}",
            "    avi_disable_session_cache_as_fact: ${10|false,true|}",
            "    controller: ${12:string}",
            "    enabled: ${14|false,true|}",
            "    password: ${19:string}",
            "    tenant: ${25:admin}",
            "    tenant_uuid: ${27:}",
            "    username: ${31:string}",
            "$0"
        ],
        "description": "Module for setup of AlertConfig Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of AlertEmailConfig Avi RESTful Object": {
        "prefix": [
            "community.network.avi_alertemailconfig",
            "Module for setup of AlertEmailConfig Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_alertemailconfig:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${9:string}",
            "    password: ${12:string}",
            "    tenant: ${14:admin}",
            "    tenant_uuid: ${16:}",
            "    username: ${19:string}",
            "$0"
        ],
        "description": "Module for setup of AlertEmailConfig Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of AlertScriptConfig Avi RESTful Object": {
        "prefix": [
            "community.network.avi_alertscriptconfig",
            "Module for setup of AlertScriptConfig Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_alertscriptconfig:",
            "    api_version: ${4:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${8|false,true|}",
            "    controller: ${9:string}",
            "    password: ${11:string}",
            "    tenant: ${13:admin}",
            "    tenant_uuid: ${15:}",
            "    username: ${17:string}",
            "$0"
        ],
        "description": "Module for setup of AlertScriptConfig Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of AlertSyslogConfig Avi RESTful Object": {
        "prefix": [
            "community.network.avi_alertsyslogconfig",
            "Module for setup of AlertSyslogConfig Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_alertsyslogconfig:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${8:string}",
            "    password: ${11:string}",
            "    tenant: ${14:admin}",
            "    tenant_uuid: ${16:}",
            "    username: ${18:string}",
            "$0"
        ],
        "description": "Module for setup of AlertSyslogConfig Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of AnalyticsProfile Avi RESTful Object": {
        "prefix": [
            "community.network.avi_analyticsprofile",
            "Module for setup of AnalyticsProfile Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_analyticsprofile:",
            "    api_version: ${13:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${17|false,true|}",
            "    controller: ${28:string}",
            "    disable_ondemand_metrics: ${30|false,true|}",
            "    disable_se_analytics: ${31|false,true|}",
            "    disable_server_analytics: ${32|false,true|}",
            "    disable_vs_analytics: ${33|false,true|}",
            "    enable_advanced_analytics: ${34|false,true|}",
            "    exclude_client_close_before_request_as_error: ${35|false,true|}",
            "    exclude_dns_policy_drop_as_significant: ${36|false,true|}",
            "    exclude_gs_down_as_error: ${37|false,true|}",
            "    exclude_invalid_dns_domain_as_error: ${39|false,true|}",
            "    exclude_invalid_dns_query_as_error: ${40|false,true|}",
            "    exclude_no_dns_record_as_error: ${41|false,true|}",
            "    exclude_no_valid_gs_member_as_error: ${42|false,true|}",
            "    exclude_persistence_change_as_error: ${43|false,true|}",
            "    exclude_server_dns_error_as_error: ${44|false,true|}",
            "    exclude_server_tcp_reset_as_error: ${45|false,true|}",
            "    exclude_syn_retransmit_as_error: ${47|false,true|}",
            "    exclude_tcp_reset_as_error: ${48|false,true|}",
            "    exclude_unsupported_dns_query_as_error: ${49|false,true|}",
            "    password: ${79:string}",
            "    tenant: ${85:admin}",
            "    tenant_uuid: ${87:}",
            "    username: ${89:string}",
            "$0"
        ],
        "description": "Module for setup of AnalyticsProfile Avi RESTful Object",
        "scope": "ansible"
    },
    "Avi API Module": {
        "prefix": [
            "community.network.avi_gslbservice_patch_member",
            "Avi API Module"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_gslbservice_patch_member:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${5|false,true|}",
            "    controller: ${6:string}",
            "    password: ${10:string}",
            "    tenant: ${12:admin}",
            "    tenant_uuid: ${13:}",
            "    username: ${14:string}",
            "$0"
        ],
        "description": "Avi API Module",
        "scope": "ansible"
    },
    "Avi API Version Module": {
        "prefix": [
            "community.network.avi_api_version",
            "Avi API Version Module"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_api_version:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${5|false,true|}",
            "    controller: ${6:string}",
            "    password: ${7:string}",
            "    tenant: ${8:admin}",
            "    tenant_uuid: ${9:}",
            "    username: ${10:string}",
            "$0"
        ],
        "description": "Avi API Version Module",
        "scope": "ansible"
    },
    "Module for setup of ApplicationPersistenceProfile Avi RESTful Object": {
        "prefix": [
            "community.network.avi_applicationpersistenceprofile",
            "Module for setup of ApplicationPersistenceProfile Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_applicationpersistenceprofile:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${8|false,true|}",
            "    controller: ${9:string}",
            "    is_federated: ${14|false,true|}",
            "    password: ${16:string}",
            "    tenant: ${20:admin}",
            "    tenant_uuid: ${22:}",
            "    username: ${24:string}",
            "$0"
        ],
        "description": "Module for setup of ApplicationPersistenceProfile Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of ApplicationProfile Avi RESTful Object": {
        "prefix": [
            "community.network.avi_applicationprofile",
            "Module for setup of ApplicationProfile Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_applicationprofile:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${9:string}",
            "    password: ${16:string}",
            "    preserve_client_ip: ${17|false,true|}",
            "    preserve_client_port: ${18|false,true|}",
            "    tenant: ${22:admin}",
            "    tenant_uuid: ${24:}",
            "    username: ${27:string}",
            "$0"
        ],
        "description": "Module for setup of ApplicationProfile Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of AuthProfile Avi RESTful Object": {
        "prefix": [
            "community.network.avi_authprofile",
            "Module for setup of AuthProfile Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_authprofile:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${8:string}",
            "    password: ${14:string}",
            "    tenant: ${18:admin}",
            "    tenant_uuid: ${20:}",
            "    username: ${23:string}",
            "$0"
        ],
        "description": "Module for setup of AuthProfile Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of AutoScaleLaunchConfig Avi RESTful Object": {
        "prefix": [
            "community.network.avi_autoscalelaunchconfig",
            "Module for setup of AutoScaleLaunchConfig Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_autoscalelaunchconfig:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${8:string}",
            "    password: ${14:string}",
            "    tenant: ${16:admin}",
            "    tenant_uuid: ${18:}",
            "    use_external_asg: ${20|false,true|}",
            "    username: ${21:string}",
            "$0"
        ],
        "description": "Module for setup of AutoScaleLaunchConfig Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of Backup Avi RESTful Object": {
        "prefix": [
            "community.network.avi_backup",
            "Module for setup of Backup Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_backup:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${9:string}",
            "    password: ${12:string}",
            "    tenant: ${16:admin}",
            "    tenant_uuid: ${18:}",
            "    username: ${21:string}",
            "$0"
        ],
        "description": "Module for setup of Backup Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of BackupConfiguration Avi RESTful Object": {
        "prefix": [
            "community.network.avi_backupconfiguration",
            "Module for setup of BackupConfiguration Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_backupconfiguration:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${13:string}",
            "    password: ${16:string}",
            "    save_local: ${19|false,true|}",
            "    tenant: ${22:admin}",
            "    tenant_uuid: ${24:}",
            "    upload_to_remote_host: ${25|false,true|}",
            "    upload_to_s3: ${26|false,true|}",
            "    username: ${28:string}",
            "$0"
        ],
        "description": "Module for setup of BackupConfiguration Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of CertificateManagementProfile Avi RESTful Object": {
        "prefix": [
            "community.network.avi_certificatemanagementprofile",
            "Module for setup of CertificateManagementProfile Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_certificatemanagementprofile:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${8:string}",
            "    password: ${10:string}",
            "    tenant: ${14:admin}",
            "    tenant_uuid: ${16:}",
            "    username: ${18:string}",
            "$0"
        ],
        "description": "Module for setup of CertificateManagementProfile Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of Cloud Avi RESTful Object": {
        "prefix": [
            "community.network.avi_cloud",
            "Module for setup of Cloud Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_cloud:",
            "    api_version: ${3:16.4.4}",
            "    apic_mode: ${5|false,true|}",
            "    avi_disable_session_cache_as_fact: ${10|false,true|}",
            "    controller: ${14:string}",
            "    dhcp_enabled: ${16|false,true|}",
            "    enable_vip_static_routes: ${21|false,true|}",
            "    ip6_autocfg_enabled: ${23|false,true|}",
            "    password: ${35:string}",
            "    prefer_static_routes: ${36|false,true|}",
            "    state_based_dns_registration: ${40|false,true|}",
            "    tenant: ${41:admin}",
            "    tenant_uuid: ${43:}",
            "    username: ${45:string}",
            "$0"
        ],
        "description": "Module for setup of Cloud Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of CloudConnectorUser Avi RESTful Object": {
        "prefix": [
            "community.network.avi_cloudconnectoruser",
            "Module for setup of CloudConnectorUser Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_cloudconnectoruser:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${10:string}",
            "    password: ${14:string}",
            "    tenant: ${18:admin}",
            "    tenant_uuid: ${20:}",
            "    username: ${23:string}",
            "$0"
        ],
        "description": "Module for setup of CloudConnectorUser Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of CloudProperties Avi RESTful Object": {
        "prefix": [
            "community.network.avi_cloudproperties",
            "Module for setup of CloudProperties Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_cloudproperties:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${10:string}",
            "    password: ${13:string}",
            "    tenant: ${15:admin}",
            "    tenant_uuid: ${16:}",
            "    username: ${18:string}",
            "$0"
        ],
        "description": "Module for setup of CloudProperties Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of Cluster Avi RESTful Object": {
        "prefix": [
            "community.network.avi_cluster",
            "Module for setup of Cluster Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_cluster:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${8:string}",
            "    password: ${11:string}",
            "    rejoin_nodes_automatically: ${12|false,true|}",
            "    tenant: ${14:admin}",
            "    tenant_uuid: ${16:}",
            "    username: ${18:string}",
            "$0"
        ],
        "description": "Module for setup of Cluster Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of ClusterCloudDetails Avi RESTful Object": {
        "prefix": [
            "community.network.avi_clusterclouddetails",
            "Module for setup of ClusterCloudDetails Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_clusterclouddetails:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${9:string}",
            "    password: ${11:string}",
            "    tenant: ${13:admin}",
            "    tenant_uuid: ${15:}",
            "    username: ${17:string}",
            "$0"
        ],
        "description": "Module for setup of ClusterCloudDetails Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of ControllerProperties Avi RESTful Object": {
        "prefix": [
            "community.network.avi_controllerproperties",
            "Module for setup of ControllerProperties Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_controllerproperties:",
            "    allow_ip_forwarding: ${2|false,true|}",
            "    allow_unauthenticated_apis: ${3|false,true|}",
            "    allow_unauthenticated_nodes: ${4|false,true|}",
            "    api_version: ${8:16.4.4}",
            "    appviewx_compat_mode: ${9|false,true|}",
            "    avi_disable_session_cache_as_fact: ${15|false,true|}",
            "    bm_use_ansible: ${16|false,true|}",
            "    cloud_reconcile: ${19|false,true|}",
            "    controller: ${22:string}",
            "    enable_api_sharding: ${27|false,true|}",
            "    enable_memory_balancer: ${28|false,true|}",
            "    password: ${34:string}",
            "    tenant: ${53:admin}",
            "    tenant_uuid: ${54:}",
            "    username: ${59:string}",
            "$0"
        ],
        "description": "Module for setup of ControllerProperties Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of CustomIpamDnsProfile Avi RESTful Object": {
        "prefix": [
            "community.network.avi_customipamdnsprofile",
            "Module for setup of CustomIpamDnsProfile Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_customipamdnsprofile:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${8:string}",
            "    password: ${10:string}",
            "    tenant: ${14:admin}",
            "    tenant_uuid: ${16:}",
            "    username: ${18:string}",
            "$0"
        ],
        "description": "Module for setup of CustomIpamDnsProfile Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of DnsPolicy Avi RESTful Object": {
        "prefix": [
            "community.network.avi_dnspolicy",
            "Module for setup of DnsPolicy Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_dnspolicy:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${8:string}",
            "    password: ${12:string}",
            "    tenant: ${15:admin}",
            "    tenant_uuid: ${17:}",
            "    username: ${19:string}",
            "$0"
        ],
        "description": "Module for setup of DnsPolicy Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of ErrorPageBody Avi RESTful Object": {
        "prefix": [
            "community.network.avi_errorpagebody",
            "Module for setup of ErrorPageBody Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_errorpagebody:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${8:string}",
            "    password: ${12:string}",
            "    tenant: ${14:admin}",
            "    tenant_uuid: ${16:}",
            "    username: ${18:string}",
            "$0"
        ],
        "description": "Module for setup of ErrorPageBody Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of ErrorPageProfile Avi RESTful Object": {
        "prefix": [
            "community.network.avi_errorpageprofile",
            "Module for setup of ErrorPageProfile Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_errorpageprofile:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${8|false,true|}",
            "    controller: ${10:string}",
            "    password: ${14:string}",
            "    tenant: ${16:admin}",
            "    tenant_uuid: ${18:}",
            "    username: ${20:string}",
            "$0"
        ],
        "description": "Module for setup of ErrorPageProfile Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of Gslb Avi RESTful Object": {
        "prefix": [
            "community.network.avi_gslb",
            "Module for setup of Gslb Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_gslb:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${8|false,true|}",
            "    controller: ${11:string}",
            "    is_federated: ${14|false,true|}",
            "    maintenance_mode: ${16|false,true|}",
            "    password: ${18:string}",
            "    tenant: ${23:admin}",
            "    tenant_uuid: ${25:}",
            "    username: ${28:string}",
            "$0"
        ],
        "description": "Module for setup of Gslb Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of GslbGeoDbProfile Avi RESTful Object": {
        "prefix": [
            "community.network.avi_gslbgeodbprofile",
            "Module for setup of GslbGeoDbProfile Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_gslbgeodbprofile:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${8:string}",
            "    is_federated: ${11|false,true|}",
            "    password: ${13:string}",
            "    tenant: ${15:admin}",
            "    tenant_uuid: ${17:}",
            "    username: ${19:string}",
            "$0"
        ],
        "description": "Module for setup of GslbGeoDbProfile Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of GslbService Avi RESTful Object": {
        "prefix": [
            "community.network.avi_gslbservice",
            "Module for setup of GslbService Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_gslbservice:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${8|false,true|}",
            "    controller: ${9:string}",
            "    controller_health_status_enabled: ${10|false,true|}",
            "    enabled: ${15|false,true|}",
            "    hm_off: ${19|false,true|}",
            "    is_federated: ${20|false,true|}",
            "    password: ${24:string}",
            "    site_persistence_enabled: ${26|false,true|}",
            "    tenant: ${28:admin}",
            "    tenant_uuid: ${30:}",
            "    use_edns_client_subnet: ${33|false,true|}",
            "    username: ${34:string}",
            "    wildcard_match: ${36|false,true|}",
            "$0"
        ],
        "description": "Module for setup of GslbService Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of HardwareSecurityModuleGroup Avi RESTful Object": {
        "prefix": [
            "community.network.avi_hardwaresecuritymodulegroup",
            "Module for setup of HardwareSecurityModuleGroup Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_hardwaresecuritymodulegroup:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${8:string}",
            "    password: ${11:string}",
            "    tenant: ${13:admin}",
            "    tenant_uuid: ${15:}",
            "    username: ${17:string}",
            "$0"
        ],
        "description": "Module for setup of HardwareSecurityModuleGroup Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of HealthMonitor Avi RESTful Object": {
        "prefix": [
            "community.network.avi_healthmonitor",
            "Module for setup of HealthMonitor Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_healthmonitor:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${8:string}",
            "    is_federated: ${15|false,true|}",
            "    password: ${18:string}",
            "    tenant: ${26:admin}",
            "    tenant_uuid: ${28:}",
            "    username: ${32:string}",
            "$0"
        ],
        "description": "Module for setup of HealthMonitor Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of HTTPPolicySet Avi RESTful Object": {
        "prefix": [
            "community.network.avi_httppolicyset",
            "Module for setup of HTTPPolicySet Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_httppolicyset:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${9:string}",
            "    is_internal_policy: ${15|false,true|}",
            "    password: ${17:string}",
            "    tenant: ${19:admin}",
            "    tenant_uuid: ${21:}",
            "    username: ${23:string}",
            "$0"
        ],
        "description": "Module for setup of HTTPPolicySet Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of IpAddrGroup Avi RESTful Object": {
        "prefix": [
            "community.network.avi_ipaddrgroup",
            "Module for setup of IpAddrGroup Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_ipaddrgroup:",
            "    api_version: ${4:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${9|false,true|}",
            "    controller: ${10:string}",
            "    password: ${17:string}",
            "    tenant: ${21:admin}",
            "    tenant_uuid: ${23:}",
            "    username: ${25:string}",
            "$0"
        ],
        "description": "Module for setup of IpAddrGroup Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of IpamDnsProviderProfile Avi RESTful Object": {
        "prefix": [
            "community.network.avi_ipamdnsproviderprofile",
            "Module for setup of IpamDnsProviderProfile Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_ipamdnsproviderprofile:",
            "    allocate_ip_in_vrf: ${2|false,true|}",
            "    api_version: ${4:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${8|false,true|}",
            "    controller: ${11:string}",
            "    password: ${19:string}",
            "    tenant: ${22:admin}",
            "    tenant_uuid: ${24:}",
            "    username: ${28:string}",
            "$0"
        ],
        "description": "Module for setup of IpamDnsProviderProfile Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of L4PolicySet Avi RESTful Object": {
        "prefix": [
            "community.network.avi_l4policyset",
            "Module for setup of L4PolicySet Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_l4policyset:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${8:string}",
            "    is_internal_policy: ${11|false,true|}",
            "    password: ${14:string}",
            "    tenant: ${16:admin}",
            "    tenant_uuid: ${18:}",
            "    username: ${20:string}",
            "$0"
        ],
        "description": "Module for setup of L4PolicySet Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of MicroServiceGroup Avi RESTful Object": {
        "prefix": [
            "community.network.avi_microservicegroup",
            "Module for setup of MicroServiceGroup Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_microservicegroup:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${8:string}",
            "    password: ${12:string}",
            "    tenant: ${15:admin}",
            "    tenant_uuid: ${17:}",
            "    username: ${19:string}",
            "$0"
        ],
        "description": "Module for setup of MicroServiceGroup Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of Network Avi RESTful Object": {
        "prefix": [
            "community.network.avi_network",
            "Module for setup of Network Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_network:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${10:string}",
            "    dhcp_enabled: ${11|false,true|}",
            "    exclude_discovered_subnets: ${12|false,true|}",
            "    ip6_autocfg_enabled: ${13|false,true|}",
            "    password: ${15:string}",
            "    synced_from_se: ${17|false,true|}",
            "    tenant: ${18:admin}",
            "    tenant_uuid: ${20:}",
            "    username: ${22:string}",
            "    vcenter_dvs: ${24|false,true|}",
            "$0"
        ],
        "description": "Module for setup of Network Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of NetworkProfile Avi RESTful Object": {
        "prefix": [
            "community.network.avi_networkprofile",
            "Module for setup of NetworkProfile Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_networkprofile:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    connection_mirror: ${8|false,true|}",
            "    controller: ${9:string}",
            "    password: ${12:string}",
            "    tenant: ${15:admin}",
            "    tenant_uuid: ${17:}",
            "    username: ${19:string}",
            "$0"
        ],
        "description": "Module for setup of NetworkProfile Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of NetworkSecurityPolicy Avi RESTful Object": {
        "prefix": [
            "community.network.avi_networksecuritypolicy",
            "Module for setup of NetworkSecurityPolicy Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_networksecuritypolicy:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${9:string}",
            "    password: ${13:string}",
            "    tenant: ${16:admin}",
            "    tenant_uuid: ${18:}",
            "    username: ${20:string}",
            "$0"
        ],
        "description": "Module for setup of NetworkSecurityPolicy Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of PKIProfile Avi RESTful Object": {
        "prefix": [
            "community.network.avi_pkiprofile",
            "Module for setup of PKIProfile Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_pkiprofile:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${9:string}",
            "    crl_check: ${11|false,true|}",
            "    ignore_peer_chain: ${13|false,true|}",
            "    is_federated: ${14|false,true|}",
            "    password: ${16:string}",
            "    tenant: ${18:admin}",
            "    tenant_uuid: ${20:}",
            "    username: ${22:string}",
            "    validate_only_leaf_crl: ${24|false,true|}",
            "$0"
        ],
        "description": "Module for setup of PKIProfile Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of Pool Avi RESTful Object": {
        "prefix": [
            "community.network.avi_pool",
            "Module for setup of Pool Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_pool:",
            "    api_version: ${8:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${17|false,true|}",
            "    capacity_estimation: ${18|false,true|}",
            "    controller: ${24:string}",
            "    delete_server_on_dns_refresh: ${27|false,true|}",
            "    east_west: ${30|false,true|}",
            "    enabled: ${31|false,true|}",
            "    gslb_sp_enabled: ${36|false,true|}",
            "    host_check_enabled: ${38|false,true|}",
            "    inline_health_monitor: ${39|false,true|}",
            "    lookup_server_by_name: ${45|false,true|}",
            "    password: ${53:string}",
            "    request_queue_enabled: ${58|false,true|}",
            "    rewrite_host_header_to_server_name: ${59|false,true|}",
            "    rewrite_host_header_to_sni: ${60|false,true|}",
            "    server_auto_scale: ${61|false,true|}",
            "    sni_enabled: ${68|false,true|}",
            "    tenant: ${72:admin}",
            "    tenant_uuid: ${74:}",
            "    use_service_port: ${76|false,true|}",
            "    username: ${77:string}",
            "$0"
        ],
        "description": "Module for setup of Pool Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of PoolGroup Avi RESTful Object": {
        "prefix": [
            "community.network.avi_poolgroup",
            "Module for setup of PoolGroup Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_poolgroup:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${10:string}",
            "    implicit_priority_labels: ${15|false,true|}",
            "    password: ${19:string}",
            "    tenant: ${23:admin}",
            "    tenant_uuid: ${25:}",
            "    username: ${27:string}",
            "$0"
        ],
        "description": "Module for setup of PoolGroup Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of PoolGroupDeploymentPolicy Avi RESTful Object": {
        "prefix": [
            "community.network.avi_poolgroupdeploymentpolicy",
            "Module for setup of PoolGroupDeploymentPolicy Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_poolgroupdeploymentpolicy:",
            "    api_version: ${3:16.4.4}",
            "    auto_disable_old_prod_pools: ${4|false,true|}",
            "    avi_disable_session_cache_as_fact: ${8|false,true|}",
            "    controller: ${9:string}",
            "    password: ${13:string}",
            "    tenant: ${18:admin}",
            "    tenant_uuid: ${20:}",
            "    username: ${23:string}",
            "$0"
        ],
        "description": "Module for setup of PoolGroupDeploymentPolicy Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of PriorityLabels Avi RESTful Object": {
        "prefix": [
            "community.network.avi_prioritylabels",
            "Module for setup of PriorityLabels Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_prioritylabels:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${9:string}",
            "    password: ${13:string}",
            "    tenant: ${15:admin}",
            "    tenant_uuid: ${17:}",
            "    username: ${19:string}",
            "$0"
        ],
        "description": "Module for setup of PriorityLabels Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of Role Avi RESTful Object": {
        "prefix": [
            "community.network.avi_role",
            "Module for setup of Role Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_role:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${8:string}",
            "    password: ${10:string}",
            "    tenant: ${13:admin}",
            "    tenant_uuid: ${15:}",
            "    username: ${17:string}",
            "$0"
        ],
        "description": "Module for setup of Role Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of Scheduler Avi RESTful Object": {
        "prefix": [
            "community.network.avi_scheduler",
            "Module for setup of Scheduler Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_scheduler:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${9:string}",
            "    enabled: ${10|false,true|}",
            "    password: ${15:string}",
            "    tenant: ${21:admin}",
            "    tenant_uuid: ${23:}",
            "    username: ${25:string}",
            "$0"
        ],
        "description": "Module for setup of Scheduler Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of SeProperties Avi RESTful Object": {
        "prefix": [
            "community.network.avi_seproperties",
            "Module for setup of SeProperties Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_seproperties:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${8:string}",
            "    password: ${9:string}",
            "    tenant: ${14:admin}",
            "    tenant_uuid: ${15:}",
            "    username: ${17:string}",
            "$0"
        ],
        "description": "Module for setup of SeProperties Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of ServerAutoScalePolicy Avi RESTful Object": {
        "prefix": [
            "community.network.avi_serverautoscalepolicy",
            "Module for setup of ServerAutoScalePolicy Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_serverautoscalepolicy:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${8:string}",
            "    intelligent_autoscale: ${10|false,true|}",
            "    password: ${18:string}",
            "    tenant: ${24:admin}",
            "    tenant_uuid: ${26:}",
            "    use_predicted_load: ${28|false,true|}",
            "    username: ${29:string}",
            "$0"
        ],
        "description": "Module for setup of ServerAutoScalePolicy Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of ServiceEngine Avi RESTful Object": {
        "prefix": [
            "community.network.avi_serviceengine",
            "Module for setup of ServiceEngine Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_serviceengine:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${8|false,true|}",
            "    container_mode: ${10|false,true|}",
            "    controller: ${12:string}",
            "    controller_created: ${13|false,true|}",
            "    password: ${22:string}",
            "    tenant: ${26:admin}",
            "    tenant_uuid: ${28:}",
            "    username: ${30:string}",
            "$0"
        ],
        "description": "Module for setup of ServiceEngine Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of ServiceEngineGroup Avi RESTful Object": {
        "prefix": [
            "community.network.avi_serviceenginegroup",
            "Module for setup of ServiceEngineGroup Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_serviceenginegroup:",
            "    accelerated_networking: ${2|false,true|}",
            "    active_standby: ${3|false,true|}",
            "    advertise_backend_networks: ${5|false,true|}",
            "    aggressive_failure_detection: ${6|false,true|}",
            "    allow_burst: ${8|false,true|}",
            "    api_version: ${10:16.4.4}",
            "    async_ssl: ${14|false,true|}",
            "    auto_rebalance: ${16|false,true|}",
            "    auto_redistribute_active_standby_load: ${20|false,true|}",
            "    avi_disable_session_cache_as_fact: ${24|false,true|}",
            "    config_debugs_on_all_cores: ${28|false,true|}",
            "    controller: ${30:string}",
            "    cpu_reserve: ${31|false,true|}",
            "    cpu_socket_affinity: ${32|false,true|}",
            "    dedicated_dispatcher_core: ${38|false,true|}",
            "    disable_avi_securitygroups: ${40|false,true|}",
            "    disable_csum_offloads: ${41|false,true|}",
            "    disable_gro: ${42|false,true|}",
            "    disable_se_memory_check: ${43|false,true|}",
            "    disable_tso: ${44|false,true|}",
            "    distribute_load_active_standby: ${46|false,true|}",
            "    distribute_queues: ${47|false,true|}",
            "    enable_hsm_priming: ${48|false,true|}",
            "    enable_multi_lb: ${49|false,true|}",
            "    enable_routing: ${50|false,true|}",
            "    enable_vip_on_all_interfaces: ${51|false,true|}",
            "    enable_vmac: ${52|false,true|}",
            "    hm_on_standby: ${64|false,true|}",
            "    host_gateway_monitor: ${67|false,true|}",
            "    least_load_core_selection: ${74|false,true|}",
            "    mem_reserve: ${85|false,true|}",
            "    password: ${105:string}",
            "    per_app: ${106|false,true|}",
            "    reboot_on_stop: ${109|false,true|}",
            "    se_pcap_lookahead: ${118|false,true|}",
            "    se_routing: ${123|false,true|}",
            "    se_sb_dedicated_core: ${124|false,true|}",
            "    self_se_election: ${134|false,true|}",
            "    ssl_preprocess_sni_hostname: ${139|false,true|}",
            "    tenant: ${141:admin}",
            "    tenant_uuid: ${143:}",
            "    use_standard_alb: ${146|false,true|}",
            "    username: ${147:string}",
            "    vcenter_datastores_include: ${152|false,true|}",
            "    vs_host_redundancy: ${157|false,true|}",
            "    vss_placement_enabled: ${165|false,true|}",
            "    waf_mempool: ${168|false,true|}",
            "$0"
        ],
        "description": "Module for setup of ServiceEngineGroup Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of SnmpTrapProfile Avi RESTful Object": {
        "prefix": [
            "community.network.avi_snmptrapprofile",
            "Module for setup of SnmpTrapProfile Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_snmptrapprofile:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${8:string}",
            "    password: ${10:string}",
            "    tenant: ${12:admin}",
            "    tenant_uuid: ${14:}",
            "    username: ${17:string}",
            "$0"
        ],
        "description": "Module for setup of SnmpTrapProfile Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of SSLKeyAndCertificate Avi RESTful Object": {
        "prefix": [
            "community.network.avi_sslkeyandcertificate",
            "Module for setup of SSLKeyAndCertificate Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_sslkeyandcertificate:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    certificate_base64: ${10|false,true|}",
            "    controller: ${12:string}",
            "    key_base64: ${20|false,true|}",
            "    password: ${24:string}",
            "    tenant: ${27:admin}",
            "    tenant_uuid: ${29:}",
            "    username: ${32:string}",
            "$0"
        ],
        "description": "Module for setup of SSLKeyAndCertificate Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of SSLProfile Avi RESTful Object": {
        "prefix": [
            "community.network.avi_sslprofile",
            "Module for setup of SSLProfile Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_sslprofile:",
            "    api_version: ${5:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${9|false,true|}",
            "    controller: ${11:string}",
            "    enable_ssl_session_reuse: ${14|false,true|}",
            "    password: ${16:string}",
            "    prefer_client_cipher_ordering: ${17|false,true|}",
            "    send_close_notify: ${18|false,true|}",
            "    tenant: ${23:admin}",
            "    tenant_uuid: ${25:}",
            "    username: ${28:string}",
            "$0"
        ],
        "description": "Module for setup of SSLProfile Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of StringGroup Avi RESTful Object": {
        "prefix": [
            "community.network.avi_stringgroup",
            "Module for setup of StringGroup Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_stringgroup:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${8:string}",
            "    password: ${12:string}",
            "    tenant: ${14:admin}",
            "    tenant_uuid: ${16:}",
            "    username: ${19:string}",
            "$0"
        ],
        "description": "Module for setup of StringGroup Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of SystemConfiguration Avi RESTful Object": {
        "prefix": [
            "community.network.avi_systemconfiguration",
            "Module for setup of SystemConfiguration Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_systemconfiguration:",
            "    api_version: ${4:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${8|false,true|}",
            "    controller: ${9:string}",
            "    docker_mode: ${13|false,true|}",
            "    password: ${19:string}",
            "    tenant: ${27:admin}",
            "    tenant_uuid: ${28:}",
            "    username: ${30:string}",
            "    welcome_workflow_complete: ${32|false,true|}",
            "$0"
        ],
        "description": "Module for setup of SystemConfiguration Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of Tenant Avi RESTful Object": {
        "prefix": [
            "community.network.avi_tenant",
            "Module for setup of Tenant Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_tenant:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${9:string}",
            "    local: ${12|false,true|}",
            "    password: ${14:string}",
            "    tenant: ${16:admin}",
            "    tenant_uuid: ${17:}",
            "    username: ${19:string}",
            "$0"
        ],
        "description": "Module for setup of Tenant Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of TrafficCloneProfile Avi RESTful Object": {
        "prefix": [
            "community.network.avi_trafficcloneprofile",
            "Module for setup of TrafficCloneProfile Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_trafficcloneprofile:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${10:string}",
            "    password: ${12:string}",
            "    preserve_client_ip: ${13|false,true|}",
            "    tenant: ${15:admin}",
            "    tenant_uuid: ${17:}",
            "    username: ${19:string}",
            "$0"
        ],
        "description": "Module for setup of TrafficCloneProfile Avi RESTful Object",
        "scope": "ansible"
    },
    "Avi User Module": {
        "prefix": [
            "community.network.avi_user",
            "Avi User Module"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_user:",
            "    access:",
            "      - ${2:element}",
            "    api_version: ${4:16.4.4}",
            "    avi_api_patch_op: ${5:string}",
            "    avi_api_update_method: ${6|put,post,patch|}",
            "    avi_disable_session_cache_as_fact: ${8|false,true|}",
            "    controller: ${9:string}",
            "    default_tenant_ref: ${10:/api/tenant?name=admin}",
            "    email: ${11:string}",
            "    is_active: ${12|false,true|}",
            "    is_superuser: ${13|false,true|}",
            "    name: ${14:string}",
            "    obj_password: ${15:string}",
            "    obj_username: ${16:string}",
            "    password: ${17:string}",
            "    state: ${18|present,absent|}",
            "    tenant: ${19:admin}",
            "    tenant_uuid: ${20:}",
            "    user_profile_ref: ${21:string}",
            "    username: ${22:string}",
            "$0"
        ],
        "description": "Avi User Module",
        "scope": "ansible"
    },
    "Avi UserAccount Module": {
        "prefix": [
            "community.network.avi_useraccount",
            "Avi UserAccount Module"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_useraccount:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${5|false,true|}",
            "    controller: ${6:string}",
            "    password: ${9:string}",
            "    tenant: ${10:admin}",
            "    tenant_uuid: ${11:}",
            "    username: ${12:string}",
            "$0"
        ],
        "description": "Avi UserAccount Module",
        "scope": "ansible"
    },
    "Module for setup of UserAccountProfile Avi RESTful Object": {
        "prefix": [
            "community.network.avi_useraccountprofile",
            "Module for setup of UserAccountProfile Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_useraccountprofile:",
            "    api_version: ${4:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${8|false,true|}",
            "    controller: ${9:string}",
            "    password: ${15:string}",
            "    tenant: ${17:admin}",
            "    tenant_uuid: ${18:}",
            "    username: ${20:string}",
            "$0"
        ],
        "description": "Module for setup of UserAccountProfile Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of VirtualService Avi RESTful Object": {
        "prefix": [
            "community.network.avi_virtualservice",
            "Module for setup of VirtualService Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_virtualservice:",
            "    allow_invalid_client_cert: ${3|false,true|}",
            "    api_version: ${7:16.4.4}",
            "    auto_allocate_floating_ip: ${10|false,true|}",
            "    auto_allocate_ip: ${11|false,true|}",
            "    avi_allocated_fip: ${13|false,true|}",
            "    avi_allocated_vip: ${14|false,true|}",
            "    avi_disable_session_cache_as_fact: ${18|false,true|}",
            "    bulk_sync_kvcache: ${20|false,true|}",
            "    close_client_conn_on_config_update: ${22|false,true|}",
            "    controller: ${28:string}",
            "    delay_fairness: ${30|false,true|}",
            "    east_west_placement: ${37|false,true|}",
            "    enable_autogw: ${38|false,true|}",
            "    enable_rhi: ${39|false,true|}",
            "    enable_rhi_snat: ${40|false,true|}",
            "    enabled: ${41|false,true|}",
            "    ign_pool_net_reach: ${50|false,true|}",
            "    limit_doser: ${54|false,true|}",
            "    password: ${63:string}",
            "    remove_listening_port_on_vs_down: ${68|false,true|}",
            "    scaleout_ecmp: ${71|false,true|}",
            "    tenant: ${91:admin}",
            "    tenant_uuid: ${93:}",
            "    traffic_enabled: ${96|false,true|}",
            "    use_bridge_ip_as_vip: ${99|false,true|}",
            "    use_vip_as_snat: ${100|false,true|}",
            "    username: ${101:string}",
            "$0"
        ],
        "description": "Module for setup of VirtualService Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of VrfContext Avi RESTful Object": {
        "prefix": [
            "community.network.avi_vrfcontext",
            "Module for setup of VrfContext Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_vrfcontext:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${10:string}",
            "    password: ${16:string}",
            "    system_default: ${19|false,true|}",
            "    tenant: ${20:admin}",
            "    tenant_uuid: ${22:}",
            "    username: ${24:string}",
            "$0"
        ],
        "description": "Module for setup of VrfContext Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of VSDataScriptSet Avi RESTful Object": {
        "prefix": [
            "community.network.avi_vsdatascriptset",
            "Module for setup of VSDataScriptSet Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_vsdatascriptset:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${8:string}",
            "    password: ${14:string}",
            "    tenant: ${20:admin}",
            "    tenant_uuid: ${22:}",
            "    username: ${24:string}",
            "$0"
        ],
        "description": "Module for setup of VSDataScriptSet Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of VsVip Avi RESTful Object": {
        "prefix": [
            "community.network.avi_vsvip",
            "Module for setup of VsVip Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_vsvip:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${9:string}",
            "    east_west_placement: ${11|false,true|}",
            "    password: ${13:string}",
            "    tenant: ${15:admin}",
            "    tenant_uuid: ${17:}",
            "    use_standard_alb: ${19|false,true|}",
            "    username: ${20:string}",
            "$0"
        ],
        "description": "Module for setup of VsVip Avi RESTful Object",
        "scope": "ansible"
    },
    "Module for setup of Webhook Avi RESTful Object": {
        "prefix": [
            "community.network.avi_webhook",
            "Module for setup of Webhook Avi RESTful Object"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.avi_webhook:",
            "    api_version: ${3:16.4.4}",
            "    avi_disable_session_cache_as_fact: ${7|false,true|}",
            "    controller: ${9:string}",
            "    password: ${12:string}",
            "    tenant: ${14:admin}",
            "    tenant_uuid: ${16:}",
            "    username: ${18:string}",
            "$0"
        ],
        "description": "Module for setup of Webhook Avi RESTful Object",
        "scope": "ansible"
    },
    "Create and remove a bcf switch.": {
        "prefix": [
            "community.network.bcf_switch",
            "Create and remove a bcf switch."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.bcf_switch:",
            "    validate_certs: ${9|true,false|}",
            "$0"
        ],
        "description": "Create and remove a bcf switch.",
        "scope": "ansible"
    },
    "Create and remove a bigmon inline service chain.": {
        "prefix": [
            "community.network.bigmon_chain",
            "Create and remove a bigmon inline service chain."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.bigmon_chain:",
            "    validate_certs: ${6|true,false|}",
            "$0"
        ],
        "description": "Create and remove a bigmon inline service chain.",
        "scope": "ansible"
    },
    "Create and remove a bigmon out-of-band policy.": {
        "prefix": [
            "community.network.bigmon_policy",
            "Create and remove a bigmon out-of-band policy."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.bigmon_policy:",
            "    validate_certs: ${12|true,false|}",
            "$0"
        ],
        "description": "Create and remove a bigmon out-of-band policy.",
        "scope": "ansible"
    },
    "Manages AAA server global configuration on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_aaa_server",
            "Manages AAA server global configuration on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_aaa_server:",
            "    accounting_mode: ${2|none,invalid,hwtacacs,radius|}",
            "    acct_scheme_name: ${3:string}",
            "    authen_scheme_name: ${4:string}",
            "    author_scheme_name: ${5:string}",
            "    domain_name: ${6:string}",
            "    first_authen_mode: ${7|local,invalid,hwtacacs,radius,none|}",
            "    first_author_mode: ${8|local,invalid,hwtacacs,if-authenticated,none|}",
            "    hwtacas_template: ${9:string}",
            "    local_user_group: ${10:string}",
            "    radius_server_group: ${11:string}",
            "    state: ${12|present,absent|}",
            "$0"
        ],
        "description": "Manages AAA server global configuration on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages AAA server host configuration on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_aaa_server_host",
            "Manages AAA server host configuration on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_aaa_server_host:",
            "    hwtacacs_is_public_net: ${2|true,false|}",
            "    hwtacacs_is_secondary_server: ${3|true,false|}",
            "$0"
        ],
        "description": "Manages AAA server host configuration on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages base ACL configuration on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_acl",
            "Manages base ACL configuration on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_acl:",
            "    log_flag: ${7|true,false|}",
            "$0"
        ],
        "description": "Manages base ACL configuration on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages advanced ACL configuration on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_acl_advance",
            "Manages advanced ACL configuration on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_acl_advance:",
            "    established: ${14|true,false|}",
            "    log_flag: ${20|true,false|}",
            "    ttl_expired: ${39|true,false|}",
            "$0"
        ],
        "description": "Manages advanced ACL configuration on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages applying ACLs to interfaces on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_acl_interface",
            "Manages applying ACLs to interfaces on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_acl_interface:",
            "$0"
        ],
        "description": "Manages applying ACLs to interfaces on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages BFD global configuration on HUAWEI CloudEngine devices.": {
        "prefix": [
            "community.network.ce_bfd_global",
            "Manages BFD global configuration on HUAWEI CloudEngine devices."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_bfd_global:",
            "$0"
        ],
        "description": "Manages BFD global configuration on HUAWEI CloudEngine devices.",
        "scope": "ansible"
    },
    "Manages BFD session configuration on HUAWEI CloudEngine devices.": {
        "prefix": [
            "community.network.ce_bfd_session",
            "Manages BFD session configuration on HUAWEI CloudEngine devices."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_bfd_session:",
            "    use_default_ip: ${11|true,false|}",
            "$0"
        ],
        "description": "Manages BFD session configuration on HUAWEI CloudEngine devices.",
        "scope": "ansible"
    },
    "Manages BFD session view configuration on HUAWEI CloudEngine devices.": {
        "prefix": [
            "community.network.ce_bfd_view",
            "Manages BFD session view configuration on HUAWEI CloudEngine devices."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_bfd_view:",
            "    admin_down: ${2|true,false|}",
            "$0"
        ],
        "description": "Manages BFD session view configuration on HUAWEI CloudEngine devices.",
        "scope": "ansible"
    },
    "Manages BGP configuration on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_bgp",
            "Manages BGP configuration on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_bgp:",
            "$0"
        ],
        "description": "Manages BGP configuration on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages BGP Address-family configuration on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_bgp_af",
            "Manages BGP Address-family configuration on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_bgp_af:",
            "$0"
        ],
        "description": "Manages BGP Address-family configuration on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages BGP peer configuration on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_bgp_neighbor",
            "Manages BGP peer configuration on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_bgp_neighbor:",
            "$0"
        ],
        "description": "Manages BGP peer configuration on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages BGP neighbor Address-family configuration on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_bgp_neighbor_af",
            "Manages BGP neighbor Address-family configuration on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_bgp_neighbor_af:",
            "$0"
        ],
        "description": "Manages BGP neighbor Address-family configuration on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Run arbitrary command on HUAWEI CloudEngine devices.": {
        "prefix": [
            "community.network.ce_command",
            "Run arbitrary command on HUAWEI CloudEngine devices."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_command:",
            "$0"
        ],
        "description": "Run arbitrary command on HUAWEI CloudEngine devices.",
        "scope": "ansible"
    },
    "Manage Huawei CloudEngine configuration sections.": {
        "prefix": [
            "community.network.ce_config",
            "Manage Huawei CloudEngine configuration sections."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_config:",
            "    backup: ${3|true,false|}",
            "    defaults: ${7|true,false|}",
            "    save: ${12|true,false|}",
            "$0"
        ],
        "description": "Manage Huawei CloudEngine configuration sections.",
        "scope": "ansible"
    },
    "Manages global DLDP configuration on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_dldp",
            "Manages global DLDP configuration on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_dldp:",
            "$0"
        ],
        "description": "Manages global DLDP configuration on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages interface DLDP configuration on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_dldp_interface",
            "Manages interface DLDP configuration on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_dldp_interface:",
            "$0"
        ],
        "description": "Manages interface DLDP configuration on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages Eth-Trunk interfaces on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_eth_trunk",
            "Manages Eth-Trunk interfaces on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_eth_trunk:",
            "    force: ${2|true,false|}",
            "$0"
        ],
        "description": "Manages Eth-Trunk interfaces on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages EVPN VXLAN Network Identifier (VNI) on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_evpn_bd_vni",
            "Manages EVPN VXLAN Network Identifier (VNI) on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_evpn_bd_vni:",
            "$0"
        ],
        "description": "Manages EVPN VXLAN Network Identifier (VNI) on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages BGP EVPN configuration on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_evpn_bgp",
            "Manages BGP EVPN configuration on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_evpn_bgp:",
            "$0"
        ],
        "description": "Manages BGP EVPN configuration on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages RR for the VXLAN Network on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_evpn_bgp_rr",
            "Manages RR for the VXLAN Network on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_evpn_bgp_rr:",
            "$0"
        ],
        "description": "Manages RR for the VXLAN Network on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages global configuration of EVPN on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_evpn_global",
            "Manages global configuration of EVPN on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_evpn_global:",
            "$0"
        ],
        "description": "Manages global configuration of EVPN on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Gets facts about HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_facts",
            "Gets facts about HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_facts:",
            "$0"
        ],
        "description": "Gets facts about HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Copy a file to a remote cloudengine device over SCP on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_file_copy",
            "Copy a file to a remote cloudengine device over SCP on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_file_copy:",
            "$0"
        ],
        "description": "Copy a file to a remote cloudengine device over SCP on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages information center debug configuration on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_info_center_debug",
            "Manages information center debug configuration on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_info_center_debug:",
            "$0"
        ],
        "description": "Manages information center debug configuration on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages outputting logs on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_info_center_global",
            "Manages outputting logs on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_info_center_global:",
            "    is_default_vpn: ${11|true,false|}",
            "$0"
        ],
        "description": "Manages outputting logs on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages information center log configuration on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_info_center_log",
            "Manages information center log configuration on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_info_center_log:",
            "$0"
        ],
        "description": "Manages information center log configuration on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages information center trap configuration on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_info_center_trap",
            "Manages information center trap configuration on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_info_center_trap:",
            "$0"
        ],
        "description": "Manages information center trap configuration on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages physical attributes of interfaces on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_interface",
            "Manages physical attributes of interfaces on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_interface:",
            "    l2sub: ${6|true,false|}",
            "$0"
        ],
        "description": "Manages physical attributes of interfaces on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages configuration of an OSPF interface instanceon HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_interface_ospf",
            "Manages configuration of an OSPF interface instanceon HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_interface_ospf:",
            "    silent_interface: ${12|true,false|}",
            "$0"
        ],
        "description": "Manages configuration of an OSPF interface instanceon HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages L3 attributes for IPv4 and IPv6 interfaces on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_ip_interface",
            "Manages L3 attributes for IPv4 and IPv6 interfaces on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_ip_interface:",
            "$0"
        ],
        "description": "Manages L3 attributes for IPv4 and IPv6 interfaces on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages isis process id configuration on HUAWEI CloudEngine devices.": {
        "prefix": [
            "community.network.ce_is_is_instance",
            "Manages isis process id configuration on HUAWEI CloudEngine devices."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_is_is_instance:",
            "    instance_id: ${2:int}",
            "    state: ${3|present,absent|}",
            "    vpn_name: ${4:string}",
            "$0"
        ],
        "description": "Manages isis process id configuration on HUAWEI CloudEngine devices.",
        "scope": "ansible"
    },
    "Manages isis interface configuration on HUAWEI CloudEngine devices.": {
        "prefix": [
            "community.network.ce_is_is_interface",
            "Manages isis interface configuration on HUAWEI CloudEngine devices."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_is_is_interface:",
            "    bfdblocken: ${2|false,true|}",
            "    bfdstaticen: ${3|false,true|}",
            "    ifname: ${4:string}",
            "    instance_id: ${5:int}",
            "    level1cost: ${6:int}",
            "    level1dispriority: ${7:int}",
            "    level2cost: ${8:int}",
            "    level2dispriority: ${9:int}",
            "    leveltype: ${10:string}",
            "    p2pnegotiationmode: ${11:string}",
            "    p2ppeeripignore: ${12|false,true|}",
            "    ppposicpcheckenable: ${13|false,true|}",
            "    silentcost: ${14|false,true|}",
            "    silentenable: ${15|false,true|}",
            "    snpacheck: ${16|false,true|}",
            "    state: ${17|present,absent|}",
            "    typep2penable: ${18|false,true|}",
            "$0"
        ],
        "description": "Manages isis interface configuration on HUAWEI CloudEngine devices.",
        "scope": "ansible"
    },
    "Manages isis view configuration on HUAWEI CloudEngine devices.": {
        "prefix": [
            "community.network.ce_is_is_view",
            "Manages isis view configuration on HUAWEI CloudEngine devices."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_is_is_view:",
            "    aclnum_or_name: ${2:string}",
            "    allow_filter: ${3|false,true|}",
            "    allow_up_down: ${4|false,true|}",
            "    autocostenable: ${5|false,true|}",
            "    autocostenablecompatible: ${6|false,true|}",
            "    avoid_learning: ${7|false,true|}",
            "    bfd_min_rx: ${8:int}",
            "    bfd_min_tx: ${9:int}",
            "    bfd_multiplier_num: ${10:int}",
            "    cost: ${11:int}",
            "    cost_type: ${12:string}",
            "    coststyle: ${13:string}",
            "    defaultmode: ${14:string}",
            "    description: ${15:string}",
            "    enablelevel1tolevel2: ${16|false,true|}",
            "    export_aclnumorname: ${17:string}",
            "    export_ipprefix: ${18:string}",
            "    export_policytype: ${19:string}",
            "    export_processid: ${20:int}",
            "    export_protocol: ${21:string}",
            "    export_routepolicyname: ${22:string}",
            "    import_aclnumorname: ${23:string}",
            "    import_cost: ${24:int}",
            "    import_ipprefix: ${25:string}",
            "    import_route_policy: ${26:string}",
            "    import_routepolicy_name: ${27:string}",
            "    import_routepolicyname: ${28:string}",
            "    import_tag: ${29:int}",
            "    impotr_leveltype: ${30:string}",
            "    inheritcost: ${31|false,true|}",
            "    instance_id: ${32:int}",
            "    ip_address: ${33:string}",
            "    ip_prefix_name: ${34:string}",
            "    islevel: ${35:string}",
            "    level_type: ${36:string}",
            "    max_load: ${37:int}",
            "    mode_routepolicyname: ${38:string}",
            "    mode_tag: ${39:int}",
            "    netentity: ${40:string}",
            "    penetration_direct: ${41:string}",
            "    permitibgp: ${42|false,true|}",
            "    preference_value: ${43:int}",
            "    processid: ${44:int}",
            "    protocol: ${45:string}",
            "    relaxspfLimit: ${46|false,true|}",
            "    route_policy_name: ${47:string}",
            "    state: ${48|present,absent|}",
            "    stdbandwidth: ${49:int}",
            "    stdlevel1cost: ${50:int}",
            "    stdlevel2cost: ${51:int}",
            "    tag: ${52:int}",
            "    weight: ${53:int}",
            "$0"
        ],
        "description": "Manages isis view configuration on HUAWEI CloudEngine devices.",
        "scope": "ansible"
    },
    "Manages Eth-Trunk interfaces on HUAWEI CloudEngine switches": {
        "prefix": [
            "community.network.ce_lacp",
            "Manages Eth-Trunk interfaces on HUAWEI CloudEngine switches"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_lacp:",
            "    collector_delay: ${2:int}",
            "    fast_timeout: ${3:int}",
            "    global_priority: ${4:int}",
            "    max_active_linknumber: ${5:int}",
            "    mixed_rate_link_enable: ${6|false,true|}",
            "    mode: ${7|Manual,Dynamic,Static|}",
            "    port_id_extension_enable: ${8|false,true|}",
            "    preempt_delay: ${9:int}",
            "    preempt_enable: ${10|false,true|}",
            "    priority: ${11:int}",
            "    select: ${12:string}",
            "    state: ${13|present,absent|}",
            "    state_flapping: ${14|false,true|}",
            "    system_id: ${15:string}",
            "    timeout_type: ${16:string}",
            "    trunk_id: ${17:int}",
            "    unexpected_mac_disable: ${18|false,true|}",
            "$0"
        ],
        "description": "Manages Eth-Trunk interfaces on HUAWEI CloudEngine switches",
        "scope": "ansible"
    },
    "Get interface link status on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_link_status",
            "Get interface link status on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_link_status:",
            "$0"
        ],
        "description": "Get interface link status on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages LLDP configuration on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_lldp",
            "Manages LLDP configuration on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_lldp:",
            "    bind_name: ${2:None}",
            "    fast_count: ${3:int}",
            "    hold_multiplier: ${4:int}",
            "    interval: ${5:int}",
            "    lldpenable: ${6:string}",
            "    management_address: ${7:None}",
            "    mdn_notification_interval: ${8:int}",
            "    mdnstatus: ${9:string}",
            "    notification_interval: ${10:int}",
            "    restart_delay: ${11:int}",
            "    state: ${12|present,absent|}",
            "    transmit_delay: ${13:int}",
            "$0"
        ],
        "description": "Manages LLDP configuration on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages INTERFACE LLDP configuration on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_lldp_interface",
            "Manages INTERFACE LLDP configuration on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_lldp_interface:",
            "    dcbx: ${2|false,true|}",
            "    eee: ${3|false,true|}",
            "    function_lldp_interface_flag: ${4:string}",
            "    ifname: ${5:string}",
            "    linkaggretxenable: ${6|false,true|}",
            "    lldpadminstatus: ${7:string}",
            "    lldpenable: ${8:string}",
            "    macphytxenable: ${9|false,true|}",
            "    manaddrtxenable: ${10|false,true|}",
            "    maxframetxenable: ${11|false,true|}",
            "    portdesctxenable: ${12|false,true|}",
            "    portvlantxenable: ${13|false,true|}",
            "    protoidtxenable: ${14|false,true|}",
            "    protovlantxenable: ${15|false,true|}",
            "    state: ${16|present,absent|}",
            "    syscaptxenable: ${17|false,true|}",
            "    sysdesctxenable: ${18|false,true|}",
            "    sysnametxenable: ${19|false,true|}",
            "    txinterval: ${20:int}",
            "    txprotocolvlanid: ${21:int}",
            "    txvlannameid: ${22:int}",
            "    type_tlv_disable: ${23:string}",
            "    type_tlv_enable: ${24:string}",
            "    vlannametxenable: ${25|false,true|}",
            "$0"
        ],
        "description": "Manages INTERFACE LLDP configuration on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages MDN configuration on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_mdn_interface",
            "Manages MDN configuration on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_mdn_interface:",
            "    ifname: ${2:string}",
            "    lldpenable: ${3:string}",
            "    mdnstatus: ${4:string}",
            "    state: ${5|present,absent|}",
            "$0"
        ],
        "description": "Manages MDN configuration on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages MLAG configuration on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_mlag_config",
            "Manages MLAG configuration on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_mlag_config:",
            "$0"
        ],
        "description": "Manages MLAG configuration on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages MLAG interfaces on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_mlag_interface",
            "Manages MLAG interfaces on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_mlag_interface:",
            "$0"
        ],
        "description": "Manages MLAG interfaces on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages MTU settings on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_mtu",
            "Manages MTU settings on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_mtu:",
            "$0"
        ],
        "description": "Manages MTU settings on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages multicast global configuration on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_multicast_global",
            "Manages multicast global configuration on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_multicast_global:",
            "    aftype: ${2:string}",
            "    state: ${3|present,absent|}",
            "    vrf: ${4:string}",
            "$0"
        ],
        "description": "Manages multicast global configuration on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages multicast igmp enable configuration on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_multicast_igmp_enable",
            "Manages multicast igmp enable configuration on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_multicast_igmp_enable:",
            "    aftype: ${2:string}",
            "    features: ${3:string}",
            "    igmp: ${4|false,true|}",
            "    proxy: ${5|false,true|}",
            "    state: ${6|present,absent|}",
            "    version: ${7:2}",
            "    vlan_id: ${8:int}",
            "$0"
        ],
        "description": "Manages multicast igmp enable configuration on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Run an arbitrary netconf command on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_netconf",
            "Run an arbitrary netconf command on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_netconf:",
            "$0"
        ],
        "description": "Run an arbitrary netconf command on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages timeout mode of NetStream on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_netstream_aging",
            "Manages timeout mode of NetStream on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_netstream_aging:",
            "$0"
        ],
        "description": "Manages timeout mode of NetStream on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages netstream export on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_netstream_export",
            "Manages netstream export on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_netstream_export:",
            "$0"
        ],
        "description": "Manages netstream export on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages global parameters of NetStream on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_netstream_global",
            "Manages global parameters of NetStream on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_netstream_global:",
            "$0"
        ],
        "description": "Manages global parameters of NetStream on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages NetStream template configuration on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_netstream_template",
            "Manages NetStream template configuration on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_netstream_template:",
            "$0"
        ],
        "description": "Manages NetStream template configuration on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages core NTP configuration on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_ntp",
            "Manages core NTP configuration on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_ntp:",
            "$0"
        ],
        "description": "Manages core NTP configuration on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages NTP authentication configuration on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_ntp_auth",
            "Manages NTP authentication configuration on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_ntp_auth:",
            "$0"
        ],
        "description": "Manages NTP authentication configuration on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages configuration of an OSPF instance on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_ospf",
            "Manages configuration of an OSPF instance on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_ospf:",
            "$0"
        ],
        "description": "Manages configuration of an OSPF instance on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages configuration of an OSPF VPN instance on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_ospf_vrf",
            "Manages configuration of an OSPF VPN instance on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_ospf_vrf:",
            "    lsaalflag: ${6|true,false|}",
            "    lsaointervalflag: ${11|true,false|}",
            "$0"
        ],
        "description": "Manages configuration of an OSPF VPN instance on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Reboot a HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_reboot",
            "Reboot a HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_reboot:",
            "    confirm: ${2|false,true|}",
            "    save_config: ${3|false,true|}",
            "$0"
        ],
        "description": "Reboot a HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Set a checkpoint or rollback to a checkpoint on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_rollback",
            "Set a checkpoint or rollback to a checkpoint on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_rollback:",
            "$0"
        ],
        "description": "Set a checkpoint or rollback to a checkpoint on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages sFlow configuration on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_sflow",
            "Manages sFlow configuration on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_sflow:",
            "$0"
        ],
        "description": "Manages sFlow configuration on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages SNMP community configuration on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_snmp_community",
            "Manages SNMP community configuration on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_snmp_community:",
            "$0"
        ],
        "description": "Manages SNMP community configuration on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages SNMP contact configuration on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_snmp_contact",
            "Manages SNMP contact configuration on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_snmp_contact:",
            "$0"
        ],
        "description": "Manages SNMP contact configuration on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages SNMP location configuration on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_snmp_location",
            "Manages SNMP location configuration on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_snmp_location:",
            "$0"
        ],
        "description": "Manages SNMP location configuration on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages SNMP target host configuration on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_snmp_target_host",
            "Manages SNMP target host configuration on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_snmp_target_host:",
            "$0"
        ],
        "description": "Manages SNMP target host configuration on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages SNMP traps configuration on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_snmp_traps",
            "Manages SNMP traps configuration on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_snmp_traps:",
            "$0"
        ],
        "description": "Manages SNMP traps configuration on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages SNMP user configuration on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_snmp_user",
            "Manages SNMP user configuration on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_snmp_user:",
            "$0"
        ],
        "description": "Manages SNMP user configuration on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages a system startup information on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_startup",
            "Manages a system startup information on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_startup:",
            "$0"
        ],
        "description": "Manages a system startup information on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages static route configuration on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_static_route_bfd",
            "Manages static route configuration on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_static_route_bfd:",
            "    aftype: ${2:string}",
            "    bfd_session_name: ${3:string}",
            "    commands:",
            "      - ${4:element}",
            "    description: ${5:string}",
            "    destvrf: ${6:string}",
            "    detect_multiplier: ${7:int}",
            "    function_flag: ${8:string}",
            "    mask: ${9:string}",
            "    min_rx_interval: ${10:int}",
            "    min_tx_interval: ${11:int}",
            "    next_hop: ${12:string}",
            "    nhp_interface: ${13:string}",
            "    pref: ${14:int}",
            "    prefix: ${15:string}",
            "    state: ${16|present,absent|}",
            "    tag: ${17:int}",
            "    vrf: ${18:string}",
            "$0"
        ],
        "description": "Manages static route configuration on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages STP configuration on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_stp",
            "Manages STP configuration on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_stp:",
            "$0"
        ],
        "description": "Manages STP configuration on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages Layer 2 switchport interfaces on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_switchport",
            "Manages Layer 2 switchport interfaces on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_switchport:",
            "$0"
        ],
        "description": "Manages Layer 2 switchport interfaces on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages VLAN resources and attributes on Huawei CloudEngine switches.": {
        "prefix": [
            "community.network.ce_vlan",
            "Manages VLAN resources and attributes on Huawei CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_vlan:",
            "$0"
        ],
        "description": "Manages VLAN resources and attributes on Huawei CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages VPN instance on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_vrf",
            "Manages VPN instance on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_vrf:",
            "$0"
        ],
        "description": "Manages VPN instance on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages VPN instance address family on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_vrf_af",
            "Manages VPN instance address family on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_vrf_af:",
            "    evpn: ${2|true,false|}",
            "$0"
        ],
        "description": "Manages VPN instance address family on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages interface specific VPN configuration on HUAWEI CloudEngine switches.": {
        "prefix": [
            "community.network.ce_vrf_interface",
            "Manages interface specific VPN configuration on HUAWEI CloudEngine switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_vrf_interface:",
            "$0"
        ],
        "description": "Manages interface specific VPN configuration on HUAWEI CloudEngine switches.",
        "scope": "ansible"
    },
    "Manages VRRP interfaces on HUAWEI CloudEngine devices.": {
        "prefix": [
            "community.network.ce_vrrp",
            "Manages VRRP interfaces on HUAWEI CloudEngine devices."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_vrrp:",
            "    admin_flowdown: ${2|true,false|}",
            "    admin_ignore_if_down: ${3|true,false|}",
            "    auth_mode: ${8:string}",
            "    fast_resume: ${9:string}",
            "    is_plain: ${13|true,false|}",
            "    state: ${17|present,absent|}",
            "    version: ${18:string}",
            "    vrrp_type: ${21:string}",
            "$0"
        ],
        "description": "Manages VRRP interfaces on HUAWEI CloudEngine devices.",
        "scope": "ansible"
    },
    "Manages ARP attributes of VXLAN on HUAWEI CloudEngine devices.": {
        "prefix": [
            "community.network.ce_vxlan_arp",
            "Manages ARP attributes of VXLAN on HUAWEI CloudEngine devices."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_vxlan_arp:",
            "$0"
        ],
        "description": "Manages ARP attributes of VXLAN on HUAWEI CloudEngine devices.",
        "scope": "ansible"
    },
    "Manages gateway for the VXLAN network on HUAWEI CloudEngine devices.": {
        "prefix": [
            "community.network.ce_vxlan_gateway",
            "Manages gateway for the VXLAN network on HUAWEI CloudEngine devices."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_vxlan_gateway:",
            "$0"
        ],
        "description": "Manages gateway for the VXLAN network on HUAWEI CloudEngine devices.",
        "scope": "ansible"
    },
    "Manages global attributes of VXLAN and bridge domain on HUAWEI CloudEngine devices.": {
        "prefix": [
            "community.network.ce_vxlan_global",
            "Manages global attributes of VXLAN and bridge domain on HUAWEI CloudEngine devices."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_vxlan_global:",
            "$0"
        ],
        "description": "Manages global attributes of VXLAN and bridge domain on HUAWEI CloudEngine devices.",
        "scope": "ansible"
    },
    "Manages VXLAN tunnel configuration on HUAWEI CloudEngine devices.": {
        "prefix": [
            "community.network.ce_vxlan_tunnel",
            "Manages VXLAN tunnel configuration on HUAWEI CloudEngine devices."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_vxlan_tunnel:",
            "$0"
        ],
        "description": "Manages VXLAN tunnel configuration on HUAWEI CloudEngine devices.",
        "scope": "ansible"
    },
    "Manages VXLAN virtual access point on HUAWEI CloudEngine Devices.": {
        "prefix": [
            "community.network.ce_vxlan_vap",
            "Manages VXLAN virtual access point on HUAWEI CloudEngine Devices."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ce_vxlan_vap:",
            "$0"
        ],
        "description": "Manages VXLAN virtual access point on HUAWEI CloudEngine Devices.",
        "scope": "ansible"
    },
    "Backup the current running or startup configuration to a remote server on devices running Lenovo CNOS": {
        "prefix": [
            "community.network.cnos_backup",
            "Backup the current running or startup configuration to a remote server on devices running Lenovo CNOS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.cnos_backup:",
            "    deviceType: ${3:string}",
            "    enablePassword: ${4:string}",
            "    host: ${5:string}",
            "    outputfile: ${6:string}",
            "    password: ${7:string}",
            "    username: ${13:string}",
            "$0"
        ],
        "description": "Backup the current running or startup configuration to a remote server on devices running Lenovo CNOS",
        "scope": "ansible"
    },
    "Manage multiline banners on Lenovo CNOS devices": {
        "prefix": [
            "community.network.cnos_banner",
            "Manage multiline banners on Lenovo CNOS devices"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.cnos_banner:",
            "$0"
        ],
        "description": "Manage multiline banners on Lenovo CNOS devices",
        "scope": "ansible"
    },
    "Manage BGP resources and attributes on devices running CNOS": {
        "prefix": [
            "community.network.cnos_bgp",
            "Manage BGP resources and attributes on devices running CNOS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.cnos_bgp:",
            "    deviceType: ${11:string}",
            "    enablePassword: ${12:string}",
            "    host: ${13:string}",
            "    outputfile: ${14:string}",
            "    password: ${15:string}",
            "    username: ${16:string}",
            "$0"
        ],
        "description": "Manage BGP resources and attributes on devices running CNOS",
        "scope": "ansible"
    },
    "Run arbitrary commands on Lenovo CNOS devices": {
        "prefix": [
            "community.network.cnos_command",
            "Run arbitrary commands on Lenovo CNOS devices"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.cnos_command:",
            "$0"
        ],
        "description": "Run arbitrary commands on Lenovo CNOS devices",
        "scope": "ansible"
    },
    "Execute a single command based on condition on devices running Lenovo CNOS": {
        "prefix": [
            "community.network.cnos_conditional_command",
            "Execute a single command based on condition on devices running Lenovo CNOS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.cnos_conditional_command:",
            "    deviceType: ${4:string}",
            "    enablePassword: ${5:string}",
            "    host: ${7:string}",
            "    outputfile: ${8:string}",
            "    password: ${9:string}",
            "    username: ${10:string}",
            "$0"
        ],
        "description": "Execute a single command based on condition on devices running Lenovo CNOS",
        "scope": "ansible"
    },
    "Manage switch configuration using templates based on condition on devices running Lenovo CNOS": {
        "prefix": [
            "community.network.cnos_conditional_template",
            "Manage switch configuration using templates based on condition on devices running Lenovo CNOS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.cnos_conditional_template:",
            "    deviceType: ${4:string}",
            "    enablePassword: ${5:string}",
            "    host: ${7:string}",
            "    outputfile: ${8:string}",
            "    password: ${9:string}",
            "    username: ${10:string}",
            "$0"
        ],
        "description": "Manage switch configuration using templates based on condition on devices running Lenovo CNOS",
        "scope": "ansible"
    },
    "Manage Lenovo CNOS configuration sections": {
        "prefix": [
            "community.network.cnos_config",
            "Manage Lenovo CNOS configuration sections"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.cnos_config:",
            "    admin: ${2|true,false|}",
            "    backup: ${4|true,false|}",
            "$0"
        ],
        "description": "Manage Lenovo CNOS configuration sections",
        "scope": "ansible"
    },
    "Reset the switch startup configuration to default (factory) on devices running Lenovo CNOS.": {
        "prefix": [
            "community.network.cnos_factory",
            "Reset the switch startup configuration to default (factory) on devices running Lenovo CNOS."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.cnos_factory:",
            "    deviceType: ${2:string}",
            "    enablePassword: ${3:string}",
            "    host: ${4:string}",
            "    outputfile: ${5:string}",
            "    password: ${6:string}",
            "    username: ${7:string}",
            "$0"
        ],
        "description": "Reset the switch startup configuration to default (factory) on devices running Lenovo CNOS.",
        "scope": "ansible"
    },
    "Collect facts from remote devices running Lenovo CNOS": {
        "prefix": [
            "community.network.cnos_facts",
            "Collect facts from remote devices running Lenovo CNOS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.cnos_facts:",
            "    authorize: ${3|true,false|}",
            "$0"
        ],
        "description": "Collect facts from remote devices running Lenovo CNOS",
        "scope": "ansible"
    },
    "Perform firmware upgrade/download from a remote server on devices running Lenovo CNOS": {
        "prefix": [
            "community.network.cnos_image",
            "Perform firmware upgrade/download from a remote server on devices running Lenovo CNOS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.cnos_image:",
            "    deviceType: ${2:string}",
            "    enablePassword: ${3:string}",
            "    host: ${4:string}",
            "    outputfile: ${7:string}",
            "    password: ${8:string}",
            "    username: ${13:string}",
            "$0"
        ],
        "description": "Perform firmware upgrade/download from a remote server on devices running Lenovo CNOS",
        "scope": "ansible"
    },
    "Manage Interface on Lenovo CNOS network devices": {
        "prefix": [
            "community.network.cnos_interface",
            "Manage Interface on Lenovo CNOS network devices"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.cnos_interface:",
            "    enabled: ${6|true,false|}",
            "$0"
        ],
        "description": "Manage Interface on Lenovo CNOS network devices",
        "scope": "ansible"
    },
    "Manage Layer-2 interface on Lenovo CNOS devices.": {
        "prefix": [
            "community.network.cnos_l2_interface",
            "Manage Layer-2 interface on Lenovo CNOS devices."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.cnos_l2_interface:",
            "$0"
        ],
        "description": "Manage Layer-2 interface on Lenovo CNOS devices.",
        "scope": "ansible"
    },
    "Manage Layer-3 interfaces on Lenovo CNOS network devices.": {
        "prefix": [
            "community.network.cnos_l3_interface",
            "Manage Layer-3 interfaces on Lenovo CNOS network devices."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.cnos_l3_interface:",
            "$0"
        ],
        "description": "Manage Layer-3 interfaces on Lenovo CNOS network devices.",
        "scope": "ansible"
    },
    "Manage link aggregation groups on Lenovo CNOS devices": {
        "prefix": [
            "community.network.cnos_linkagg",
            "Manage link aggregation groups on Lenovo CNOS devices"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.cnos_linkagg:",
            "    purge: ${6|false,true|}",
            "$0"
        ],
        "description": "Manage link aggregation groups on Lenovo CNOS devices",
        "scope": "ansible"
    },
    "Manage LLDP configuration on Lenovo CNOS network devices.": {
        "prefix": [
            "community.network.cnos_lldp",
            "Manage LLDP configuration on Lenovo CNOS network devices."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.cnos_lldp:",
            "$0"
        ],
        "description": "Manage LLDP configuration on Lenovo CNOS network devices.",
        "scope": "ansible"
    },
    "Manage logging on network devices": {
        "prefix": [
            "community.network.cnos_logging",
            "Manage logging on network devices"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.cnos_logging:",
            "$0"
        ],
        "description": "Manage logging on network devices",
        "scope": "ansible"
    },
    "Perform switch restart on devices running Lenovo CNOS": {
        "prefix": [
            "community.network.cnos_reload",
            "Perform switch restart on devices running Lenovo CNOS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.cnos_reload:",
            "    deviceType: ${2:string}",
            "    enablePassword: ${3:string}",
            "    host: ${4:string}",
            "    outputfile: ${5:string}",
            "    password: ${6:string}",
            "    username: ${7:string}",
            "$0"
        ],
        "description": "Perform switch restart on devices running Lenovo CNOS",
        "scope": "ansible"
    },
    "Roll back the running or startup configuration from a remote server on devices running Lenovo CNOS": {
        "prefix": [
            "community.network.cnos_rollback",
            "Roll back the running or startup configuration from a remote server on devices running Lenovo CNOS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.cnos_rollback:",
            "    deviceType: ${3:string}",
            "    enablePassword: ${4:string}",
            "    host: ${5:string}",
            "    outputfile: ${6:string}",
            "    password: ${7:string}",
            "    username: ${13:string}",
            "$0"
        ],
        "description": "Roll back the running or startup configuration from a remote server on devices running Lenovo CNOS",
        "scope": "ansible"
    },
    "Save the running configuration as the startup configuration on devices running Lenovo CNOS": {
        "prefix": [
            "community.network.cnos_save",
            "Save the running configuration as the startup configuration on devices running Lenovo CNOS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.cnos_save:",
            "    deviceType: ${2:string}",
            "    enablePassword: ${3:string}",
            "    host: ${4:string}",
            "    outputfile: ${5:string}",
            "    password: ${6:string}",
            "    username: ${7:string}",
            "$0"
        ],
        "description": "Save the running configuration as the startup configuration on devices running Lenovo CNOS",
        "scope": "ansible"
    },
    "Collect the current running configuration on devices running on CNOS": {
        "prefix": [
            "community.network.cnos_showrun",
            "Collect the current running configuration on devices running on CNOS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.cnos_showrun:",
            "    deviceType: ${2:string}",
            "    enablePassword: ${3:string}",
            "    host: ${4:string}",
            "    outputfile: ${5:string}",
            "    password: ${6:string}",
            "    username: ${7:string}",
            "$0"
        ],
        "description": "Collect the current running configuration on devices running on CNOS",
        "scope": "ansible"
    },
    "Manage static IP routes on Lenovo CNOS network devices": {
        "prefix": [
            "community.network.cnos_static_route",
            "Manage static IP routes on Lenovo CNOS network devices"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.cnos_static_route:",
            "$0"
        ],
        "description": "Manage static IP routes on Lenovo CNOS network devices",
        "scope": "ansible"
    },
    "Manage the system attributes on Lenovo CNOS devices": {
        "prefix": [
            "community.network.cnos_system",
            "Manage the system attributes on Lenovo CNOS devices"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.cnos_system:",
            "    lookup_enabled: ${5|false,true|}",
            "$0"
        ],
        "description": "Manage the system attributes on Lenovo CNOS devices",
        "scope": "ansible"
    },
    "Manage switch configuration using templates on devices running Lenovo CNOS": {
        "prefix": [
            "community.network.cnos_template",
            "Manage switch configuration using templates on devices running Lenovo CNOS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.cnos_template:",
            "    deviceType: ${3:string}",
            "    enablePassword: ${4:string}",
            "    host: ${5:string}",
            "    outputfile: ${6:string}",
            "    password: ${7:string}",
            "    username: ${8:string}",
            "$0"
        ],
        "description": "Manage switch configuration using templates on devices running Lenovo CNOS",
        "scope": "ansible"
    },
    "Manage the collection of local users on Lenovo CNOS devices": {
        "prefix": [
            "community.network.cnos_user",
            "Manage the collection of local users on Lenovo CNOS devices"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.cnos_user:",
            "    purge: ${5|true,false|}",
            "$0"
        ],
        "description": "Manage the collection of local users on Lenovo CNOS devices",
        "scope": "ansible"
    },
    "Manage VLAG resources and attributes on devices running Lenovo CNOS": {
        "prefix": [
            "community.network.cnos_vlag",
            "Manage VLAG resources and attributes on devices running Lenovo CNOS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.cnos_vlag:",
            "    deviceType: ${2:string}",
            "    enablePassword: ${3:string}",
            "    host: ${4:string}",
            "    outputfile: ${5:string}",
            "    password: ${6:string}",
            "    username: ${7:string}",
            "$0"
        ],
        "description": "Manage VLAG resources and attributes on devices running Lenovo CNOS",
        "scope": "ansible"
    },
    "Manage VLANs on CNOS network devices": {
        "prefix": [
            "community.network.cnos_vlan",
            "Manage VLANs on CNOS network devices"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.cnos_vlan:",
            "    purge: ${7|false,true|}",
            "$0"
        ],
        "description": "Manage VLANs on CNOS network devices",
        "scope": "ansible"
    },
    "Manage VRFs on Lenovo CNOS network devices": {
        "prefix": [
            "community.network.cnos_vrf",
            "Manage VRFs on Lenovo CNOS network devices"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.cnos_vrf:",
            "    purge: ${7|false,true|}",
            "$0"
        ],
        "description": "Manage VRFs on Lenovo CNOS network devices",
        "scope": "ansible"
    },
    "Provision server port by applying or removing template configuration to an Arista CloudVision Portal configlet that is applied to a switch.": {
        "prefix": [
            "community.network.cv_server_provision",
            "Provision server port by applying or removing template configuration to an Arista CloudVision Portal configlet that is applied to a switch."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.cv_server_provision:",
            "    auto_run: ${3|true,false|}",
            "$0"
        ],
        "description": "Provision server port by applying or removing template configuration to an Arista CloudVision Portal configlet that is applied to a switch.",
        "scope": "ansible"
    },
    "Manage etherstubs on Solaris/illumos systems.": {
        "prefix": [
            "community.network.dladm_etherstub",
            "Manage etherstubs on Solaris/illumos systems."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.dladm_etherstub:",
            "    temporary: ${4|false,true|}",
            "$0"
        ],
        "description": "Manage etherstubs on Solaris/illumos systems.",
        "scope": "ansible"
    },
    "Manage IP tunnel interfaces on Solaris/illumos systems.": {
        "prefix": [
            "community.network.dladm_iptun",
            "Manage IP tunnel interfaces on Solaris/illumos systems."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.dladm_iptun:",
            "    temporary: ${6|false,true|}",
            "$0"
        ],
        "description": "Manage IP tunnel interfaces on Solaris/illumos systems.",
        "scope": "ansible"
    },
    "Manage link properties on Solaris/illumos systems.": {
        "prefix": [
            "community.network.dladm_linkprop",
            "Manage link properties on Solaris/illumos systems."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.dladm_linkprop:",
            "    temporary: ${5|false,true|}",
            "$0"
        ],
        "description": "Manage link properties on Solaris/illumos systems.",
        "scope": "ansible"
    },
    "Manage VLAN interfaces on Solaris/illumos systems.": {
        "prefix": [
            "community.network.dladm_vlan",
            "Manage VLAN interfaces on Solaris/illumos systems."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.dladm_vlan:",
            "    temporary: ${5|false,true|}",
            "$0"
        ],
        "description": "Manage VLAN interfaces on Solaris/illumos systems.",
        "scope": "ansible"
    },
    "Manage VNICs on Solaris/illumos systems.": {
        "prefix": [
            "community.network.dladm_vnic",
            "Manage VNICs on Solaris/illumos systems."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.dladm_vnic:",
            "    link: ${2:string}",
            "    mac: ${3:string}",
            "    name: ${4:string}",
            "    state: ${5|present,absent|}",
            "    temporary: ${6|false,true|}",
            "    vlan: ${7:False}",
            "$0"
        ],
        "description": "Manage VNICs on Solaris/illumos systems.",
        "scope": "ansible"
    },
    "Run one or more commands on EdgeOS devices": {
        "prefix": [
            "community.network.edgeos_command",
            "Run one or more commands on EdgeOS devices"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.edgeos_command:",
            "$0"
        ],
        "description": "Run one or more commands on EdgeOS devices",
        "scope": "ansible"
    },
    "Manage EdgeOS configuration on remote device": {
        "prefix": [
            "community.network.edgeos_config",
            "Manage EdgeOS configuration on remote device"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.edgeos_config:",
            "    backup: ${2|true,false|}",
            "    lines:",
            "      - ${6:element}",
            "    save: ${8|true,false|}",
            "$0"
        ],
        "description": "Manage EdgeOS configuration on remote device",
        "scope": "ansible"
    },
    "Collect facts from remote devices running EdgeOS": {
        "prefix": [
            "community.network.edgeos_facts",
            "Collect facts from remote devices running EdgeOS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.edgeos_facts:",
            "$0"
        ],
        "description": "Collect facts from remote devices running EdgeOS",
        "scope": "ansible"
    },
    "Collect facts from remote devices running Edgeswitch": {
        "prefix": [
            "community.network.edgeswitch_facts",
            "Collect facts from remote devices running Edgeswitch"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.edgeswitch_facts:",
            "$0"
        ],
        "description": "Collect facts from remote devices running Edgeswitch",
        "scope": "ansible"
    },
    "Manage VLANs on Ubiquiti Edgeswitch network devices": {
        "prefix": [
            "community.network.edgeswitch_vlan",
            "Manage VLANs on Ubiquiti Edgeswitch network devices"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.edgeswitch_vlan:",
            "    auto_exclude: ${3|false,true|}",
            "    auto_tag: ${4|false,true|}",
            "    auto_untag: ${5|false,true|}",
            "    purge: ${8|false,true|}",
            "$0"
        ],
        "description": "Manage VLANs on Ubiquiti Edgeswitch network devices",
        "scope": "ansible"
    },
    "Run arbitrary commands on Lenovo ENOS devices": {
        "prefix": [
            "community.network.enos_command",
            "Run arbitrary commands on Lenovo ENOS devices"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.enos_command:",
            "    authorize: ${3|false,true|}",
            "$0"
        ],
        "description": "Run arbitrary commands on Lenovo ENOS devices",
        "scope": "ansible"
    },
    "Manage Lenovo ENOS configuration sections": {
        "prefix": [
            "community.network.enos_config",
            "Manage Lenovo ENOS configuration sections"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.enos_config:",
            "    admin: ${2|true,false|}",
            "    authorize: ${5|false,true|}",
            "    backup: ${6|true,false|}",
            "$0"
        ],
        "description": "Manage Lenovo ENOS configuration sections",
        "scope": "ansible"
    },
    "Collect facts from remote devices running Lenovo ENOS": {
        "prefix": [
            "community.network.enos_facts",
            "Collect facts from remote devices running Lenovo ENOS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.enos_facts:",
            "    authorize: ${3|false,true|}",
            "$0"
        ],
        "description": "Collect facts from remote devices running Lenovo ENOS",
        "scope": "ansible"
    },
    "Run commands on remote devices running ERICSSON ECCLI": {
        "prefix": [
            "community.network.eric_eccli_command",
            "Run commands on remote devices running ERICSSON ECCLI"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.eric_eccli_command:",
            "    commands:",
            "      - ${2:element}",
            "    interval: ${3:1}",
            "    match: ${4|all,any|}",
            "    retries: ${5:10}",
            "    wait_for:",
            "      - ${6:element}",
            "$0"
        ],
        "description": "Run commands on remote devices running ERICSSON ECCLI",
        "scope": "ansible"
    },
    "Run commands on remote devices running Extreme EXOS": {
        "prefix": [
            "community.network.exos_command",
            "Run commands on remote devices running Extreme EXOS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.exos_command:",
            "$0"
        ],
        "description": "Run commands on remote devices running Extreme EXOS",
        "scope": "ansible"
    },
    "Manage Extreme Networks EXOS configuration sections": {
        "prefix": [
            "community.network.exos_config",
            "Manage Extreme Networks EXOS configuration sections"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.exos_config:",
            "    backup: ${3|true,false|}",
            "    defaults: ${6|true,false|}",
            "$0"
        ],
        "description": "Manage Extreme Networks EXOS configuration sections",
        "scope": "ansible"
    },
    "Collect facts from devices running Extreme EXOS": {
        "prefix": [
            "community.network.exos_facts",
            "Collect facts from devices running Extreme EXOS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.exos_facts:",
            "    gather_network_resources:",
            "      - ${2:element}",
            "    gather_subset:",
            "      - ${3:element}",
            "$0"
        ],
        "description": "Collect facts from devices running Extreme EXOS",
        "scope": "ansible"
    },
    "Manage L2 interfaces on Extreme Networks EXOS devices.": {
        "prefix": [
            "community.network.exos_l2_interfaces",
            "Manage L2 interfaces on Extreme Networks EXOS devices."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.exos_l2_interfaces:",
            "    config:",
            "      - ${2:element}",
            "    state: ${3|merged,replaced,overridden,deleted|}",
            "$0"
        ],
        "description": "Manage L2 interfaces on Extreme Networks EXOS devices.",
        "scope": "ansible"
    },
    "Configure and manage Link Layer Discovery Protocol(LLDP) attributes on EXOS platforms.": {
        "prefix": [
            "community.network.exos_lldp_global",
            "Configure and manage Link Layer Discovery Protocol(LLDP) attributes on EXOS platforms."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.exos_lldp_global:",
            "    state: ${3|merged,replaced,deleted|}",
            "$0"
        ],
        "description": "Configure and manage Link Layer Discovery Protocol(LLDP) attributes on EXOS platforms.",
        "scope": "ansible"
    },
    "Manage link layer discovery protocol (LLDP) attributes of interfaces on EXOS platforms.": {
        "prefix": [
            "community.network.exos_lldp_interfaces",
            "Manage link layer discovery protocol (LLDP) attributes of interfaces on EXOS platforms."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.exos_lldp_interfaces:",
            "    config:",
            "      - ${2:element}",
            "    state: ${3|merged,replaced,overridden,deleted|}",
            "$0"
        ],
        "description": "Manage link layer discovery protocol (LLDP) attributes of interfaces on EXOS platforms.",
        "scope": "ansible"
    },
    "Manage VLANs on Extreme Networks EXOS devices.": {
        "prefix": [
            "community.network.exos_vlans",
            "Manage VLANs on Extreme Networks EXOS devices."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.exos_vlans:",
            "    config:",
            "      - ${2:element}",
            "    state: ${3|merged,replaced,overridden,deleted|}",
            "$0"
        ],
        "description": "Manage VLANs on Extreme Networks EXOS devices.",
        "scope": "ansible"
    },
    "Manage bandwidth resource control and priority for protocols, services and zones on Solaris/illumos systems": {
        "prefix": [
            "community.network.flowadm",
            "Manage bandwidth resource control and priority for protocols, services and zones on Solaris/illumos systems"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.flowadm:",
            "    temporary: ${11|false,true|}",
            "$0"
        ],
        "description": "Manage bandwidth resource control and priority for protocols, services and zones on Solaris/illumos systems",
        "scope": "ansible"
    },
    "Manages configuration on Cisco FTD devices over REST API": {
        "prefix": [
            "community.network.ftd_configuration",
            "Manages configuration on Cisco FTD devices over REST API"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ftd_configuration:",
            "    operation: ${4:string}",
            "    register_as: ${7:string}",
            "$0"
        ],
        "description": "Manages configuration on Cisco FTD devices over REST API",
        "scope": "ansible"
    },
    "Downloads files from Cisco FTD devices over HTTP(S)": {
        "prefix": [
            "community.network.ftd_file_download",
            "Downloads files from Cisco FTD devices over HTTP(S)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ftd_file_download:",
            "    destination: ${2:path}",
            "    operation: ${3:string}",
            "$0"
        ],
        "description": "Downloads files from Cisco FTD devices over HTTP(S)",
        "scope": "ansible"
    },
    "Uploads files to Cisco FTD devices over HTTP(S)": {
        "prefix": [
            "community.network.ftd_file_upload",
            "Uploads files to Cisco FTD devices over HTTP(S)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ftd_file_upload:",
            "    file_to_upload: ${2:path}",
            "    operation: ${3:string}",
            "    register_as: ${4:string}",
            "$0"
        ],
        "description": "Uploads files to Cisco FTD devices over HTTP(S)",
        "scope": "ansible"
    },
    "Installs FTD pkg image on the firewall": {
        "prefix": [
            "community.network.ftd_install",
            "Installs FTD pkg image on the firewall"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ftd_install:",
            "    console_ip: ${2:string}",
            "    console_password: ${3:string}",
            "    console_port: ${4:string}",
            "    console_username: ${5:string}",
            "    device_gateway: ${6:string}",
            "    device_hostname: ${7:string}",
            "    device_ip: ${8:string}",
            "    device_model: ${9:string}",
            "    device_netmask: ${10:string}",
            "    device_new_password: ${11:string}",
            "    device_password: ${12:string}",
            "    device_sudo_password: ${13:string}",
            "    device_username: ${14:admin}",
            "    dns_server: ${15:string}",
            "    force_install: ${16|false,true|}",
            "    image_file_location: ${17:string}",
            "    image_version: ${18:string}",
            "    rommon_file_location: ${19:string}",
            "    search_domains: ${20:cisco.com}",
            "$0"
        ],
        "description": "Installs FTD pkg image on the firewall",
        "scope": "ansible"
    },
    "Start a workflow in the Itential Automation Platform": {
        "prefix": [
            "community.network.iap_start_workflow",
            "Start a workflow in the Itential Automation Platform"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.iap_start_workflow:",
            "    description: ${2:None}",
            "    https: ${3|false,true|}",
            "    iap_fqdn: ${4:None}",
            "    iap_port: ${5:None}",
            "    token_key: ${6:None}",
            "    validate_certs: ${7|false,true|}",
            "    workflow_name: ${9:None}",
            "$0"
        ],
        "description": "Start a workflow in the Itential Automation Platform",
        "scope": "ansible"
    },
    "Get token for the Itential Automation Platform": {
        "prefix": [
            "community.network.iap_token",
            "Get token for the Itential Automation Platform"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.iap_token:",
            "    https: ${2|false,true|}",
            "    validate_certs: ${7|false,true|}",
            "$0"
        ],
        "description": "Get token for the Itential Automation Platform",
        "scope": "ansible"
    },
    "Manage multiline banners on Ruckus ICX 7000 series switches": {
        "prefix": [
            "community.network.icx_banner",
            "Manage multiline banners on Ruckus ICX 7000 series switches"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.icx_banner:",
            "    banner: ${2:string}",
            "    check_running_config: ${3|true,false|}",
            "    enterkey: ${4|false,true|}",
            "    state: ${5|present,absent|}",
            "    text: ${6:string}",
            "$0"
        ],
        "description": "Manage multiline banners on Ruckus ICX 7000 series switches",
        "scope": "ansible"
    },
    "Run arbitrary commands on remote Ruckus ICX 7000 series switches": {
        "prefix": [
            "community.network.icx_command",
            "Run arbitrary commands on remote Ruckus ICX 7000 series switches"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.icx_command:",
            "    commands:",
            "      - ${2:element}",
            "    interval: ${3:1}",
            "    match: ${4|all,any|}",
            "    retries: ${5:10}",
            "    wait_for:",
            "      - ${6:element}",
            "$0"
        ],
        "description": "Run arbitrary commands on remote Ruckus ICX 7000 series switches",
        "scope": "ansible"
    },
    "Manage configuration sections of Ruckus ICX 7000 series switches": {
        "prefix": [
            "community.network.icx_config",
            "Manage configuration sections of Ruckus ICX 7000 series switches"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.icx_config:",
            "    after:",
            "      - ${2:element}",
            "    backup: ${3|true,false|}",
            "    before:",
            "      - ${4:element}",
            "    defaults: ${5|true,false|}",
            "    diff_against: ${6:string}",
            "    diff_ignore_lines:",
            "      - ${7:element}",
            "    intended_config: ${8:string}",
            "    lines:",
            "      - ${9:element}",
            "    match: ${10|line,strict,exact,none|}",
            "    multiline_delimiter: ${11:@}",
            "    parents:",
            "      - ${12:element}",
            "    replace: ${13|line,block|}",
            "    running_config: ${14:string}",
            "    save_when: ${15|never,always,modified,changed|}",
            "    src: ${16:string}",
            "$0"
        ],
        "description": "Manage configuration sections of Ruckus ICX 7000 series switches",
        "scope": "ansible"
    },
    "Transfer files from or to remote Ruckus ICX 7000 series switches": {
        "prefix": [
            "community.network.icx_copy",
            "Transfer files from or to remote Ruckus ICX 7000 series switches"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.icx_copy:",
            "    download: ${2:string}",
            "    protocol: ${3:string}",
            "    public_key: ${4:string}",
            "    remote_filename: ${5:string}",
            "    remote_pass: ${6:string}",
            "    remote_port: ${7:string}",
            "    remote_server: ${8:string}",
            "    remote_user: ${9:string}",
            "    upload: ${10:string}",
            "$0"
        ],
        "description": "Transfer files from or to remote Ruckus ICX 7000 series switches",
        "scope": "ansible"
    },
    "Collect facts from remote Ruckus ICX 7000 series switches": {
        "prefix": [
            "community.network.icx_facts",
            "Collect facts from remote Ruckus ICX 7000 series switches"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.icx_facts:",
            "    gather_subset:",
            "      - ${2:element}",
            "$0"
        ],
        "description": "Collect facts from remote Ruckus ICX 7000 series switches",
        "scope": "ansible"
    },
    "Manage Interface on Ruckus ICX 7000 series switches": {
        "prefix": [
            "community.network.icx_interface",
            "Manage Interface on Ruckus ICX 7000 series switches"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.icx_interface:",
            "    aggregate:",
            "      - ${2:element}",
            "    check_running_config: ${3|true,false|}",
            "    delay: ${4:10}",
            "    description: ${5:string}",
            "    enabled: ${6|true,false|}",
            "    name: ${7:string}",
            "    neighbors:",
            "      - ${8:element}",
            "    rx_rate: ${10:string}",
            "    speed: ${11:string}",
            "    state: ${12|present,absent,up,down|}",
            "    stp: ${13|false,true|}",
            "    tx_rate: ${14:string}",
            "$0"
        ],
        "description": "Manage Interface on Ruckus ICX 7000 series switches",
        "scope": "ansible"
    },
    "Manage Layer-3 interfaces on Ruckus ICX 7000 series switches": {
        "prefix": [
            "community.network.icx_l3_interface",
            "Manage Layer-3 interfaces on Ruckus ICX 7000 series switches"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.icx_l3_interface:",
            "    aggregate:",
            "      - ${2:element}",
            "    check_running_config: ${3|true,false|}",
            "    ipv4: ${4:string}",
            "    ipv6: ${5:string}",
            "    mode: ${6:string}",
            "    name: ${7:string}",
            "    replace: ${8:string}",
            "    secondary: ${9:string}",
            "    state: ${10|present,absent|}",
            "$0"
        ],
        "description": "Manage Layer-3 interfaces on Ruckus ICX 7000 series switches",
        "scope": "ansible"
    },
    "Manage link aggregation groups on Ruckus ICX 7000 series switches": {
        "prefix": [
            "community.network.icx_linkagg",
            "Manage link aggregation groups on Ruckus ICX 7000 series switches"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.icx_linkagg:",
            "    aggregate:",
            "      - ${2:element}",
            "    check_running_config: ${3|true,false|}",
            "    group: ${4:int}",
            "    members:",
            "      - ${5:element}",
            "    mode: ${6:string}",
            "    name: ${7:string}",
            "    purge: ${8|false,true|}",
            "    state: ${9|present,absent|}",
            "$0"
        ],
        "description": "Manage link aggregation groups on Ruckus ICX 7000 series switches",
        "scope": "ansible"
    },
    "Manage LLDP configuration on Ruckus ICX 7000 series switches": {
        "prefix": [
            "community.network.icx_lldp",
            "Manage LLDP configuration on Ruckus ICX 7000 series switches"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.icx_lldp:",
            "    check_running_config: ${2|true,false|}",
            "    interfaces:",
            "      - ${3:element}",
            "    state: ${4:string}",
            "$0"
        ],
        "description": "Manage LLDP configuration on Ruckus ICX 7000 series switches",
        "scope": "ansible"
    },
    "Manage logging on Ruckus ICX 7000 series switches": {
        "prefix": [
            "community.network.icx_logging",
            "Manage logging on Ruckus ICX 7000 series switches"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.icx_logging:",
            "    aggregate:",
            "      - ${2:element}",
            "    check_running_config: ${3|true,false|}",
            "    dest: ${4:string}",
            "    facility: ${5:string}",
            "    level:",
            "      - ${6:element}",
            "    name: ${7:string}",
            "    state: ${8|present,absent|}",
            "    udp_port: ${9:string}",
            "$0"
        ],
        "description": "Manage logging on Ruckus ICX 7000 series switches",
        "scope": "ansible"
    },
    "Tests reachability using ping from Ruckus ICX 7000 series switches": {
        "prefix": [
            "community.network.icx_ping",
            "Tests reachability using ping from Ruckus ICX 7000 series switches"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.icx_ping:",
            "    count: ${2:int}",
            "    dest: ${3:string}",
            "    size: ${4:int}",
            "    source: ${5:string}",
            "    state: ${6|present,absent|}",
            "    timeout: ${7:int}",
            "    ttl: ${8:int}",
            "    vrf: ${9:string}",
            "$0"
        ],
        "description": "Tests reachability using ping from Ruckus ICX 7000 series switches",
        "scope": "ansible"
    },
    "Manage static IP routes on Ruckus ICX 7000 series switches": {
        "prefix": [
            "community.network.icx_static_route",
            "Manage static IP routes on Ruckus ICX 7000 series switches"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.icx_static_route:",
            "    admin_distance: ${2:int}",
            "    aggregate:",
            "      - ${3:element}",
            "    check_running_config: ${4|true,false|}",
            "    mask: ${5:string}",
            "    next_hop: ${6:string}",
            "    prefix: ${7:string}",
            "    purge: ${8|false,true|}",
            "    state: ${9|present,absent|}",
            "$0"
        ],
        "description": "Manage static IP routes on Ruckus ICX 7000 series switches",
        "scope": "ansible"
    },
    "Manage the system attributes on Ruckus ICX 7000 series switches": {
        "prefix": [
            "community.network.icx_system",
            "Manage the system attributes on Ruckus ICX 7000 series switches"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.icx_system:",
            "    aaa_servers:",
            "      - ${2:element}",
            "    check_running_config: ${3|true,false|}",
            "    domain_name:",
            "      - ${4:element}",
            "    domain_search:",
            "      - ${5:element}",
            "    hostname: ${6:string}",
            "    name_servers:",
            "      - ${7:element}",
            "    state: ${8|present,absent|}",
            "$0"
        ],
        "description": "Manage the system attributes on Ruckus ICX 7000 series switches",
        "scope": "ansible"
    },
    "Manage the user accounts on Ruckus ICX 7000 series switches.": {
        "prefix": [
            "community.network.icx_user",
            "Manage the user accounts on Ruckus ICX 7000 series switches."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.icx_user:",
            "    access_time: ${2:string}",
            "    aggregate:",
            "      - ${3:element}",
            "    check_running_config: ${4|true,false|}",
            "    configured_password: ${5:string}",
            "    name: ${6:string}",
            "    nopassword: ${7|false,true|}",
            "    privilege: ${8:string}",
            "    purge: ${9|false,true|}",
            "    state: ${10|present,absent|}",
            "    update_password: ${11|always,on_create|}",
            "$0"
        ],
        "description": "Manage the user accounts on Ruckus ICX 7000 series switches.",
        "scope": "ansible"
    },
    "Manage VLANs on Ruckus ICX 7000 series switches": {
        "prefix": [
            "community.network.icx_vlan",
            "Manage VLANs on Ruckus ICX 7000 series switches"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.icx_vlan:",
            "    aggregate:",
            "      - ${2:element}",
            "    associated_interfaces:",
            "      - ${3:element}",
            "    associated_tagged:",
            "      - ${4:element}",
            "    check_running_config: ${5|true,false|}",
            "    delay: ${6:10}",
            "    ip_arp_inspection: ${8|false,true|}",
            "    ip_dhcp_snooping: ${9|false,true|}",
            "    name: ${10:string}",
            "    purge: ${11|false,true|}",
            "    state: ${12|present,absent|}",
            "    vlan_id: ${15:int}",
            "$0"
        ],
        "description": "Manage VLANs on Ruckus ICX 7000 series switches",
        "scope": "ansible"
    },
    "Manage the configuration database on an Ingate SBC.": {
        "prefix": [
            "community.network.ig_config",
            "Manage the configuration database on an Ingate SBC."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ig_config:",
            "    add: ${2|false,true|}",
            "    delete: ${5|false,true|}",
            "    download: ${6|false,true|}",
            "    factory: ${7|false,true|}",
            "    get: ${9|false,true|}",
            "    modify: ${10|false,true|}",
            "    no_response: ${11|false,true|}",
            "    return_rowid: ${13|false,true|}",
            "    revert: ${14|false,true|}",
            "    rowid: ${15:int}",
            "    store: ${16|false,true|}",
            "    store_download: ${17|false,true|}",
            "$0"
        ],
        "description": "Manage the configuration database on an Ingate SBC.",
        "scope": "ansible"
    },
    "Get unit information from an Ingate SBC.": {
        "prefix": [
            "community.network.ig_unit_information",
            "Get unit information from an Ingate SBC."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ig_unit_information:",
            "$0"
        ],
        "description": "Get unit information from an Ingate SBC.",
        "scope": "ansible"
    },
    "Manage IP addresses on an interface on Solaris/illumos systems": {
        "prefix": [
            "community.network.ipadm_addr",
            "Manage IP addresses on an interface on Solaris/illumos systems"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ipadm_addr:",
            "    temporary: ${6|false,true|}",
            "$0"
        ],
        "description": "Manage IP addresses on an interface on Solaris/illumos systems",
        "scope": "ansible"
    },
    "Manage IP address properties on Solaris/illumos systems.": {
        "prefix": [
            "community.network.ipadm_addrprop",
            "Manage IP address properties on Solaris/illumos systems."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ipadm_addrprop:",
            "    temporary: ${5|false,true|}",
            "$0"
        ],
        "description": "Manage IP address properties on Solaris/illumos systems.",
        "scope": "ansible"
    },
    "Manage IP interfaces  on Solaris/illumos systems.": {
        "prefix": [
            "community.network.ipadm_if",
            "Manage IP interfaces  on Solaris/illumos systems."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ipadm_if:",
            "    temporary: ${4|false,true|}",
            "$0"
        ],
        "description": "Manage IP interfaces  on Solaris/illumos systems.",
        "scope": "ansible"
    },
    "Manage IP interface properties on Solaris/illumos systems.": {
        "prefix": [
            "community.network.ipadm_ifprop",
            "Manage IP interface properties on Solaris/illumos systems."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ipadm_ifprop:",
            "    temporary: ${6|false,true|}",
            "$0"
        ],
        "description": "Manage IP interface properties on Solaris/illumos systems.",
        "scope": "ansible"
    },
    "Manage protocol properties on Solaris/illumos systems.": {
        "prefix": [
            "community.network.ipadm_prop",
            "Manage protocol properties on Solaris/illumos systems."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ipadm_prop:",
            "    temporary: ${5|false,true|}",
            "$0"
        ],
        "description": "Manage protocol properties on Solaris/illumos systems.",
        "scope": "ansible"
    },
    "Run arbitrary commands on Extreme IronWare devices": {
        "prefix": [
            "community.network.ironware_command",
            "Run arbitrary commands on Extreme IronWare devices"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ironware_command:",
            "    authorize: ${2|false,true|}",
            "$0"
        ],
        "description": "Run arbitrary commands on Extreme IronWare devices",
        "scope": "ansible"
    },
    "Manage configuration sections on Extreme Ironware devices": {
        "prefix": [
            "community.network.ironware_config",
            "Manage configuration sections on Extreme Ironware devices"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ironware_config:",
            "    authorize: ${3|false,true|}",
            "    backup: ${4|true,false|}",
            "$0"
        ],
        "description": "Manage configuration sections on Extreme Ironware devices",
        "scope": "ansible"
    },
    "Collect facts from devices running Extreme Ironware": {
        "prefix": [
            "community.network.ironware_facts",
            "Collect facts from devices running Extreme Ironware"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ironware_facts:",
            "    authorize: ${2|false,true|}",
            "$0"
        ],
        "description": "Collect facts from devices running Extreme Ironware",
        "scope": "ansible"
    },
    "Configure network interfaces using NCLU": {
        "prefix": [
            "community.network.nclu",
            "Configure network interfaces using NCLU"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.nclu:",
            "    abort: ${2|false,true|}",
            "    atomic: ${3|false,true|}",
            "    commit: ${5|false,true|}",
            "$0"
        ],
        "description": "Configure network interfaces using NCLU",
        "scope": "ansible"
    },
    "Manage network configuration data in Nokia Core and Radio networks": {
        "prefix": [
            "community.network.netact_cm_command",
            "Manage network configuration data in Nokia Core and Radio networks"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.netact_cm_command:",
            "    createBackupPlan: ${6|false,true|}",
            "$0"
        ],
        "description": "Manage network configuration data in Nokia Core and Radio networks",
        "scope": "ansible"
    },
    "Manage content switching actions": {
        "prefix": [
            "community.network.netscaler_cs_action",
            "Manage content switching actions"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.netscaler_cs_action:",
            "    nitro_pass: ${4:string}",
            "    nitro_protocol: ${5|http,https|}",
            "    nitro_user: ${7:string}",
            "    nsip: ${8:string}",
            "    save_config: ${9|true,false|}",
            "    state: ${10|present,absent|}",
            "    validate_certs: ${14|true,false|}",
            "$0"
        ],
        "description": "Manage content switching actions",
        "scope": "ansible"
    },
    "Manage content switching policy": {
        "prefix": [
            "community.network.netscaler_cs_policy",
            "Manage content switching policy"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.netscaler_cs_policy:",
            "    nitro_pass: ${4:string}",
            "    nitro_protocol: ${5|http,https|}",
            "    nitro_user: ${7:string}",
            "    nsip: ${8:string}",
            "    save_config: ${11|true,false|}",
            "    state: ${12|present,absent|}",
            "    validate_certs: ${14|true,false|}",
            "$0"
        ],
        "description": "Manage content switching policy",
        "scope": "ansible"
    },
    "Manage content switching vserver": {
        "prefix": [
            "community.network.netscaler_cs_vserver",
            "Manage content switching vserver"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.netscaler_cs_vserver:",
            "    authentication: ${3|false,true|}",
            "    authn401: ${5|false,true|}",
            "    cacheable: ${10|false,true|}",
            "    casesensitive: ${11|false,true|}",
            "    disabled: ${17|true,false|}",
            "    l2conn: ${28|false,true|}",
            "    nitro_pass: ${38:string}",
            "    nitro_protocol: ${39|http,https|}",
            "    nitro_user: ${41:string}",
            "    nsip: ${42:string}",
            "    pushmulticlients: ${48|false,true|}",
            "    rtspnat: ${54|false,true|}",
            "    save_config: ${55|true,false|}",
            "    state: ${64|present,absent|}",
            "    validate_certs: ${70|true,false|}",
            "$0"
        ],
        "description": "Manage content switching vserver",
        "scope": "ansible"
    },
    "Manage gslb service entities in Netscaler.": {
        "prefix": [
            "community.network.netscaler_gslb_service",
            "Manage gslb service entities in Netscaler."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.netscaler_gslb_service:",
            "    healthmonitor: ${10|false,true|}",
            "    nitro_pass: ${17:string}",
            "    nitro_protocol: ${18|http,https|}",
            "    nitro_user: ${20:string}",
            "    nsip: ${21:string}",
            "    save_config: ${25|true,false|}",
            "    state: ${32|present,absent|}",
            "    validate_certs: ${33|true,false|}",
            "$0"
        ],
        "description": "Manage gslb service entities in Netscaler.",
        "scope": "ansible"
    },
    "Manage gslb site entities in Netscaler.": {
        "prefix": [
            "community.network.netscaler_gslb_site",
            "Manage gslb site entities in Netscaler."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.netscaler_gslb_site:",
            "    nitro_pass: ${5:string}",
            "    nitro_protocol: ${6|http,https|}",
            "    nitro_user: ${8:string}",
            "    nsip: ${9:string}",
            "    save_config: ${14|true,false|}",
            "    state: ${19|present,absent|}",
            "    validate_certs: ${21|true,false|}",
            "$0"
        ],
        "description": "Manage gslb site entities in Netscaler.",
        "scope": "ansible"
    },
    "Configure gslb vserver entities in Netscaler.": {
        "prefix": [
            "community.network.netscaler_gslb_vserver",
            "Configure gslb vserver entities in Netscaler."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.netscaler_gslb_vserver:",
            "    disabled: ${6|false,true|}",
            "    nitro_pass: ${15:string}",
            "    nitro_protocol: ${16|http,https|}",
            "    nitro_user: ${18:string}",
            "    nsip: ${19:string}",
            "    save_config: ${23|true,false|}",
            "    state: ${31|present,absent|}",
            "    validate_certs: ${36|true,false|}",
            "$0"
        ],
        "description": "Configure gslb vserver entities in Netscaler.",
        "scope": "ansible"
    },
    "Manage load balancing monitors": {
        "prefix": [
            "community.network.netscaler_lb_monitor",
            "Manage load balancing monitors"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.netscaler_lb_monitor:",
            "    iptunnel: ${32|false,true|}",
            "    nitro_pass: ${42:string}",
            "    nitro_protocol: ${43|http,https|}",
            "    nitro_user: ${45:string}",
            "    nsip: ${46:string}",
            "    reverse: ${67|false,true|}",
            "    save_config: ${69|true,false|}",
            "    secure: ${73|false,true|}",
            "    state: ${83|enabled,disabled|}",
            "    storefrontacctservice: ${85|false,true|}",
            "    storefrontcheckbackendservices: ${86|false,true|}",
            "    tos: ${90|false,true|}",
            "    transparent: ${92|false,true|}",
            "    validate_certs: ${101|true,false|}",
            "    validatecred: ${102|false,true|}",
            "$0"
        ],
        "description": "Manage load balancing monitors",
        "scope": "ansible"
    },
    "Manage load balancing vserver configuration": {
        "prefix": [
            "community.network.netscaler_lb_vserver",
            "Manage load balancing vserver configuration"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.netscaler_lb_vserver:",
            "    authentication: ${3|false,true|}",
            "    authn401: ${5|false,true|}",
            "    bypassaaaa: ${10|false,true|}",
            "    cacheable: ${11|false,true|}",
            "    disabled: ${20|true,false|}",
            "    l2conn: ${33|false,true|}",
            "    nitro_pass: ${52:string}",
            "    nitro_protocol: ${53|http,https|}",
            "    nitro_user: ${55:string}",
            "    nsip: ${56:string}",
            "    pushmulticlients: ${66|false,true|}",
            "    recursionavailable: ${69|false,true|}",
            "    rtspnat: ${74|false,true|}",
            "    save_config: ${75|true,false|}",
            "    state: ${87|present,absent|}",
            "    validate_certs: ${94|true,false|}",
            "$0"
        ],
        "description": "Manage load balancing vserver configuration",
        "scope": "ansible"
    },
    "Issue Nitro API requests to a Netscaler instance.": {
        "prefix": [
            "community.network.netscaler_nitro_request",
            "Issue Nitro API requests to a Netscaler instance."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.netscaler_nitro_request:",
            "    validate_certs: ${18|true,false|}",
            "$0"
        ],
        "description": "Issue Nitro API requests to a Netscaler instance.",
        "scope": "ansible"
    },
    "Save Netscaler configuration.": {
        "prefix": [
            "community.network.netscaler_save_config",
            "Save Netscaler configuration."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.netscaler_save_config:",
            "    validate_certs: ${7|true,false|}",
            "$0"
        ],
        "description": "Save Netscaler configuration.",
        "scope": "ansible"
    },
    "Manage server configuration": {
        "prefix": [
            "community.network.netscaler_server",
            "Manage server configuration"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.netscaler_server:",
            "    disabled: ${4|false,true|}",
            "    graceful: ${7|false,true|}",
            "    ipv6address: ${9|false,true|}",
            "    nitro_pass: ${11:string}",
            "    nitro_protocol: ${12|http,https|}",
            "    nitro_user: ${14:string}",
            "    nsip: ${15:string}",
            "    save_config: ${16|true,false|}",
            "    state: ${17|present,absent|}",
            "    validate_certs: ${21|true,false|}",
            "$0"
        ],
        "description": "Manage server configuration",
        "scope": "ansible"
    },
    "Manage service configuration in Netscaler": {
        "prefix": [
            "community.network.netscaler_service",
            "Manage service configuration in Netscaler"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.netscaler_service:",
            "    accessdown: ${2|false,true|}",
            "    cacheable: ${4|false,true|}",
            "    cka: ${8|false,true|}",
            "    cmp: ${11|false,true|}",
            "    disabled: ${14|false,true|}",
            "    graceful: ${17|false,true|}",
            "    healthmonitor: ${19|true,false|}",
            "    nitro_pass: ${30:string}",
            "    nitro_protocol: ${31|http,https|}",
            "    nitro_user: ${33:string}",
            "    nsip: ${34:string}",
            "    rtspsessionidremap: ${39|false,true|}",
            "    save_config: ${40|true,false|}",
            "    sp: ${44|false,true|}",
            "    state: ${45|present,absent|}",
            "    tcpb: ${47|false,true|}",
            "    useproxyport: ${50|false,true|}",
            "    usip: ${51|false,true|}",
            "    validate_certs: ${52|true,false|}",
            "$0"
        ],
        "description": "Manage service configuration in Netscaler",
        "scope": "ansible"
    },
    "Manage service group configuration in Netscaler": {
        "prefix": [
            "community.network.netscaler_servicegroup",
            "Manage service group configuration in Netscaler"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.netscaler_servicegroup:",
            "    cacheable: ${4|false,true|}",
            "    cka: ${8|false,true|}",
            "    cmp: ${10|false,true|}",
            "    disabled: ${12|false,true|}",
            "    graceful: ${14|false,true|}",
            "    healthmonitor: ${15|false,true|}",
            "    nitro_pass: ${24:string}",
            "    nitro_protocol: ${25|http,https|}",
            "    nitro_user: ${27:string}",
            "    nsip: ${28:string}",
            "    pathmonitor: ${29|false,true|}",
            "    pathmonitorindv: ${30|false,true|}",
            "    rtspsessionidremap: ${31|false,true|}",
            "    save_config: ${32|true,false|}",
            "    sp: ${36|false,true|}",
            "    state: ${37|present,absent|}",
            "    tcpb: ${39|false,true|}",
            "    useproxyport: ${41|false,true|}",
            "    usip: ${42|false,true|}",
            "    validate_certs: ${43|true,false|}",
            "$0"
        ],
        "description": "Manage service group configuration in Netscaler",
        "scope": "ansible"
    },
    "Manage ssl certificate keys.": {
        "prefix": [
            "community.network.netscaler_ssl_certkey",
            "Manage ssl certificate keys."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.netscaler_ssl_certkey:",
            "    nitro_pass: ${7:string}",
            "    nitro_protocol: ${8|http,https|}",
            "    nitro_user: ${10:string}",
            "    nsip: ${12:string}",
            "    save_config: ${15|true,false|}",
            "    state: ${16|present,absent|}",
            "    validate_certs: ${17|true,false|}",
            "$0"
        ],
        "description": "Manage ssl certificate keys.",
        "scope": "ansible"
    },
    "Run commands on remote devices running Extreme Networks NOS": {
        "prefix": [
            "community.network.nos_command",
            "Run commands on remote devices running Extreme Networks NOS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.nos_command:",
            "$0"
        ],
        "description": "Run commands on remote devices running Extreme Networks NOS",
        "scope": "ansible"
    },
    "Manage Extreme Networks NOS configuration sections": {
        "prefix": [
            "community.network.nos_config",
            "Manage Extreme Networks NOS configuration sections"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.nos_config:",
            "    backup: ${3|true,false|}",
            "$0"
        ],
        "description": "Manage Extreme Networks NOS configuration sections",
        "scope": "ansible"
    },
    "Collect facts from devices running Extreme NOS": {
        "prefix": [
            "community.network.nos_facts",
            "Collect facts from devices running Extreme NOS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.nos_facts:",
            "$0"
        ],
        "description": "Collect facts from devices running Extreme NOS",
        "scope": "ansible"
    },
    "Manage Nuage VSP environments": {
        "prefix": [
            "community.network.nuage_vspk",
            "Manage Nuage VSP environments"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.nuage_vspk:",
            "$0"
        ],
        "description": "Manage Nuage VSP environments",
        "scope": "ansible"
    },
    "CPS operations on networking device running Openswitch (OPX)": {
        "prefix": [
            "community.network.opx_cps",
            "CPS operations on networking device running Openswitch (OPX)"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.opx_cps:",
            "    commit_event: ${4|true,false|}",
            "    db: ${5|true,false|}",
            "$0"
        ],
        "description": "CPS operations on networking device running Openswitch (OPX)",
        "scope": "ansible"
    },
    "Manage Ordnance configuration sections": {
        "prefix": [
            "community.network.ordnance_config",
            "Manage Ordnance configuration sections"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ordnance_config:",
            "    backup: ${3|true,false|}",
            "    defaults: ${6|true,false|}",
            "    save: ${12|true,false|}",
            "$0"
        ],
        "description": "Manage Ordnance configuration sections",
        "scope": "ansible"
    },
    "Collect facts from Ordnance Virtual Routers over SSH": {
        "prefix": [
            "community.network.ordnance_facts",
            "Collect facts from Ordnance Virtual Routers over SSH"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.ordnance_facts:",
            "$0"
        ],
        "description": "Collect facts from Ordnance Virtual Routers over SSH",
        "scope": "ansible"
    },
    "CLI command to create/delete access-list": {
        "prefix": [
            "community.network.pn_access_list",
            "CLI command to create/delete access-list"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_access_list:",
            "    pn_cliswitch: ${2:string}",
            "    pn_name: ${3:string}",
            "$0"
        ],
        "description": "CLI command to create/delete access-list",
        "scope": "ansible"
    },
    "CLI command to add/remove access-list-ip": {
        "prefix": [
            "community.network.pn_access_list_ip",
            "CLI command to add/remove access-list-ip"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_access_list_ip:",
            "    pn_cliswitch: ${2:string}",
            "    pn_ip: ${3:::}",
            "    pn_name: ${4:string}",
            "$0"
        ],
        "description": "CLI command to add/remove access-list-ip",
        "scope": "ansible"
    },
    "CLI command to modify admin-service": {
        "prefix": [
            "community.network.pn_admin_service",
            "CLI command to modify admin-service"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_admin_service:",
            "    pn__if: ${2:string}",
            "    pn_cliswitch: ${3:string}",
            "    pn_icmp: ${4|false,true|}",
            "    pn_net_api: ${5|false,true|}",
            "    pn_nfs: ${6|false,true|}",
            "    pn_snmp: ${7|false,true|}",
            "    pn_ssh: ${8|false,true|}",
            "    pn_web: ${9|false,true|}",
            "    pn_web_log: ${10|false,true|}",
            "    pn_web_port: ${11:string}",
            "    pn_web_ssl: ${12|false,true|}",
            "    pn_web_ssl_port: ${13:string}",
            "    state: ${14:string}",
            "$0"
        ],
        "description": "CLI command to modify admin-service",
        "scope": "ansible"
    },
    "CLI command to modify admin-session-timeout": {
        "prefix": [
            "community.network.pn_admin_session_timeout",
            "CLI command to modify admin-session-timeout"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_admin_session_timeout:",
            "    pn_cliswitch: ${2:string}",
            "    pn_timeout: ${3:string}",
            "    state: ${4:string}",
            "$0"
        ],
        "description": "CLI command to modify admin-session-timeout",
        "scope": "ansible"
    },
    "CLI command to create/modify/delete admin-syslog": {
        "prefix": [
            "community.network.pn_admin_syslog",
            "CLI command to create/modify/delete admin-syslog"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_admin_syslog:",
            "    pn_cliswitch: ${2:string}",
            "    pn_host: ${3:string}",
            "    pn_message_format: ${4:string}",
            "    pn_name: ${5:string}",
            "    pn_port: ${6:string}",
            "    pn_scope: ${7:string}",
            "    pn_transport: ${8|udp,tcp-tls|}",
            "    state: ${9:string}",
            "$0"
        ],
        "description": "CLI command to create/modify/delete admin-syslog",
        "scope": "ansible"
    },
    "CLI command to modify connection-stats-settings": {
        "prefix": [
            "community.network.pn_connection_stats_settings",
            "CLI command to modify connection-stats-settings"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_connection_stats_settings:",
            "    pn_client_server_stats_log_disk_space: ${2:string}",
            "    pn_client_server_stats_log_enable: ${3|false,true|}",
            "    pn_client_server_stats_log_interval: ${4:string}",
            "    pn_client_server_stats_max_memory: ${5:string}",
            "    pn_cliswitch: ${6:string}",
            "    pn_connection_backup_enable: ${7|false,true|}",
            "    pn_connection_backup_interval: ${8:string}",
            "    pn_connection_max_memory: ${9:string}",
            "    pn_connection_stats_log_disk_space: ${10:string}",
            "    pn_connection_stats_log_enable: ${11|false,true|}",
            "    pn_connection_stats_log_interval: ${12:string}",
            "    pn_connection_stats_max_memory: ${13:string}",
            "    pn_enable: ${14|false,true|}",
            "    pn_fabric_connection_backup_enable: ${15|false,true|}",
            "    pn_fabric_connection_backup_interval: ${16:string}",
            "    pn_fabric_connection_max_memory: ${17:string}",
            "    pn_service_stat_max_memory: ${18:string}",
            "    state: ${19:string}",
            "$0"
        ],
        "description": "CLI command to modify connection-stats-settings",
        "scope": "ansible"
    },
    "CLI command to create/modify/delete cpu-class": {
        "prefix": [
            "community.network.pn_cpu_class",
            "CLI command to create/modify/delete cpu-class"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_cpu_class:",
            "    pn_cliswitch: ${2:string}",
            "    pn_hog_protect: ${3:string}",
            "    pn_name: ${4:string}",
            "    pn_rate_limit: ${5:string}",
            "    state: ${7:string}",
            "$0"
        ],
        "description": "CLI command to create/modify/delete cpu-class",
        "scope": "ansible"
    },
    "CLI command to modify cpu-mgmt-class": {
        "prefix": [
            "community.network.pn_cpu_mgmt_class",
            "CLI command to modify cpu-mgmt-class"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_cpu_mgmt_class:",
            "    pn_burst_size: ${2:string}",
            "    pn_cliswitch: ${3:string}",
            "    pn_name: ${4:string}",
            "    pn_rate_limit: ${5:string}",
            "    state: ${6:string}",
            "$0"
        ],
        "description": "CLI command to modify cpu-mgmt-class",
        "scope": "ansible"
    },
    "CLI command to create/modify/delete dhcp-filter": {
        "prefix": [
            "community.network.pn_dhcp_filter",
            "CLI command to create/modify/delete dhcp-filter"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_dhcp_filter:",
            "    pn_cliswitch: ${2:string}",
            "    pn_name: ${3:string}",
            "    pn_trusted_ports: ${4:string}",
            "    state: ${5:string}",
            "$0"
        ],
        "description": "CLI command to create/modify/delete dhcp-filter",
        "scope": "ansible"
    },
    "CLI command to create/delete dscp-map": {
        "prefix": [
            "community.network.pn_dscp_map",
            "CLI command to create/delete dscp-map"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_dscp_map:",
            "    pn_cliswitch: ${2:string}",
            "    pn_name: ${3:string}",
            "    state: ${5:string}",
            "$0"
        ],
        "description": "CLI command to create/delete dscp-map",
        "scope": "ansible"
    },
    "CLI command to modify dscp-map-pri-map": {
        "prefix": [
            "community.network.pn_dscp_map_pri_map",
            "CLI command to modify dscp-map-pri-map"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_dscp_map_pri_map:",
            "    pn_cliswitch: ${2:string}",
            "    pn_dsmap: ${3:string}",
            "    pn_name: ${4:string}",
            "    pn_pri: ${5:string}",
            "    state: ${6:string}",
            "$0"
        ],
        "description": "CLI command to modify dscp-map-pri-map",
        "scope": "ansible"
    },
    "CLI command to modify fabric-local": {
        "prefix": [
            "community.network.pn_fabric_local",
            "CLI command to modify fabric-local"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_fabric_local:",
            "    pn_cliswitch: ${2:string}",
            "    pn_vlan: ${6:string}",
            "    state: ${7|update|}",
            "$0"
        ],
        "description": "CLI command to modify fabric-local",
        "scope": "ansible"
    },
    "CLI command to modify igmp-snooping": {
        "prefix": [
            "community.network.pn_igmp_snooping",
            "CLI command to modify igmp-snooping"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_igmp_snooping:",
            "    pn_cliswitch: ${2:string}",
            "    pn_enable: ${3|false,true|}",
            "    pn_enable_vlans: ${4:string}",
            "    pn_igmpv2_vlans: ${5:string}",
            "    pn_igmpv3_vlans: ${6:string}",
            "    pn_no_snoop_linklocal_vlans: ${7:string}",
            "    pn_query_interval: ${8:string}",
            "    pn_query_max_response_time: ${9:string}",
            "    pn_snoop_linklocal_vlans: ${11:string}",
            "    pn_vxlan: ${12|false,true|}",
            "    state: ${13:string}",
            "$0"
        ],
        "description": "CLI command to modify igmp-snooping",
        "scope": "ansible"
    },
    "CLI command to create/modify/delete ipv6security-raguard": {
        "prefix": [
            "community.network.pn_ipv6security_raguard",
            "CLI command to create/modify/delete ipv6security-raguard"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_ipv6security_raguard:",
            "    pn_access_list: ${2:string}",
            "    pn_cliswitch: ${3:string}",
            "    pn_device: ${4:string}",
            "    pn_name: ${5:string}",
            "    pn_prefix_list: ${6:string}",
            "    pn_router_priority: ${7:string}",
            "    state: ${8|present,update,absent|}",
            "$0"
        ],
        "description": "CLI command to create/modify/delete ipv6security-raguard",
        "scope": "ansible"
    },
    "CLI command to add/remove ipv6security-raguard-port": {
        "prefix": [
            "community.network.pn_ipv6security_raguard_port",
            "CLI command to add/remove ipv6security-raguard-port"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_ipv6security_raguard_port:",
            "    pn_cliswitch: ${2:string}",
            "    pn_name: ${3:string}",
            "    pn_ports: ${4:string}",
            "    state: ${5|present,absent|}",
            "$0"
        ],
        "description": "CLI command to add/remove ipv6security-raguard-port",
        "scope": "ansible"
    },
    "CLI command to add/remove ipv6security-raguard-vlan": {
        "prefix": [
            "community.network.pn_ipv6security_raguard_vlan",
            "CLI command to add/remove ipv6security-raguard-vlan"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_ipv6security_raguard_vlan:",
            "    pn_cliswitch: ${2:string}",
            "    pn_name: ${3:string}",
            "    pn_vlans: ${4:string}",
            "    state: ${5|present,absent|}",
            "$0"
        ],
        "description": "CLI command to add/remove ipv6security-raguard-vlan",
        "scope": "ansible"
    },
    "CLI command to create/delete an audit exception": {
        "prefix": [
            "community.network.pn_log_audit_exception",
            "CLI command to create/delete an audit exception"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_log_audit_exception:",
            "    pn_access: ${2:string}",
            "    pn_audit_type: ${3:string}",
            "    pn_cliswitch: ${4:string}",
            "    pn_pattern: ${5:string}",
            "    pn_scope: ${6:string}",
            "    state: ${7|present,absent|}",
            "$0"
        ],
        "description": "CLI command to create/delete an audit exception",
        "scope": "ansible"
    },
    "CLI command to modify port-config": {
        "prefix": [
            "community.network.pn_port_config",
            "CLI command to modify port-config"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_port_config:",
            "    pn_allowed_tpid: ${2:string}",
            "    pn_autoneg: ${3|false,true|}",
            "    pn_cliswitch: ${4:string}",
            "    pn_crc_check_enable: ${5|false,true|}",
            "    pn_defer_bringup: ${6|false,true|}",
            "    pn_description: ${7:string}",
            "    pn_dscp_map: ${8:string}",
            "    pn_edge_switch: ${9|false,true|}",
            "    pn_egress_rate_limit: ${10:string}",
            "    pn_enable: ${11|false,true|}",
            "    pn_fabric_guard: ${13|false,true|}",
            "    pn_host_enable: ${14|false,true|}",
            "    pn_intf: ${15:string}",
            "    pn_jumbo: ${16|false,true|}",
            "    pn_lacp_priority: ${17:string}",
            "    pn_local_switching: ${18|false,true|}",
            "    pn_loop_vlans: ${19:string}",
            "    pn_loopback: ${20|false,true|}",
            "    pn_mirror_only: ${21|false,true|}",
            "    pn_pause: ${22|false,true|}",
            "    pn_port: ${23:string}",
            "    pn_port_mac_address: ${24:string}",
            "    pn_reflect: ${25|false,true|}",
            "    pn_routing: ${26|false,true|}",
            "    pn_send_port: ${27:string}",
            "    pn_vxlan_termination: ${29|false,true|}",
            "    state: ${30:string}",
            "$0"
        ],
        "description": "CLI command to modify port-config",
        "scope": "ansible"
    },
    "CLI command to modify port-cos-bw": {
        "prefix": [
            "community.network.pn_port_cos_bw",
            "CLI command to modify port-cos-bw"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_port_cos_bw:",
            "    pn_cliswitch: ${2:string}",
            "    pn_cos: ${3:string}",
            "    pn_max_bw_limit: ${4:string}",
            "    pn_min_bw_guarantee: ${5:string}",
            "    pn_port: ${6:string}",
            "    pn_weight: ${7:string}",
            "    state: ${8:string}",
            "$0"
        ],
        "description": "CLI command to modify port-cos-bw",
        "scope": "ansible"
    },
    "CLI command to modify port-cos-rate-setting": {
        "prefix": [
            "community.network.pn_port_cos_rate_setting",
            "CLI command to modify port-cos-rate-setting"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_port_cos_rate_setting:",
            "    pn_cliswitch: ${2:string}",
            "    pn_cos0_rate: ${3:string}",
            "    pn_cos1_rate: ${4:string}",
            "    pn_cos2_rate: ${5:string}",
            "    pn_cos3_rate: ${6:string}",
            "    pn_cos4_rate: ${7:string}",
            "    pn_cos5_rate: ${8:string}",
            "    pn_cos6_rate: ${9:string}",
            "    pn_cos7_rate: ${10:string}",
            "    pn_port: ${11:string}",
            "    state: ${12:string}",
            "$0"
        ],
        "description": "CLI command to modify port-cos-rate-setting",
        "scope": "ansible"
    },
    "CLI command to create/delete prefix-list": {
        "prefix": [
            "community.network.pn_prefix_list",
            "CLI command to create/delete prefix-list"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_prefix_list:",
            "    pn_cliswitch: ${2:string}",
            "    pn_name: ${3:string}",
            "    pn_scope: ${4:string}",
            "    state: ${5|present,absent|}",
            "$0"
        ],
        "description": "CLI command to create/delete prefix-list",
        "scope": "ansible"
    },
    "CLI command to add/remove prefix-list-network": {
        "prefix": [
            "community.network.pn_prefix_list_network",
            "CLI command to add/remove prefix-list-network"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_prefix_list_network:",
            "    pn_cliswitch: ${2:string}",
            "    pn_name: ${3:string}",
            "    pn_netmask: ${4:string}",
            "    pn_network: ${5:string}",
            "    state: ${6:string}",
            "$0"
        ],
        "description": "CLI command to add/remove prefix-list-network",
        "scope": "ansible"
    },
    "CLI command to create/delete/modify role": {
        "prefix": [
            "community.network.pn_role",
            "CLI command to create/delete/modify role"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_role:",
            "    pn_access: ${2:string}",
            "    pn_cliswitch: ${3:string}",
            "    pn_delete_from_users: ${4|false,true|}",
            "    pn_name: ${5:string}",
            "    pn_running_config: ${6|false,true|}",
            "    pn_scope: ${7:string}",
            "    pn_shell: ${8|false,true|}",
            "    pn_sudo: ${9|false,true|}",
            "    state: ${10:string}",
            "$0"
        ],
        "description": "CLI command to create/delete/modify role",
        "scope": "ansible"
    },
    "CLI command to create/modify/delete snmp-community": {
        "prefix": [
            "community.network.pn_snmp_community",
            "CLI command to create/modify/delete snmp-community"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_snmp_community:",
            "    pn_community_string: ${3:string}",
            "    pn_community_type: ${4:string}",
            "    state: ${5:string}",
            "$0"
        ],
        "description": "CLI command to create/modify/delete snmp-community",
        "scope": "ansible"
    },
    "CLI command to create/delete snmp-trap-sink": {
        "prefix": [
            "community.network.pn_snmp_trap_sink",
            "CLI command to create/delete snmp-trap-sink"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_snmp_trap_sink:",
            "    pn_cliswitch: ${2:string}",
            "    pn_community: ${3:string}",
            "    pn_dest_host: ${4:string}",
            "    pn_dest_port: ${5:162}",
            "    pn_type: ${6|TRAP_TYPE_V2C_TRAP,TRAP_TYPE_V1_TRAP,TRAP_TYPE_V2_INFORM|}",
            "    state: ${7:string}",
            "$0"
        ],
        "description": "CLI command to create/delete snmp-trap-sink",
        "scope": "ansible"
    },
    "CLI command to create/modify/delete snmp-vacm": {
        "prefix": [
            "community.network.pn_snmp_vacm",
            "CLI command to create/modify/delete snmp-vacm"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_snmp_vacm:",
            "    pn_auth: ${2|false,true|}",
            "    pn_cliswitch: ${3:string}",
            "    pn_oid_restrict: ${4:string}",
            "    pn_priv: ${5|false,true|}",
            "    pn_user_name: ${6:string}",
            "    pn_user_type: ${7:string}",
            "    state: ${8:string}",
            "$0"
        ],
        "description": "CLI command to create/modify/delete snmp-vacm",
        "scope": "ansible"
    },
    "CLI command to modify stp": {
        "prefix": [
            "community.network.pn_stp",
            "CLI command to modify stp"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_stp:",
            "    pn_bpdus_bridge_ports: ${2|false,true|}",
            "    pn_bridge_id: ${3:string}",
            "    pn_bridge_priority: ${4:32768}",
            "    pn_cliswitch: ${5:string}",
            "    pn_enable: ${6|false,true|}",
            "    pn_forwarding_delay: ${7:15}",
            "    pn_hello_time: ${8:2}",
            "    pn_max_age: ${9:20}",
            "    pn_mst_config_name: ${10:string}",
            "    pn_mst_max_hops: ${11:20}",
            "    pn_root_guard_wait_time: ${12:20}",
            "    pn_stp_mode: ${13:string}",
            "    state: ${14:string}",
            "$0"
        ],
        "description": "CLI command to modify stp",
        "scope": "ansible"
    },
    "CLI command to modify stp-port.": {
        "prefix": [
            "community.network.pn_stp_port",
            "CLI command to modify stp-port."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_stp_port:",
            "    pn_block: ${2|false,true|}",
            "    pn_bpdu_guard: ${3|false,true|}",
            "    pn_cliswitch: ${4:string}",
            "    pn_cost: ${5:2000}",
            "    pn_edge: ${6|false,true|}",
            "    pn_filter: ${7|false,true|}",
            "    pn_port: ${8:string}",
            "    pn_priority: ${9:128}",
            "    pn_root_guard: ${10|false,true|}",
            "    state: ${11:string}",
            "$0"
        ],
        "description": "CLI command to modify stp-port.",
        "scope": "ansible"
    },
    "CLI command to modify switch-setup": {
        "prefix": [
            "community.network.pn_switch_setup",
            "CLI command to modify switch-setup"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_switch_setup:",
            "    pn_analytics_store: ${2:string}",
            "    pn_banner: ${3:string}",
            "    pn_cliswitch: ${4:string}",
            "    pn_date: ${5:string}",
            "    pn_dns_ip: ${6:string}",
            "    pn_dns_secondary_ip: ${7:string}",
            "    pn_domain_name: ${8:string}",
            "    pn_enable_host_ports: ${9|false,true|}",
            "    pn_eula_accepted: ${10:string}",
            "    pn_eula_timestamp: ${11:string}",
            "    pn_force: ${12|false,true|}",
            "    pn_gateway_ip: ${13:string}",
            "    pn_gateway_ip6: ${14:string}",
            "    pn_in_band_ip: ${15:string}",
            "    pn_in_band_ip6: ${16:string}",
            "    pn_in_band_ip6_assign: ${17:string}",
            "    pn_in_band_netmask: ${18:string}",
            "    pn_in_band_netmask_ip6: ${19:string}",
            "    pn_loopback_ip: ${20:string}",
            "    pn_loopback_ip6: ${21:string}",
            "    pn_mgmt_ip: ${22:string}",
            "    pn_mgmt_ip6: ${23:string}",
            "    pn_mgmt_ip_assignment: ${25:string}",
            "    pn_mgmt_netmask: ${26:string}",
            "    pn_mgmt_netmask_ip6: ${27:string}",
            "    pn_motd: ${28:string}",
            "    pn_ntp_secondary_server: ${29:string}",
            "    pn_ntp_server: ${30:string}",
            "    pn_password: ${31:string}",
            "    pn_switch_name: ${32:string}",
            "    pn_timezone: ${33:string}",
            "    state: ${34:string}",
            "$0"
        ],
        "description": "CLI command to modify switch-setup",
        "scope": "ansible"
    },
    "CLI command to create/modify/delete user": {
        "prefix": [
            "community.network.pn_user",
            "CLI command to create/modify/delete user"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_user:",
            "    pn_cliswitch: ${2:string}",
            "    pn_initial_role: ${3:string}",
            "    pn_name: ${4:string}",
            "    pn_password: ${5:string}",
            "    pn_scope: ${6:string}",
            "    state: ${7:string}",
            "$0"
        ],
        "description": "CLI command to create/modify/delete user",
        "scope": "ansible"
    },
    "CLI command to modify vflow-table-profile": {
        "prefix": [
            "community.network.pn_vflow_table_profile",
            "CLI command to modify vflow-table-profile"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_vflow_table_profile:",
            "    pn_cliswitch: ${2:string}",
            "    pn_enable: ${3|false,true|}",
            "    pn_hw_tbl: ${4:string}",
            "    pn_profile: ${5:string}",
            "    state: ${6:string}",
            "$0"
        ],
        "description": "CLI command to modify vflow-table-profile",
        "scope": "ansible"
    },
    "CLI command to add/modify/remove vrouter-bgp": {
        "prefix": [
            "community.network.pn_vrouter_bgp",
            "CLI command to add/modify/remove vrouter-bgp"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_vrouter_bgp:",
            "    pn_advertisement_interval: ${2:string}",
            "    pn_allowas_in: ${3|false,true|}",
            "    pn_bfd: ${4|false,true|}",
            "    pn_bfd_multihop: ${5|false,true|}",
            "    pn_cliswitch: ${6:string}",
            "    pn_connect_retry_interval: ${7:string}",
            "    pn_default_originate: ${8|false,true|}",
            "    pn_ebgp_multihop: ${9:string}",
            "    pn_interface: ${10:string}",
            "    pn_max_prefix: ${11:string}",
            "    pn_max_prefix_warn_only: ${12|false,true|}",
            "    pn_neighbor: ${14:string}",
            "    pn_neighbor_holdtime: ${15:string}",
            "    pn_neighbor_keepalive_interval: ${16:string}",
            "    pn_next_hop_self: ${17|false,true|}",
            "    pn_no_route_map_in: ${18:string}",
            "    pn_no_route_map_out: ${19:string}",
            "    pn_override_capability: ${20|false,true|}",
            "    pn_password: ${21:string}",
            "    pn_prefix_list_in: ${22:string}",
            "    pn_prefix_list_out: ${23:string}",
            "    pn_remote_as: ${24:string}",
            "    pn_route_map_in: ${25:string}",
            "    pn_route_map_out: ${26:string}",
            "    pn_route_reflector_client: ${27|false,true|}",
            "    pn_send_community: ${28|false,true|}",
            "    pn_soft_reconfig_inbound: ${29|false,true|}",
            "    pn_update_source: ${30:string}",
            "    pn_vrouter_name: ${31:string}",
            "    state: ${33|present,absent,update|}",
            "$0"
        ],
        "description": "CLI command to add/modify/remove vrouter-bgp",
        "scope": "ansible"
    },
    "CLI command to add/remove vrouter-bgp-network": {
        "prefix": [
            "community.network.pn_vrouter_bgp_network",
            "CLI command to add/remove vrouter-bgp-network"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_vrouter_bgp_network:",
            "    pn_cliswitch: ${2:string}",
            "    pn_netmask: ${3:string}",
            "    pn_network: ${4:string}",
            "    pn_vrouter_name: ${5:string}",
            "    state: ${6:string}",
            "$0"
        ],
        "description": "CLI command to add/remove vrouter-bgp-network",
        "scope": "ansible"
    },
    "CLI command to add/remove vrouter-interface-ip": {
        "prefix": [
            "community.network.pn_vrouter_interface_ip",
            "CLI command to add/remove vrouter-interface-ip"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_vrouter_interface_ip:",
            "    pn_bd: ${2:string}",
            "    pn_cliswitch: ${3:string}",
            "    pn_ip: ${4:string}",
            "    pn_netmask: ${5:string}",
            "    pn_nic: ${6:string}",
            "    pn_vnet: ${7:string}",
            "    pn_vrouter_name: ${8:string}",
            "    state: ${9:string}",
            "$0"
        ],
        "description": "CLI command to add/remove vrouter-interface-ip",
        "scope": "ansible"
    },
    "CLI command to add/remove vrouter-loopback-interface": {
        "prefix": [
            "community.network.pn_vrouter_loopback_interface",
            "CLI command to add/remove vrouter-loopback-interface"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_vrouter_loopback_interface:",
            "    pn_cliswitch: ${2:string}",
            "    pn_index: ${3:string}",
            "    pn_ip: ${4:string}",
            "    pn_vrouter_name: ${5:string}",
            "    state: ${6|present,absent|}",
            "$0"
        ],
        "description": "CLI command to add/remove vrouter-loopback-interface",
        "scope": "ansible"
    },
    "CLI command to add/remove vrouter-ospf": {
        "prefix": [
            "community.network.pn_vrouter_ospf",
            "CLI command to add/remove vrouter-ospf"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_vrouter_ospf:",
            "    pn_cliswitch: ${2:string}",
            "    pn_netmask: ${3:string}",
            "    pn_network: ${4:string}",
            "    pn_ospf_area: ${5:string}",
            "    pn_vrouter_name: ${6:string}",
            "    state: ${7|present,absent|}",
            "$0"
        ],
        "description": "CLI command to add/remove vrouter-ospf",
        "scope": "ansible"
    },
    "CLI command to add/remove vrouter-ospf6": {
        "prefix": [
            "community.network.pn_vrouter_ospf6",
            "CLI command to add/remove vrouter-ospf6"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_vrouter_ospf6:",
            "    pn_cliswitch: ${2:string}",
            "    pn_nic: ${3:string}",
            "    pn_ospf6_area: ${4:string}",
            "    pn_vrouter_name: ${5:string}",
            "    state: ${6:string}",
            "$0"
        ],
        "description": "CLI command to add/remove vrouter-ospf6",
        "scope": "ansible"
    },
    "CLI command to add/remove vrouter-packet-relay": {
        "prefix": [
            "community.network.pn_vrouter_packet_relay",
            "CLI command to add/remove vrouter-packet-relay"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_vrouter_packet_relay:",
            "    pn_cliswitch: ${2:string}",
            "    pn_forward_ip: ${3:string}",
            "    pn_forward_proto: ${4|dhcp|}",
            "    pn_nic: ${5:string}",
            "    pn_vrouter_name: ${6:string}",
            "    state: ${7|present,absent|}",
            "$0"
        ],
        "description": "CLI command to add/remove vrouter-packet-relay",
        "scope": "ansible"
    },
    "CLI command to modify vrouter-pim-config": {
        "prefix": [
            "community.network.pn_vrouter_pim_config",
            "CLI command to modify vrouter-pim-config"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_vrouter_pim_config:",
            "    pn_cliswitch: ${2:string}",
            "    pn_hello_interval: ${3:string}",
            "    pn_querier_timeout: ${4:string}",
            "    pn_query_interval: ${5:string}",
            "    pn_vrouter_name: ${6:string}",
            "    state: ${7:string}",
            "$0"
        ],
        "description": "CLI command to modify vrouter-pim-config",
        "scope": "ansible"
    },
    "CLI command to create/delete vtep": {
        "prefix": [
            "community.network.pn_vtep",
            "CLI command to create/delete vtep"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.pn_vtep:",
            "    pn_cliswitch: ${2:string}",
            "    pn_ip: ${3:string}",
            "    pn_location: ${4:string}",
            "    pn_name: ${5:string}",
            "    pn_switch_in_cluster: ${6|true,false|}",
            "    pn_virtual_ip: ${7:string}",
            "    pn_vrouter_name: ${8:string}",
            "    state: ${9|present,absent|}",
            "$0"
        ],
        "description": "CLI command to create/delete vtep",
        "scope": "ansible"
    },
    "Run commands on remote devices running Extreme Networks SLX-OS": {
        "prefix": [
            "community.network.slxos_command",
            "Run commands on remote devices running Extreme Networks SLX-OS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.slxos_command:",
            "$0"
        ],
        "description": "Run commands on remote devices running Extreme Networks SLX-OS",
        "scope": "ansible"
    },
    "Manage Extreme Networks SLX-OS configuration sections": {
        "prefix": [
            "community.network.slxos_config",
            "Manage Extreme Networks SLX-OS configuration sections"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.slxos_config:",
            "    backup: ${3|true,false|}",
            "    defaults: ${6|true,false|}",
            "$0"
        ],
        "description": "Manage Extreme Networks SLX-OS configuration sections",
        "scope": "ansible"
    },
    "Collect facts from devices running Extreme SLX-OS": {
        "prefix": [
            "community.network.slxos_facts",
            "Collect facts from devices running Extreme SLX-OS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.slxos_facts:",
            "$0"
        ],
        "description": "Collect facts from devices running Extreme SLX-OS",
        "scope": "ansible"
    },
    "Manage Interfaces on Extreme SLX-OS network devices": {
        "prefix": [
            "community.network.slxos_interface",
            "Manage Interfaces on Extreme SLX-OS network devices"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.slxos_interface:",
            "    enabled: ${5|true,false|}",
            "$0"
        ],
        "description": "Manage Interfaces on Extreme SLX-OS network devices",
        "scope": "ansible"
    },
    "Manage Layer-2 interface on Extreme Networks SLX-OS devices.": {
        "prefix": [
            "community.network.slxos_l2_interface",
            "Manage Layer-2 interface on Extreme Networks SLX-OS devices."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.slxos_l2_interface:",
            "$0"
        ],
        "description": "Manage Layer-2 interface on Extreme Networks SLX-OS devices.",
        "scope": "ansible"
    },
    "Manage L3 interfaces on Extreme Networks SLX-OS network devices.": {
        "prefix": [
            "community.network.slxos_l3_interface",
            "Manage L3 interfaces on Extreme Networks SLX-OS network devices."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.slxos_l3_interface:",
            "$0"
        ],
        "description": "Manage L3 interfaces on Extreme Networks SLX-OS network devices.",
        "scope": "ansible"
    },
    "Manage link aggregation groups on Extreme Networks SLX-OS network devices": {
        "prefix": [
            "community.network.slxos_linkagg",
            "Manage link aggregation groups on Extreme Networks SLX-OS network devices"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.slxos_linkagg:",
            "    purge: ${6|false,true|}",
            "$0"
        ],
        "description": "Manage link aggregation groups on Extreme Networks SLX-OS network devices",
        "scope": "ansible"
    },
    "Manage LLDP configuration on Extreme Networks SLX-OS network devices.": {
        "prefix": [
            "community.network.slxos_lldp",
            "Manage LLDP configuration on Extreme Networks SLX-OS network devices."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.slxos_lldp:",
            "$0"
        ],
        "description": "Manage LLDP configuration on Extreme Networks SLX-OS network devices.",
        "scope": "ansible"
    },
    "Manage VLANs on Extreme Networks SLX-OS network devices": {
        "prefix": [
            "community.network.slxos_vlan",
            "Manage VLANs on Extreme Networks SLX-OS network devices"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.slxos_vlan:",
            "    purge: ${6|false,true|}",
            "$0"
        ],
        "description": "Manage VLANs on Extreme Networks SLX-OS network devices",
        "scope": "ansible"
    },
    "Run commands on remote devices running Nokia SR OS": {
        "prefix": [
            "community.network.sros_command",
            "Run commands on remote devices running Nokia SR OS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.sros_command:",
            "$0"
        ],
        "description": "Run commands on remote devices running Nokia SR OS",
        "scope": "ansible"
    },
    "Manage Nokia SR OS device configuration": {
        "prefix": [
            "community.network.sros_config",
            "Manage Nokia SR OS device configuration"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.sros_config:",
            "    backup: ${3|true,false|}",
            "    defaults: ${7|true,false|}",
            "    force: ${8|false,true|}",
            "    save: ${13|true,false|}",
            "$0"
        ],
        "description": "Manage Nokia SR OS device configuration",
        "scope": "ansible"
    },
    "Configure Nokia SR OS rollback": {
        "prefix": [
            "community.network.sros_rollback",
            "Configure Nokia SR OS rollback"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.sros_rollback:",
            "$0"
        ],
        "description": "Configure Nokia SR OS rollback",
        "scope": "ansible"
    },
    "Commits pending configuration changes on Radware devices": {
        "prefix": [
            "community.network.vdirect_commit",
            "Commits pending configuration changes on Radware devices"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.vdirect_commit:",
            "    apply: ${2|true,false|}",
            "    save: ${4|true,false|}",
            "    sync: ${5|true,false|}",
            "    validate_certs: ${6|true,false|}",
            "    vdirect_use_ssl: ${13|true,false|}",
            "    vdirect_wait: ${15|true,false|}",
            "$0"
        ],
        "description": "Commits pending configuration changes on Radware devices",
        "scope": "ansible"
    },
    "Uploads a new or updates an existing runnable file into Radware vDirect server": {
        "prefix": [
            "community.network.vdirect_file",
            "Uploads a new or updates an existing runnable file into Radware vDirect server"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.vdirect_file:",
            "    validate_certs: ${3|true,false|}",
            "    vdirect_use_ssl: ${10|true,false|}",
            "    vdirect_wait: ${12|true,false|}",
            "$0"
        ],
        "description": "Uploads a new or updates an existing runnable file into Radware vDirect server",
        "scope": "ansible"
    },
    "Runs templates and workflow actions in Radware vDirect server": {
        "prefix": [
            "community.network.vdirect_runnable",
            "Runs templates and workflow actions in Radware vDirect server"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.vdirect_runnable:",
            "    validate_certs: ${6|true,false|}",
            "    vdirect_use_ssl: ${13|true,false|}",
            "    vdirect_wait: ${15|true,false|}",
            "$0"
        ],
        "description": "Runs templates and workflow actions in Radware vDirect server",
        "scope": "ansible"
    },
    "Run commands on remote devices running Extreme VOSS": {
        "prefix": [
            "community.network.voss_command",
            "Run commands on remote devices running Extreme VOSS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.voss_command:",
            "$0"
        ],
        "description": "Run commands on remote devices running Extreme VOSS",
        "scope": "ansible"
    },
    "Manage Extreme VOSS configuration sections": {
        "prefix": [
            "community.network.voss_config",
            "Manage Extreme VOSS configuration sections"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.voss_config:",
            "    backup: ${3|true,false|}",
            "    defaults: ${6|true,false|}",
            "$0"
        ],
        "description": "Manage Extreme VOSS configuration sections",
        "scope": "ansible"
    },
    "Collect facts from remote devices running Extreme VOSS": {
        "prefix": [
            "community.network.voss_facts",
            "Collect facts from remote devices running Extreme VOSS"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  community.network.voss_facts:",
            "$0"
        ],
        "description": "Collect facts from remote devices running Extreme VOSS",
        "scope": "ansible"
    }
}