{
    "Manages Kubernetes packages with the Helm package manager": {
        "prefix": [
            "kubernetes.core.helm",
            "helm Manages Kubernetes packages with the Helm package manager"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  kubernetes.core.helm:",
            "    api_key: ${2:string}",
            "    atomic: ${3|false,true|}",
            "    binary_path: ${4:/tmp/test}",
            "    ca_cert: ${5:/tmp/test}",
            "    chart_ref: ${6:/tmp/test}",
            "    chart_repo_url: ${7:string}",
            "    chart_version: ${8:string}",
            "    context: ${9:string}",
            "    create_namespace: ${10|false,true|}",
            "    dependency_update: ${11|false,true|}",
            "    disable_hook: ${12|false,true|}",
            "    force: ${13|false,true|}",
            "    history_max: ${14:int}",
            "    host: ${15:string}",
            "    kubeconfig: ${16:\"raw\"}",
            "    post_renderer: ${17:string}",
            "    purge: ${18|true,false|}",
            "    release_name: ${19:string}",
            "    release_namespace: ${20:string}",
            "    release_state: ${21|present,absent|}",
            "    replace: ${23|false,true|}",
            "    set_values:",
            "      - ${24:element}",
            "    skip_crds: ${25|false,true|}",
            "    timeout: ${26:string}",
            "    update_repo_cache: ${27|false,true|}",
            "    validate_certs: ${28|true,false|}",
            "    values_files:",
            "      - ${29:element}",
            "    wait: ${30|false,true|}",
            "    wait_timeout: ${31:string}",
            "$0"
        ],
        "description": "Manages Kubernetes packages with the Helm package manager",
        "scope": "ansible"
    },
    "Get information from Helm package deployed inside the cluster": {
        "prefix": [
            "kubernetes.core.helm_info",
            "helm_info Get information from Helm package deployed inside the cluster"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  kubernetes.core.helm_info:",
            "    api_key: ${2:string}",
            "    binary_path: ${3:/tmp/test}",
            "    ca_cert: ${4:/tmp/test}",
            "    context: ${5:string}",
            "    get_all_values: ${6|false,true|}",
            "    host: ${7:string}",
            "    kubeconfig: ${8:\"raw\"}",
            "    release_name: ${9:string}",
            "    release_namespace: ${10:string}",
            "    release_state:",
            "      - ${11:element}",
            "    validate_certs: ${12|true,false|}",
            "$0"
        ],
        "description": "Get information from Helm package deployed inside the cluster",
        "scope": "ansible"
    },
    "Manage Helm plugins": {
        "prefix": [
            "kubernetes.core.helm_plugin",
            "helm_plugin Manage Helm plugins"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  kubernetes.core.helm_plugin:",
            "    api_key: ${2:string}",
            "    binary_path: ${3:/tmp/test}",
            "    ca_cert: ${4:/tmp/test}",
            "    context: ${5:string}",
            "    host: ${6:string}",
            "    kubeconfig: ${7:\"raw\"}",
            "    plugin_name: ${8:string}",
            "    plugin_path: ${9:string}",
            "    plugin_version: ${10:string}",
            "    state: ${11|present,absent,latest|}",
            "    validate_certs: ${12|true,false|}",
            "$0"
        ],
        "description": "Manage Helm plugins",
        "scope": "ansible"
    },
    "Gather information about Helm plugins": {
        "prefix": [
            "kubernetes.core.helm_plugin_info",
            "helm_plugin_info Gather information about Helm plugins"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  kubernetes.core.helm_plugin_info:",
            "    api_key: ${2:string}",
            "    binary_path: ${3:/tmp/test}",
            "    ca_cert: ${4:/tmp/test}",
            "    context: ${5:string}",
            "    host: ${6:string}",
            "    kubeconfig: ${7:\"raw\"}",
            "    plugin_name: ${8:string}",
            "    validate_certs: ${9|true,false|}",
            "$0"
        ],
        "description": "Gather information about Helm plugins",
        "scope": "ansible"
    },
    "download a chart from a repository and (optionally) unpack it in local directory.": {
        "prefix": [
            "kubernetes.core.helm_pull",
            "helm_pull download a chart from a repository and (optionally) unpack it in local directory."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  kubernetes.core.helm_pull:",
            "    binary_path: ${2:/tmp/test}",
            "    chart_ca_cert: ${3:/tmp/test}",
            "    chart_devel: ${4|false,true|}",
            "    chart_ref: ${5:string}",
            "    chart_ssl_cert_file: ${6:/tmp/test}",
            "    chart_ssl_key_file: ${7:/tmp/test}",
            "    chart_version: ${8:string}",
            "    destination: ${9:/tmp/test}",
            "    pass_credentials: ${10|false,true|}",
            "    provenance: ${11|false,true|}",
            "    repo_password: ${12:string}",
            "    repo_url: ${13:string}",
            "    repo_username: ${14:string}",
            "    skip_tls_certs_check: ${15|false,true|}",
            "    untar_chart: ${16|false,true|}",
            "    verify_chart: ${17|false,true|}",
            "    verify_chart_keyring: ${18:/tmp/test}",
            "$0"
        ],
        "description": "download a chart from a repository and (optionally) unpack it in local directory.",
        "scope": "ansible"
    },
    "Manage Helm repositories.": {
        "prefix": [
            "kubernetes.core.helm_repository",
            "helm_repository Manage Helm repositories."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  kubernetes.core.helm_repository:",
            "    api_key: ${2:string}",
            "    binary_path: ${3:/tmp/test}",
            "    ca_cert: ${4:/tmp/test}",
            "    context: ${5:string}",
            "    force_update: ${6|false,true|}",
            "    host: ${7:string}",
            "    kubeconfig: ${8:\"raw\"}",
            "    pass_credentials: ${9|false,true|}",
            "    repo_name: ${10:string}",
            "    repo_password: ${11:string}",
            "    repo_state: ${12|present,absent|}",
            "    repo_url: ${13:string}",
            "    repo_username: ${14:string}",
            "    validate_certs: ${15|true,false|}",
            "$0"
        ],
        "description": "Manage Helm repositories.",
        "scope": "ansible"
    },
    "Render chart templates": {
        "prefix": [
            "kubernetes.core.helm_template",
            "helm_template Render chart templates"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  kubernetes.core.helm_template:",
            "    binary_path: ${2:/tmp/test}",
            "    chart_ref: ${3:/tmp/test}",
            "    chart_repo_url: ${4:string}",
            "    chart_version: ${5:string}",
            "    dependency_update: ${6|false,true|}",
            "    disable_hook: ${7|false,true|}",
            "    include_crds: ${8|false,true|}",
            "    output_dir: ${9:/tmp/test}",
            "    release_name: ${10:string}",
            "    release_namespace: ${11:string}",
            "    set_values:",
            "      - ${13:element}",
            "    show_only:",
            "      - ${14:element}",
            "    update_repo_cache: ${15|false,true|}",
            "    values_files:",
            "      - ${16:element}",
            "$0"
        ],
        "description": "Render chart templates",
        "scope": "ansible"
    },
    "Manage Kubernetes (K8s) objects": {
        "prefix": [
            "kubernetes.core.k8s",
            "k8s Manage Kubernetes (K8s) objects"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  kubernetes.core.k8s:",
            "    api_key: ${2:string}",
            "    api_version: ${3:v1}",
            "    append_hash: ${4|false,true|}",
            "    apply: ${5|false,true|}",
            "    ca_cert: ${6:/tmp/test}",
            "    client_cert: ${7:/tmp/test}",
            "    client_key: ${8:/tmp/test}",
            "    context: ${9:string}",
            "    continue_on_error: ${10|false,true|}",
            "    force: ${12|false,true|}",
            "    generate_name: ${13:string}",
            "    host: ${14:string}",
            "    impersonate_groups:",
            "      - ${15:element}",
            "    impersonate_user: ${16:string}",
            "    kind: ${17:string}",
            "    kubeconfig: ${18:\"raw\"}",
            "    label_selectors:",
            "      - ${19:element}",
            "    merge_type: ${20|json,merge,strategic-merge|}",
            "    name: ${21:string}",
            "    namespace: ${22:string}",
            "    no_proxy: ${23:string}",
            "    password: ${24:string}",
            "    persist_config: ${25|false,true|}",
            "    proxy: ${26:string}",
            "    src: ${30:/tmp/test}",
            "    state: ${31|present,absent,patched|}",
            "    template: ${32:\"raw\"}",
            "    username: ${33:string}",
            "    validate_certs: ${35|false,true|}",
            "    wait: ${36|false,true|}",
            "    wait_sleep: ${38:5}",
            "    wait_timeout: ${39:120}",
            "$0"
        ],
        "description": "Manage Kubernetes (K8s) objects",
        "scope": "ansible"
    },
    "Describe Kubernetes (K8s) cluster, APIs available and their respective versions": {
        "prefix": [
            "kubernetes.core.k8s_cluster_info",
            "k8s_cluster_info Describe Kubernetes (K8s) cluster, APIs available and their respective versions"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  kubernetes.core.k8s_cluster_info:",
            "    api_key: ${2:string}",
            "    ca_cert: ${3:/tmp/test}",
            "    client_cert: ${4:/tmp/test}",
            "    client_key: ${5:/tmp/test}",
            "    context: ${6:string}",
            "    host: ${7:string}",
            "    impersonate_groups:",
            "      - ${8:element}",
            "    impersonate_user: ${9:string}",
            "    invalidate_cache: ${10|true,false|}",
            "    kubeconfig: ${11:\"raw\"}",
            "    no_proxy: ${12:string}",
            "    password: ${13:string}",
            "    persist_config: ${14|false,true|}",
            "    proxy: ${15:string}",
            "    username: ${17:string}",
            "    validate_certs: ${18|false,true|}",
            "$0"
        ],
        "description": "Describe Kubernetes (K8s) cluster, APIs available and their respective versions",
        "scope": "ansible"
    },
    "Copy files and directories to and from pod.": {
        "prefix": [
            "kubernetes.core.k8s_cp",
            "k8s_cp Copy files and directories to and from pod."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  kubernetes.core.k8s_cp:",
            "    api_key: ${2:string}",
            "    ca_cert: ${3:/tmp/test}",
            "    client_cert: ${4:/tmp/test}",
            "    client_key: ${5:/tmp/test}",
            "    container: ${6:string}",
            "    content: ${7:string}",
            "    context: ${8:string}",
            "    host: ${9:string}",
            "    impersonate_groups:",
            "      - ${10:element}",
            "    impersonate_user: ${11:string}",
            "    kubeconfig: ${12:\"raw\"}",
            "    local_path: ${13:/tmp/test}",
            "    namespace: ${14:string}",
            "    no_preserve: ${15|false,true|}",
            "    no_proxy: ${16:string}",
            "    password: ${17:string}",
            "    persist_config: ${18|false,true|}",
            "    pod: ${19:string}",
            "    proxy: ${20:string}",
            "    remote_path: ${22:/tmp/test}",
            "    state: ${23|to_pod,from_pod|}",
            "    username: ${24:string}",
            "    validate_certs: ${25|false,true|}",
            "$0"
        ],
        "description": "Copy files and directories to and from pod.",
        "scope": "ansible"
    },
    "Drain, Cordon, or Uncordon node in k8s cluster": {
        "prefix": [
            "kubernetes.core.k8s_drain",
            "k8s_drain Drain, Cordon, or Uncordon node in k8s cluster"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  kubernetes.core.k8s_drain:",
            "    api_key: ${2:string}",
            "    ca_cert: ${3:/tmp/test}",
            "    client_cert: ${4:/tmp/test}",
            "    client_key: ${5:/tmp/test}",
            "    context: ${6:string}",
            "    host: ${8:string}",
            "    impersonate_groups:",
            "      - ${9:element}",
            "    impersonate_user: ${10:string}",
            "    kubeconfig: ${11:\"raw\"}",
            "    name: ${12:string}",
            "    no_proxy: ${13:string}",
            "    password: ${14:string}",
            "    persist_config: ${15|false,true|}",
            "    proxy: ${16:string}",
            "    state: ${18|drain,cordon,uncordon|}",
            "    username: ${19:string}",
            "    validate_certs: ${20|false,true|}",
            "$0"
        ],
        "description": "Drain, Cordon, or Uncordon node in k8s cluster",
        "scope": "ansible"
    },
    "Execute command in Pod": {
        "prefix": [
            "kubernetes.core.k8s_exec",
            "k8s_exec Execute command in Pod"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  kubernetes.core.k8s_exec:",
            "    api_key: ${2:string}",
            "    ca_cert: ${3:/tmp/test}",
            "    client_cert: ${4:/tmp/test}",
            "    client_key: ${5:/tmp/test}",
            "    command: ${6:string}",
            "    container: ${7:string}",
            "    context: ${8:string}",
            "    host: ${9:string}",
            "    impersonate_groups:",
            "      - ${10:element}",
            "    impersonate_user: ${11:string}",
            "    kubeconfig: ${12:\"raw\"}",
            "    namespace: ${13:string}",
            "    no_proxy: ${14:string}",
            "    password: ${15:string}",
            "    persist_config: ${16|false,true|}",
            "    pod: ${17:string}",
            "    proxy: ${18:string}",
            "    username: ${20:string}",
            "    validate_certs: ${21|false,true|}",
            "$0"
        ],
        "description": "Execute command in Pod",
        "scope": "ansible"
    },
    "Describe Kubernetes (K8s) objects": {
        "prefix": [
            "kubernetes.core.k8s_info",
            "k8s_info Describe Kubernetes (K8s) objects"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  kubernetes.core.k8s_info:",
            "    api_key: ${2:string}",
            "    api_version: ${3:v1}",
            "    ca_cert: ${4:/tmp/test}",
            "    client_cert: ${5:/tmp/test}",
            "    client_key: ${6:/tmp/test}",
            "    context: ${7:string}",
            "    field_selectors:",
            "      - ${8:element}",
            "    host: ${9:string}",
            "    impersonate_groups:",
            "      - ${10:element}",
            "    impersonate_user: ${11:string}",
            "    kind: ${12:string}",
            "    kubeconfig: ${13:\"raw\"}",
            "    label_selectors:",
            "      - ${14:element}",
            "    name: ${15:string}",
            "    namespace: ${16:string}",
            "    no_proxy: ${17:string}",
            "    password: ${18:string}",
            "    persist_config: ${19|false,true|}",
            "    proxy: ${20:string}",
            "    username: ${22:string}",
            "    validate_certs: ${23|false,true|}",
            "    wait: ${24|false,true|}",
            "    wait_sleep: ${26:5}",
            "    wait_timeout: ${27:120}",
            "$0"
        ],
        "description": "Describe Kubernetes (K8s) objects",
        "scope": "ansible"
    },
    "Apply JSON patch operations to existing objects": {
        "prefix": [
            "kubernetes.core.k8s_json_patch",
            "k8s_json_patch Apply JSON patch operations to existing objects"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  kubernetes.core.k8s_json_patch:",
            "    api_key: ${2:string}",
            "    api_version: ${3:v1}",
            "    ca_cert: ${4:/tmp/test}",
            "    client_cert: ${5:/tmp/test}",
            "    client_key: ${6:/tmp/test}",
            "    context: ${7:string}",
            "    host: ${8:string}",
            "    impersonate_groups:",
            "      - ${9:element}",
            "    impersonate_user: ${10:string}",
            "    kind: ${11:string}",
            "    kubeconfig: ${12:\"raw\"}",
            "    name: ${13:string}",
            "    namespace: ${14:string}",
            "    no_proxy: ${15:string}",
            "    password: ${16:string}",
            "    patch:",
            "      - ${17:element}",
            "    persist_config: ${18|false,true|}",
            "    proxy: ${19:string}",
            "    username: ${21:string}",
            "    validate_certs: ${22|false,true|}",
            "    wait: ${23|false,true|}",
            "    wait_sleep: ${25:5}",
            "    wait_timeout: ${26:120}",
            "$0"
        ],
        "description": "Apply JSON patch operations to existing objects",
        "scope": "ansible"
    },
    "Fetch logs from Kubernetes resources": {
        "prefix": [
            "kubernetes.core.k8s_log",
            "k8s_log Fetch logs from Kubernetes resources"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  kubernetes.core.k8s_log:",
            "    all_containers: ${2|false,true|}",
            "    api_key: ${3:string}",
            "    api_version: ${4:v1}",
            "    ca_cert: ${5:/tmp/test}",
            "    client_cert: ${6:/tmp/test}",
            "    client_key: ${7:/tmp/test}",
            "    container: ${8:string}",
            "    context: ${9:string}",
            "    host: ${10:string}",
            "    impersonate_groups:",
            "      - ${11:element}",
            "    impersonate_user: ${12:string}",
            "    kind: ${13:Pod}",
            "    kubeconfig: ${14:\"raw\"}",
            "    label_selectors:",
            "      - ${15:element}",
            "    name: ${16:string}",
            "    namespace: ${17:string}",
            "    no_proxy: ${18:string}",
            "    password: ${19:string}",
            "    persist_config: ${20|false,true|}",
            "    previous: ${21|false,true|}",
            "    proxy: ${22:string}",
            "    since_seconds: ${24:string}",
            "    tail_lines: ${25:int}",
            "    username: ${26:string}",
            "    validate_certs: ${27|false,true|}",
            "$0"
        ],
        "description": "Fetch logs from Kubernetes resources",
        "scope": "ansible"
    },
    "Rollback Kubernetes (K8S) Deployments and DaemonSets": {
        "prefix": [
            "kubernetes.core.k8s_rollback",
            "k8s_rollback Rollback Kubernetes (K8S) Deployments and DaemonSets"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  kubernetes.core.k8s_rollback:",
            "    api_key: ${2:string}",
            "    api_version: ${3:v1}",
            "    ca_cert: ${4:/tmp/test}",
            "    client_cert: ${5:/tmp/test}",
            "    client_key: ${6:/tmp/test}",
            "    context: ${7:string}",
            "    field_selectors:",
            "      - ${8:element}",
            "    host: ${9:string}",
            "    impersonate_groups:",
            "      - ${10:element}",
            "    impersonate_user: ${11:string}",
            "    kind: ${12:string}",
            "    kubeconfig: ${13:\"raw\"}",
            "    label_selectors:",
            "      - ${14:element}",
            "    name: ${15:string}",
            "    namespace: ${16:string}",
            "    no_proxy: ${17:string}",
            "    password: ${18:string}",
            "    persist_config: ${19|false,true|}",
            "    proxy: ${20:string}",
            "    username: ${22:string}",
            "    validate_certs: ${23|false,true|}",
            "$0"
        ],
        "description": "Rollback Kubernetes (K8S) Deployments and DaemonSets",
        "scope": "ansible"
    },
    "Set a new size for a Deployment, ReplicaSet, Replication Controller, or Job.": {
        "prefix": [
            "kubernetes.core.k8s_scale",
            "k8s_scale Set a new size for a Deployment, ReplicaSet, Replication Controller, or Job."
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  kubernetes.core.k8s_scale:",
            "    api_key: ${2:string}",
            "    api_version: ${3:v1}",
            "    ca_cert: ${4:/tmp/test}",
            "    client_cert: ${5:/tmp/test}",
            "    client_key: ${6:/tmp/test}",
            "    context: ${7:string}",
            "    continue_on_error: ${8|false,true|}",
            "    current_replicas: ${9:int}",
            "    host: ${10:string}",
            "    impersonate_groups:",
            "      - ${11:element}",
            "    impersonate_user: ${12:string}",
            "    kind: ${13:string}",
            "    kubeconfig: ${14:\"raw\"}",
            "    label_selectors:",
            "      - ${15:element}",
            "    name: ${16:string}",
            "    namespace: ${17:string}",
            "    no_proxy: ${18:string}",
            "    password: ${19:string}",
            "    persist_config: ${20|false,true|}",
            "    proxy: ${21:string}",
            "    replicas: ${23:int}",
            "    resource_version: ${25:string}",
            "    src: ${26:/tmp/test}",
            "    username: ${27:string}",
            "    validate_certs: ${28|false,true|}",
            "    wait: ${29|true,false|}",
            "    wait_sleep: ${30:5}",
            "    wait_timeout: ${31:20}",
            "$0"
        ],
        "description": "Set a new size for a Deployment, ReplicaSet, Replication Controller, or Job.",
        "scope": "ansible"
    },
    "Manage Services on Kubernetes": {
        "prefix": [
            "kubernetes.core.k8s_service",
            "k8s_service Manage Services on Kubernetes"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  kubernetes.core.k8s_service:",
            "    api_key: ${2:string}",
            "    apply: ${3|false,true|}",
            "    ca_cert: ${4:/tmp/test}",
            "    client_cert: ${5:/tmp/test}",
            "    client_key: ${6:/tmp/test}",
            "    context: ${7:string}",
            "    force: ${8|false,true|}",
            "    host: ${9:string}",
            "    impersonate_groups:",
            "      - ${10:element}",
            "    impersonate_user: ${11:string}",
            "    kubeconfig: ${12:\"raw\"}",
            "    merge_type: ${13|json,merge,strategic-merge|}",
            "    name: ${14:string}",
            "    namespace: ${15:string}",
            "    no_proxy: ${16:string}",
            "    password: ${17:string}",
            "    persist_config: ${18|false,true|}",
            "    ports:",
            "      - ${19:element}",
            "    proxy: ${20:string}",
            "    src: ${24:/tmp/test}",
            "    state: ${25|present,absent|}",
            "    type: ${26|NodePort,ClusterIP,LoadBalancer,ExternalName|}",
            "    username: ${27:string}",
            "    validate_certs: ${28|false,true|}",
            "$0"
        ],
        "description": "Manage Services on Kubernetes",
        "scope": "ansible"
    },
    "Taint a node in a Kubernetes/OpenShift cluster": {
        "prefix": [
            "kubernetes.core.k8s_taint",
            "k8s_taint Taint a node in a Kubernetes/OpenShift cluster"
        ],
        "body": [
            "- name: ${1:Description}",
            "  # ${99:Comment}",
            "  kubernetes.core.k8s_taint:",
            "    api_key: ${2:string}",
            "    ca_cert: ${3:/tmp/test}",
            "    client_cert: ${4:/tmp/test}",
            "    client_key: ${5:/tmp/test}",
            "    context: ${6:string}",
            "    host: ${7:string}",
            "    impersonate_groups:",
            "      - ${8:element}",
            "    impersonate_user: ${9:string}",
            "    kubeconfig: ${10:\"raw\"}",
            "    name: ${11:string}",
            "    no_proxy: ${12:string}",
            "    password: ${13:string}",
            "    persist_config: ${14|false,true|}",
            "    proxy: ${15:string}",
            "    replace: ${17|false,true|}",
            "    state: ${18|present,absent|}",
            "    taints:",
            "      - ${19:element}",
            "    username: ${20:string}",
            "    validate_certs: ${21|false,true|}",
            "$0"
        ],
        "description": "Taint a node in a Kubernetes/OpenShift cluster",
        "scope": "ansible"
    }
}